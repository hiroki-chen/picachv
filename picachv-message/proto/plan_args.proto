syntax = "proto3";

import "basic.proto";

package PicachvMessages;

message GetDataFromFileArgument {
  // The path to the file.
  string path = 1;
  // The type of the file.
  FileType file_type = 2;
  // The schema of the file.
  //
  // Note that the caller must ensure that the schema itself is registered!
  bytes df_uuid = 3;
}

message GetDataInMemory {
  bytes df_uuid = 1;
  // In case we will have the "selection pushdown" thing.
  optional bytes pred = 2;
  // In case we will have the "projection pushdown" thing.
  repeated string projected_list = 3;
}

message GetDataArgument {
  oneof data_source {
    GetDataFromFileArgument from_file = 1;
    GetDataInMemory in_memory = 2;
  }
}

message SelectArgument {
  // The uuid of the predicate.
  bytes pred_uuid = 1;
}

message ProjectionArgument {
  // Column 'names' as we may apply some transformation on columns.
  repeated bytes expression = 1;
}

message AggregateArgument {
  // The uuid of the group by.
  repeated bytes keys = 1;
  repeated bytes aggs_uuid = 2;
  bool maintain_order = 3;
  GroupByProxy group_by_proxy = 4;
  repeated string output_schema = 5;
}

// A Rust `enum`-like message to represent the different types of physical
// plans.
message PlanArgument {
  oneof argument {
    SelectArgument select = 1;
    ProjectionArgument projection = 2;
    AggregateArgument aggregate = 3;
    GetDataArgument get_data = 4;
  }
}
