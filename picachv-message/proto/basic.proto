syntax = "proto3";

package PicachvMessages;

message ColumnSpecifier {
  oneof column {
    uint64 column_index = 1;
    string column_name = 2;
  }
}

message GroupByIdx {
  message Groups {
    // The vectors of indexes that are used to group the data.
    uint64 first = 1;
    // The group indices that are used to group the data.
    repeated uint64 group = 2;
  }

  repeated Groups groups = 1;
}

message GroupBySlice {
  // A vector of group indices.
  repeated uint64 groups = 1;
}

message GroupByProxy {
  oneof group_by {
    GroupByIdx group_by_idx = 1;
    GroupBySlice group_by_slice = 2;
  }
}

// A value that incorporates any primitive data types.
//
// Note that there is no `u8`, `u16` type in protobuf so we use a tag to
// differentiate between the different types.
message PrimitiveValue {
  message Duration {
    int64 sec = 1;
    int32 nsec = 2;
  }

  oneof value {
    uint32 u8 = 1;
    uint32 u16 = 2;
    uint32 u32 = 3;
    uint64 u64 = 4;
    int32 i8 = 5;
    int32 i16 = 6;
    int32 i32 = 7;
    int64 i64 = 8;
    float f32 = 9;
    double f64 = 10;
    bool bool = 11;
    string str = 12;
    Duration duration = 13;
  }
}

enum FileType {
  Csv = 0;
  Parquet = 1;
  Json = 2;
  Avro = 3;
}

enum JoinType {
  Inner = 0;
  Left = 1;
  Cross = 2;
  Outer = 3;
}

enum LogicalPlanType {
  Select = 0;
  Distinct = 1;
  Projection = 2;
  Aggregation = 3;
  Join = 4;
  Scan = 5;
  Union = 6;
  Other = 7;
}

enum LogicalBinaryOperator {
  And = 0;
  Or = 1;
}

enum ComparisonBinaryOperator {
  Eq = 0;
  Ne = 1;
  Gt = 2;
  Lt = 3;
  Le = 4;
  Ge = 5;
}

// We only need to tell Picachv what we are trying to do currently.
enum ArithmeticBinaryOperator {
  Add = 0;
  Sub = 1;
  Mul = 2;
  Div = 3;
  Mod = 4;
  Pow = 5;
  ShiftBy = 6;
}

message BinaryOperator {
  oneof operator {
    LogicalBinaryOperator logical_operator = 1;
    ComparisonBinaryOperator comparison_operator = 2;
    ArithmeticBinaryOperator arithmetic_operator = 3;
  }
}

enum UnaryOperator {
  Identity = 0;
  Redact = 1;
  Substitute = 2;
  Not = 3;
}

enum GroupByMethod {
  Min = 0;
  NanMin = 1;
  Max = 2;
  NanMax = 3;
  Median = 4;
  Mean = 5;
  First = 6;
  Last = 7;
  Sum = 8;
}

enum ExprType {
  Agg = 0;
  Column = 1;
  Count = 2;
  Alias = 3;
  Wildcard = 4;
  Filter = 5;
  Binary = 6;
  Unary = 7;
}
