(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module policy.
  Module lattice.
    (* Trait *)
    Module Lattice.
      Definition flowsto (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (| "core::cmp::PartialEq", Self, [ Self ], "eq", [] |),
              [
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "picachv_core::policy::lattice::Lattice",
                      Self,
                      [],
                      "join",
                      []
                    |),
                    [ M.read (| self |); M.read (| other |) ]
                  |)
                |);
                M.read (| other |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_flowsto :
        M.IsProvidedMethod "picachv_core::policy::lattice::Lattice" "flowsto" flowsto.
    End Lattice.
  End lattice.
End policy.
