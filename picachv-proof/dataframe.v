(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dataframe.
  Axiom PolicyGuardedColumnRef :
    (Ty.path "picachv_core::dataframe::PolicyGuardedColumnRef") =
      (Ty.apply
        (Ty.path "alloc::sync::Arc")
        [ Ty.path "picachv_core::dataframe::PolicyGuardedColumn"; Ty.path "alloc::alloc::Global" ]).
  
  Axiom PolicyRef :
    (Ty.path "picachv_core::dataframe::PolicyRef") =
      (Ty.apply
        (Ty.path "alloc::sync::Arc")
        [ Ty.path "picachv_core::policy::policy::Policy"; Ty.path "alloc::alloc::Global" ]).
  
  Axiom Row :
    (Ty.path "picachv_core::dataframe::Row") =
      (Ty.apply
        (Ty.path "alloc::vec::Vec")
        [
          Ty.apply
            (Ty.path "alloc::sync::Arc")
            [ Ty.path "picachv_core::policy::policy::Policy"; Ty.path "alloc::alloc::Global" ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  Axiom DfArena :
    (Ty.path "picachv_core::dataframe::DfArena") =
      (Ty.apply
        (Ty.path "picachv_core::arena::Arena")
        [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ]).
  
  (* StructRecord
    {
      name := "PolicyGuardedColumn";
      ty_params := [];
      fields :=
        [
          ("policies",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  [ Ty.path "picachv_core::policy::policy::Policy"; Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "picachv_core::dataframe::PolicyGuardedColumn"
            [
              ("policies",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          [
                            Ty.path "picachv_core::policy::policy::Policy";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::dataframe::PolicyGuardedColumn",
                      "policies"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_dataframe_PolicyGuardedColumn.
  
  Module Impl_core_fmt_Debug_for_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "PolicyGuardedColumn" |);
              M.read (| Value.String "policies" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::dataframe::PolicyGuardedColumn",
                    "policies"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_dataframe_PolicyGuardedColumn.
  
  Module Impl_core_default_Default_for_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    (* Default *)
    Definition default (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "picachv_core::dataframe::PolicyGuardedColumn"
            [
              ("policies",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          [
                            Ty.path "picachv_core::policy::policy::Policy";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "default",
                    []
                  |),
                  []
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_picachv_core_dataframe_PolicyGuardedColumn.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_for_picachv_core_dataframe_PolicyGuardedColumn.
      Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
      
      (* Serialize *)
      Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_struct",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "PolicyGuardedColumn" |);
                                  BinOp.Wrap.add
                                    Integer.Usize
                                    (M.rust_cast (Value.Bool false))
                                    (Value.Integer 1)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.associated ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated,
                                [],
                                "serialize_field",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::policy::policy::Policy";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                __serde_state;
                                M.read (| Value.String "policies" |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "picachv_core::dataframe::PolicyGuardedColumn",
                                  "policies"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated,
                        [],
                        "end",
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_picachv_core_dataframe_PolicyGuardedColumn.
    Module Impl_serde_de_Deserialize_for_picachv_core_dataframe_PolicyGuardedColumn.
      Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
      
      (* Deserialize *)
      Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                "deserialize_struct",
                [ Ty.path "picachv_core::dataframe::_'1::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                M.read (| Value.String "PolicyGuardedColumn" |);
                M.read (|
                  M.get_constant (| "picachv_core::dataframe::_'1::deserialize::FIELDS" |)
                |);
                Value.StructRecord
                  "picachv_core::dataframe::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_picachv_core_dataframe_PolicyGuardedColumn.
    Module Impl_serde_ser_Serialize_for_picachv_core_dataframe_PolicyGuardedDataFrame.
      Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
      
      (* Serialize *)
      Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_struct",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "PolicyGuardedDataFrame" |);
                                  BinOp.Wrap.add
                                    Integer.Usize
                                    (M.rust_cast (Value.Bool false))
                                    (Value.Integer 1)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.associated ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated,
                                [],
                                "serialize_field",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                __serde_state;
                                M.read (| Value.String "columns" |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "picachv_core::dataframe::PolicyGuardedDataFrame",
                                  "columns"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated,
                        [],
                        "end",
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Module Impl_serde_de_Deserialize_for_picachv_core_dataframe_PolicyGuardedDataFrame.
      Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
      
      (* Deserialize *)
      Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                "deserialize_struct",
                [ Ty.path "picachv_core::dataframe::_'3::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                M.read (| Value.String "PolicyGuardedDataFrame" |);
                M.read (|
                  M.get_constant (| "picachv_core::dataframe::_'3::deserialize::FIELDS" |)
                |);
                Value.StructRecord
                  "picachv_core::dataframe::_'3::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  End underscore.
  
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_dataframe_PolicyGuardedColumn.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    [ Ty.path "picachv_core::policy::policy::Policy"; Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::policy::policy::Policy";
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ],
              "eq",
              []
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "picachv_core::dataframe::PolicyGuardedColumn",
                "policies"
              |);
              M.SubPointer.get_struct_record_field (|
                M.read (| other |),
                "picachv_core::dataframe::PolicyGuardedColumn",
                "policies"
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_dataframe_PolicyGuardedColumn.
  
  Module Impl_picachv_core_dataframe_PolicyGuardedColumn.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedColumn".
    
    (*
        pub fn new(policies: Vec<PolicyRef>) -> Self {
            PolicyGuardedColumn { policies }
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ policies ] =>
        ltac:(M.monadic
          (let policies := M.alloc (| policies |) in
          Value.StructRecord
            "picachv_core::dataframe::PolicyGuardedColumn"
            [ ("policies", M.read (| policies |)) ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  End Impl_picachv_core_dataframe_PolicyGuardedColumn.
  
  (* StructRecord
    {
      name := "PolicyGuardedDataFrame";
      ty_params := [];
      fields :=
        [
          ("columns",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  [
                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "picachv_core::dataframe::PolicyGuardedDataFrame"
            [
              ("columns",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          [
                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                      "columns"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    [
                      Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ],
              "eq",
              []
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "picachv_core::dataframe::PolicyGuardedDataFrame",
                "columns"
              |);
              M.SubPointer.get_struct_record_field (|
                M.read (| other |),
                "picachv_core::dataframe::PolicyGuardedDataFrame",
                "columns"
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  Module Impl_core_fmt_Display_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write!(f, "{self:?}")
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
            [
              M.read (| f |);
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                [
                  (* Unsize *)
                  M.pointer_coercion (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::rt::Argument",
                              "new_debug",
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ]
                              ]
                            |),
                            [ self ]
                          |)
                        ]
                    |))
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  Module Impl_core_fmt_Debug_for_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            let mut builder = Builder::new();
            let mut header = self
                .columns
                .iter()
                .enumerate()
                .map(|(i, _)| format!("column_{}", i))
                .collect::<Vec<_>>();
            header.insert(0, "index".to_string());
            builder.push_record(header);
    
            for i in (0..self.shape().0).take(15) {
                let mut row = vec![i.to_string()];
                for j in 0..self.shape().1 {
                    row.push(format!("{}", self.columns[j].policies[i]));
                }
                builder.push_record(row);
            }
    
            write!(
                f,
                "\n{}",
                builder
                    .build()
                    .with(Style::rounded())
                    .modify(Rows::new(1..), Alignment::left())
            )
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ builder :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "tabled::builder::table_builder::Builder",
                    "new",
                    []
                  |),
                  []
                |)
              |) in
            let~ header :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.path "alloc::string::String")
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        [],
                        "map",
                        [
                          Ty.path "alloc::string::String";
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.path "alloc::string::String")
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "enumerate",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                      "columns"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        M.read (|
                                          let~ res :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (| "alloc::fmt::format", [] |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_v1",
                                                      []
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.alloc (|
                                                          Value.Array
                                                            [ M.read (| Value.String "column_" |) ]
                                                        |));
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.alloc (|
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [ i ]
                                                              |)
                                                            ]
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          res
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                    "insert",
                    []
                  |),
                  [
                    header;
                    Value.Integer 0;
                    M.call_closure (|
                      M.get_trait_method (|
                        "alloc::string::ToString",
                        Ty.path "str",
                        [],
                        "to_string",
                        []
                      |),
                      [ M.read (| Value.String "index" |) ]
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "tabled::builder::table_builder::Builder",
                    "push_record",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [ builder; M.read (| header |) ]
                |)
              |) in
            let~ _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "take",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.SubPointer.get_tuple_field (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                            "shape",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |)
                                      |),
                                      0
                                    |)
                                  |))
                              ];
                            Value.Integer 15
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::take::Take")
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ]
                                        ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      let~ row :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [ Ty.path "alloc::string::String" ],
                                              "into_vec",
                                              [ Ty.path "alloc::alloc::Global" ]
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Ty.path "alloc::string::String" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "alloc::string::ToString",
                                                                Ty.path "usize",
                                                                [],
                                                                "to_string",
                                                                []
                                                              |),
                                                              [ i ]
                                                            |)
                                                          ]
                                                      |)
                                                    ]
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |) in
                                      let~ _ :=
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", Value.Integer 0);
                                                      ("end_",
                                                        M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                  "shape",
                                                                  []
                                                                |),
                                                                [ M.read (| self |) ]
                                                              |)
                                                            |),
                                                            1
                                                          |)
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let~ _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "usize" ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "core::option::Option::None"
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let j := M.copy (| γ0_0 |) in
                                                                let~ _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "alloc::string::String";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "push",
                                                                        []
                                                                      |),
                                                                      [
                                                                        row;
                                                                        M.read (|
                                                                          let~ res :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "alloc::fmt::format",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      "new_v1",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        (M.alloc (|
                                                                                          Value.Array
                                                                                            [
                                                                                              M.read (|
                                                                                                Value.String
                                                                                                  ""
                                                                                              |)
                                                                                            ]
                                                                                        |));
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        (M.alloc (|
                                                                                          Value.Array
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::index::Index",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::sync::Arc")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_core::policy::policy::Policy";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ];
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ],
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ],
                                                                                                      "index",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::deref::Deref",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::sync::Arc")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [],
                                                                                                            "deref",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::index::Index",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::sync::Arc")
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ],
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ],
                                                                                                                "index",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                  M.read (|
                                                                                                                    self
                                                                                                                  |),
                                                                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                                                  "columns"
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  j
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |),
                                                                                                        "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                                        "policies"
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                        |))
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          res
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |)) in
                                      let~ _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "tabled::builder::table_builder::Builder",
                                              "push_record",
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "alloc::string::String";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [ builder; M.read (| row |) ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
                [
                  M.read (| f |);
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                    [
                      (* Unsize *)
                      M.pointer_coercion
                        (M.alloc (| Value.Array [ M.read (| Value.String "
" |) ] |));
                      (* Unsize *)
                      M.pointer_coercion
                        (M.alloc (|
                          Value.Array
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::rt::Argument",
                                  "new_display",
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [ Ty.path "tabled::tables::table::Table" ]
                                  ]
                                |),
                                [
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tabled::tables::table::Table",
                                        "modify",
                                        [
                                          Ty.apply
                                            (Ty.path "tabled::settings::object::rows::Rows")
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeFrom")
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.path "tabled::settings::alignment::Alignment"
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "tabled::tables::table::Table",
                                            "with",
                                            [
                                              Ty.apply
                                                (Ty.path "tabled::settings::style::builder::Style")
                                                [
                                                  Ty.path "tabled::settings::style::builder::On";
                                                  Ty.path "tabled::settings::style::builder::On";
                                                  Ty.path "tabled::settings::style::builder::On";
                                                  Ty.path "tabled::settings::style::builder::On";
                                                  Ty.tuple [];
                                                  Ty.path "tabled::settings::style::builder::On"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tabled::builder::table_builder::Builder",
                                                  "build",
                                                  []
                                                |),
                                                [ M.read (| builder |) ]
                                              |)
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "tabled::settings::style::builder::Style")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.tuple [];
                                                    Ty.tuple [];
                                                    Ty.tuple [];
                                                    Ty.tuple [];
                                                    Ty.tuple []
                                                  ],
                                                "rounded",
                                                []
                                              |),
                                              []
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "tabled::settings::object::rows::Rows")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeFrom")
                                                  [ Ty.path "usize" ]
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            Value.StructRecord
                                              "core::ops::range::RangeFrom"
                                              [ ("start", Value.Integer 1) ]
                                          ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "tabled::settings::alignment::Alignment",
                                            "left",
                                            []
                                          |),
                                          []
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        |))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  Module Impl_picachv_core_dataframe_PolicyGuardedDataFrame.
    Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
    
    (*
        pub fn reorder(&mut self, perm: &[usize]) -> PicachvResult<()> {
            THREAD_POOL.install(|| {
                self.columns.par_iter_mut().for_each(|c| {
                    let policies = perm
                        .par_iter()
                        .map(|&i| c.policies[i].clone())
                        .collect::<Vec<_>>();
                    // c.policies = policies;
                })
            });
    
            Ok(())
        }
    *)
    Definition reorder (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; perm ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let perm := M.alloc (| perm |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "rayon_core::thread_pool::ThreadPool",
                    "install",
                    [ Ty.function [ Ty.tuple [] ] (Ty.tuple []); Ty.tuple [] ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "std::sync::lazy_lock::LazyLock")
                          [
                            Ty.path "rayon_core::thread_pool::ThreadPool";
                            Ty.function [] (Ty.path "rayon_core::thread_pool::ThreadPool")
                          ],
                        [],
                        "deref",
                        []
                      |),
                      [ M.read (| M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |) |) ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::slice::IterMut")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        "for_each",
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.tuple [])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::IntoParallelRefMutIterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "par_iter_mut",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "columns"
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let c := M.copy (| γ |) in
                                                        M.read (|
                                                          let~ policies :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "rayon::iter::ParallelIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "rayon::iter::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::Iter")
                                                                        [ Ty.path "usize" ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ])
                                                                    ],
                                                                  [],
                                                                  "collect",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rayon::iter::ParallelIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::slice::Iter")
                                                                        [ Ty.path "usize" ],
                                                                      [],
                                                                      "map",
                                                                      [
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            [
                                                                              Ty.path
                                                                                "picachv_core::policy::policy::Policy";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]);
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "rayon::iter::IntoParallelRefIterator",
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          "par_iter",
                                                                          []
                                                                        |),
                                                                        [ M.read (| perm |) ]
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.read (|
                                                                                          γ
                                                                                        |) in
                                                                                      let i :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::clone::Clone",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_core::policy::policy::Policy";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "clone",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::Index",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::sync::Arc")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "picachv_core::policy::policy::Policy";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::deref::Deref",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "deref",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |)
                                                                                                  ]
                                                                                                |),
                                                                                                "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                                "policies"
                                                                                              |);
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_reorder : M.IsAssociatedFunction Self "reorder" reorder.
    
    (*
        pub fn new_from_record_batch(rb: RecordBatch) -> PicachvResult<Self> {
            let columns = THREAD_POOL.install(|| {
                rb.columns()
                    .par_iter()
                    .map(|c| {
                        let policies = c
                            .as_any()
                            .downcast_ref::<BinaryArray>()
                            .ok_or(PicachvError::InvalidOperation(
                                "Failed to downcast to BinaryArray.".into(),
                            ))?
                            .iter()
                            .map(|e| {
                                Ok(Arc::new(Policy::from_byte_array(e.unwrap()).map_err(
                                    |e| PicachvError::InvalidOperation(e.to_string().into()),
                                )?))
                            })
                            .collect::<PicachvResult<Vec<_>>>()?;
                        Ok(Arc::new(PolicyGuardedColumn { policies }))
                    })
                    .collect::<PicachvResult<Vec<_>>>()
            })?;
    
            Ok(PolicyGuardedDataFrame { columns })
        }
    *)
    Definition new_from_record_batch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ rb ] =>
        ltac:(M.monadic
          (let rb := M.alloc (| rb |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ columns :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "picachv_error::PicachvError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "rayon_core::thread_pool::ThreadPool",
                                "install",
                                [
                                  Ty.function
                                    [ Ty.tuple [] ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "picachv_error::PicachvError"
                                      ]);
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "picachv_error::PicachvError"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "std::sync::lazy_lock::LazyLock")
                                      [
                                        Ty.path "rayon_core::thread_pool::ThreadPool";
                                        Ty.function
                                          []
                                          (Ty.path "rayon_core::thread_pool::ThreadPool")
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  M.get_trait_method (|
                                                    "rayon::iter::ParallelIterator",
                                                    Ty.apply
                                                      (Ty.path "rayon::iter::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "rayon::slice::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("arrow_array::array::Array::Trait",
                                                                      [])
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("arrow_array::array::Array::Trait",
                                                                              [])
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "picachv_error::PicachvError"
                                                            ])
                                                      ],
                                                    [],
                                                    "collect",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "picachv_error::PicachvError"
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "rayon::iter::ParallelIterator",
                                                        Ty.apply
                                                          (Ty.path "rayon::slice::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("arrow_array::array::Array::Trait",
                                                                      [])
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        [],
                                                        "map",
                                                        [
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("arrow_array::array::Array::Trait",
                                                                                [])
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ]);
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "picachv_error::PicachvError"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "rayon::iter::IntoParallelRefIterator",
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.dyn
                                                                      [
                                                                        ("arrow_array::array::Array::Trait",
                                                                          [])
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            [],
                                                            "par_iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "arrow_array::record_batch::RecordBatch",
                                                                "columns",
                                                                []
                                                              |),
                                                              [ rb ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let c := M.copy (| γ |) in
                                                                        M.read (|
                                                                          let~ policies :=
                                                                            M.copy (|
                                                                              M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::try_trait::Try",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::policy::policy::Policy";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "picachv_error::PicachvError"
                                                                                        ],
                                                                                      [],
                                                                                      "branch",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::map::Map")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "arrow_array::iterator::ArrayIter")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "arrow_array::array::byte_array::GenericByteArray")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "arrow_array::types::GenericBinaryType")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "i32"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::option::Option")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "slice")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "u8"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "picachv_error::PicachvError"
                                                                                                  ])
                                                                                            ],
                                                                                          [],
                                                                                          "collect",
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "picachv_error::PicachvError"
                                                                                              ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "arrow_array::iterator::ArrayIter")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "arrow_array::array::byte_array::GenericByteArray")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "arrow_array::types::GenericBinaryType")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "i32"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ],
                                                                                              [],
                                                                                              "map",
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "picachv_error::PicachvError"
                                                                                                  ];
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::option::Option")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u8"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::sync::Arc")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "picachv_core::policy::policy::Policy";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "picachv_error::PicachvError"
                                                                                                    ])
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "arrow_array::array::byte_array::GenericByteArray")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "arrow_array::types::GenericBinaryType")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "i32"
                                                                                                        ]
                                                                                                    ],
                                                                                                  "iter",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::try_trait::Try",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::result::Result")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "arrow_array::array::byte_array::GenericByteArray")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "arrow_array::types::GenericBinaryType")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "i32"
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "picachv_error::PicachvError"
                                                                                                              ],
                                                                                                            [],
                                                                                                            "branch",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::option::Option")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "arrow_array::array::byte_array::GenericByteArray")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "arrow_array::types::GenericBinaryType")
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "i32"
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                "ok_or",
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "picachv_error::PicachvError"
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.dyn
                                                                                                                      [
                                                                                                                        ("core::any::Any::Trait",
                                                                                                                          [])
                                                                                                                      ],
                                                                                                                    "downcast_ref",
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "arrow_array::array::byte_array::GenericByteArray")
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "arrow_array::types::GenericBinaryType")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "i32"
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "arrow_array::array::Array",
                                                                                                                        Ty.dyn
                                                                                                                          [
                                                                                                                            ("arrow_array::array::Array::Trait",
                                                                                                                              [])
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "as_any",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::deref::Deref",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::sync::Arc")
                                                                                                                              [
                                                                                                                                Ty.dyn
                                                                                                                                  [
                                                                                                                                    ("arrow_array::array::Array::Trait",
                                                                                                                                      [])
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            "deref",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              c
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                Value.StructTuple
                                                                                                                  "picachv_error::PicachvError::InvalidOperation"
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::convert::Into",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "str"
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "picachv_error::ErrString"
                                                                                                                        ],
                                                                                                                        "into",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          Value.String
                                                                                                                            "Failed to downcast to BinaryArray."
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ0_0 :=
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                γ,
                                                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  residual :=
                                                                                                              M.copy (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              M.never_to_any (|
                                                                                                                M.read (|
                                                                                                                  M.return_ (|
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::try_trait::FromResidual",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::result::Result")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::sync::Arc")
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "picachv_error::PicachvError"
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::result::Result")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "core::convert::Infallible";
                                                                                                                              Ty.path
                                                                                                                                "picachv_error::PicachvError"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                        "from_residual",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          residual
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)));
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ0_0 :=
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                γ,
                                                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  val :=
                                                                                                              M.copy (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            val))
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.closure
                                                                                                (fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    match
                                                                                                      γ
                                                                                                    with
                                                                                                    | [
                                                                                                          α0
                                                                                                        ] =>
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (let
                                                                                                                    e :=
                                                                                                                M.copy (|
                                                                                                                  γ
                                                                                                                |) in
                                                                                                              Value.StructTuple
                                                                                                                "core::result::Result::Ok"
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::sync::Arc")
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "picachv_core::policy::policy::Policy";
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ],
                                                                                                                      "new",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.match_operator (|
                                                                                                                          M.alloc (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::try_trait::Try",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::result::Result")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "picachv_core::policy::policy::Policy";
                                                                                                                                    Ty.path
                                                                                                                                      "picachv_error::PicachvError"
                                                                                                                                  ],
                                                                                                                                [],
                                                                                                                                "branch",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_associated_function (|
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::result::Result")
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                                                        Ty.path
                                                                                                                                          "picachv_error::PicachvError"
                                                                                                                                      ],
                                                                                                                                    "map_err",
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "picachv_error::PicachvError";
                                                                                                                                      Ty.function
                                                                                                                                        [
                                                                                                                                          Ty.tuple
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "picachv_error::PicachvError"
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                        (Ty.path
                                                                                                                                          "picachv_error::PicachvError")
                                                                                                                                    ]
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "picachv_core::io::BinIo",
                                                                                                                                        Ty.path
                                                                                                                                          "picachv_core::policy::policy::Policy",
                                                                                                                                        [],
                                                                                                                                        "from_byte_array",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::option::Option")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "slice")
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "u8"
                                                                                                                                                      ]
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            "unwrap",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              e
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |);
                                                                                                                                    M.closure
                                                                                                                                      (fun
                                                                                                                                          γ =>
                                                                                                                                        ltac:(M.monadic
                                                                                                                                          match
                                                                                                                                            γ
                                                                                                                                          with
                                                                                                                                          | [
                                                                                                                                                α0
                                                                                                                                              ] =>
                                                                                                                                            M.match_operator (|
                                                                                                                                              M.alloc (|
                                                                                                                                                α0
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                fun
                                                                                                                                                    γ =>
                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                    (let
                                                                                                                                                          e :=
                                                                                                                                                      M.copy (|
                                                                                                                                                        γ
                                                                                                                                                      |) in
                                                                                                                                                    Value.StructTuple
                                                                                                                                                      "picachv_error::PicachvError::InvalidOperation"
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::convert::Into",
                                                                                                                                                            Ty.path
                                                                                                                                                              "alloc::string::String",
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "picachv_error::ErrString"
                                                                                                                                                            ],
                                                                                                                                                            "into",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "alloc::string::ToString",
                                                                                                                                                                Ty.path
                                                                                                                                                                  "picachv_error::PicachvError",
                                                                                                                                                                [],
                                                                                                                                                                "to_string",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                e
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      ]))
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          | _ =>
                                                                                                                                            M.impossible (||)
                                                                                                                                          end))
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            fun
                                                                                                                                γ =>
                                                                                                                              ltac:(M.monadic
                                                                                                                                (let
                                                                                                                                      γ0_0 :=
                                                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                                                    γ,
                                                                                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                                                                                    0
                                                                                                                                  |) in
                                                                                                                                let
                                                                                                                                      residual :=
                                                                                                                                  M.copy (|
                                                                                                                                    γ0_0
                                                                                                                                  |) in
                                                                                                                                M.alloc (|
                                                                                                                                  M.never_to_any (|
                                                                                                                                    M.read (|
                                                                                                                                      M.return_ (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::try_trait::FromResidual",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::result::Result")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::sync::Arc")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "picachv_core::policy::policy::Policy";
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ];
                                                                                                                                                Ty.path
                                                                                                                                                  "picachv_error::PicachvError"
                                                                                                                                              ],
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::result::Result")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "core::convert::Infallible";
                                                                                                                                                  Ty.path
                                                                                                                                                    "picachv_error::PicachvError"
                                                                                                                                                ]
                                                                                                                                            ],
                                                                                                                                            "from_residual",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              residual
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)));
                                                                                                                            fun
                                                                                                                                γ =>
                                                                                                                              ltac:(M.monadic
                                                                                                                                (let
                                                                                                                                      γ0_0 :=
                                                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                                                    γ,
                                                                                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                                    0
                                                                                                                                  |) in
                                                                                                                                let
                                                                                                                                      val :=
                                                                                                                                  M.copy (|
                                                                                                                                    γ0_0
                                                                                                                                  |) in
                                                                                                                                val))
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]))
                                                                                                        ]
                                                                                                      |)
                                                                                                    | _ =>
                                                                                                      M.impossible (||)
                                                                                                    end))
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Break",
                                                                                          0
                                                                                        |) in
                                                                                      let
                                                                                            residual :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.return_ (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::try_trait::FromResidual",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::sync::Arc")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "picachv_error::PicachvError"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "core::convert::Infallible";
                                                                                                        Ty.path
                                                                                                          "picachv_error::PicachvError"
                                                                                                      ]
                                                                                                  ],
                                                                                                  "from_residual",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    residual
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                                                          0
                                                                                        |) in
                                                                                      let val :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      val))
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::sync::Arc")
                                                                                      [
                                                                                        Ty.path
                                                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "new",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    Value.StructRecord
                                                                                      "picachv_core::dataframe::PolicyGuardedColumn"
                                                                                      [
                                                                                        ("policies",
                                                                                          M.read (|
                                                                                            policies
                                                                                          |))
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                        [ ("columns", M.read (| columns |)) ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new_from_record_batch :
      M.IsAssociatedFunction Self "new_from_record_batch" new_from_record_batch.
    
    (*
        pub fn new_from_slice(&self, slices: &[usize]) -> PicachvResult<Self> {
            // SOMEHOW self becomes empty.
            let columns = THREAD_POOL.install(|| {
                self.columns
                    .par_iter()
                    .map(|c| {
                        let policies = slices
                            .par_iter()
                            .map(|&i| c.policies[i].clone())
                            .collect::<Vec<_>>();
                        Arc::new(PolicyGuardedColumn { policies })
                    })
                    .collect::<Vec<_>>()
            });
    
            Ok(PolicyGuardedDataFrame { columns })
        }
    *)
    Definition new_from_slice (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; slices ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let slices := M.alloc (| slices |) in
          M.read (|
            let~ columns :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "rayon_core::thread_pool::ThreadPool",
                    "install",
                    [
                      Ty.function
                        [ Ty.tuple [] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "std::sync::lazy_lock::LazyLock")
                          [
                            Ty.path "rayon_core::thread_pool::ThreadPool";
                            Ty.function [] (Ty.path "rayon_core::thread_pool::ThreadPool")
                          ],
                        [],
                        "deref",
                        []
                      |),
                      [ M.read (| M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |) |) ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::iter::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ])
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            [],
                                            "map",
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            [
                                                              Ty.path
                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::IntoParallelRefIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "par_iter",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                  "columns"
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let c := M.copy (| γ |) in
                                                            M.read (|
                                                              let~ policies :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rayon::iter::ParallelIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::iter::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "rayon::slice::Iter")
                                                                            [ Ty.path "usize" ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "rayon::iter::ParallelIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "rayon::slice::Iter")
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                [
                                                                                  Ty.path
                                                                                    "picachv_core::policy::policy::Policy";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]);
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "rayon::iter::IntoParallelRefIterator",
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              "par_iter",
                                                                              []
                                                                            |),
                                                                            [ M.read (| slices |) ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.read (|
                                                                                              γ
                                                                                            |) in
                                                                                          let i :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::policy::policy::Policy";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::sync::Arc")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "picachv_core::policy::policy::Policy";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::sync::Arc")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          c
                                                                                                        |)
                                                                                                      ]
                                                                                                    |),
                                                                                                    "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                                    "policies"
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    i
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "picachv_core::dataframe::PolicyGuardedColumn"
                                                                      [
                                                                        ("policies",
                                                                          M.read (| policies |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructTuple
                "core::result::Result::Ok"
                [
                  Value.StructRecord
                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                    [ ("columns", M.read (| columns |)) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new_from_slice :
      M.IsAssociatedFunction Self "new_from_slice" new_from_slice.
    
    (*
        pub fn slice(&self, range: Range<usize>) -> PicachvResult<Self> {
            tracing::debug!("slicing: range = {range:?}");
    
            picachv_ensure!(
                range.end <= self.shape().0,
                ComputeError: "The range is out of bound.",
            );
    
            let mut columns = vec![];
            for col in self.columns.iter() {
                let mut policies = vec![];
                for i in range.clone() {
                    policies.push(col.policies[i].clone());
                }
                columns.push(Arc::new(PolicyGuardedColumn { policies }));
            }
    
            Ok(PolicyGuardedDataFrame { columns })
        }
    *)
    Definition slice (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; range ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let range := M.alloc (| range |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  let~ enabled :=
                    M.alloc (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "tracing_core::metadata::Level",
                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                              "le",
                              []
                            |),
                            [
                              M.get_constant (| "tracing_core::metadata::DEBUG" |);
                              M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      "current",
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.read (|
                            let~ interest :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::callsite::DefaultCallsite",
                                    "interest",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.get_constant (|
                                        "picachv_core::dataframe::slice::__CALLSITE"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              LogicalOp.and (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      "is_never",
                                      []
                                    |),
                                    [ interest ]
                                  |)),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_function (|
                                      "tracing::__macro_support::__is_enabled",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          "metadata",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.get_constant (|
                                              "picachv_core::dataframe::slice::__CALLSITE"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (| interest |)
                                    ]
                                  |)))
                              |)
                            |)
                          |)))
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                    (Ty.tuple []),
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let value_set := M.copy (| γ |) in
                                                    M.read (|
                                                      let~ meta :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              "metadata",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.get_constant (|
                                                                  "picachv_core::dataframe::slice::__CALLSITE"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "tracing_core::event::Event",
                                                              "dispatch",
                                                              []
                                                            |),
                                                            [ M.read (| meta |); value_set ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::dataframe::slice::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::Metadata",
                                                  "fields",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "tracing_core::callsite::Callsite",
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite",
                                                      [],
                                                      "metadata",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.get_constant (|
                                                          "picachv_core::dataframe::slice::__CALLSITE"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ],
                                                              "expect",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.path
                                                                    "tracing_core::field::Iter",
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |);
                                                              M.read (|
                                                                Value.String
                                                                  "FieldSet corrupted (this is a bug)"
                                                              |)
                                                            ]
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::Some"
                                                          [
                                                            M.read (|
                                                              M.use
                                                                (M.alloc (|
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::Arguments",
                                                                          "new_v1",
                                                                          []
                                                                        |),
                                                                        [
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.read (|
                                                                                    Value.String
                                                                                      "slicing: range = "
                                                                                  |)
                                                                                ]
                                                                            |));
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      "new_debug",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::ops::range::Range")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [ range ]
                                                                                  |)
                                                                                ]
                                                                            |))
                                                                        ]
                                                                      |)
                                                                    |))
                                                                |))
                                                            |)
                                                          ]
                                                      ]
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.le
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        range,
                                        "core::ops::range::Range",
                                        "end"
                                      |)
                                    |))
                                    (M.read (|
                                      M.SubPointer.get_tuple_field (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "shape",
                                              []
                                            |),
                                            [ M.read (| self |) ]
                                          |)
                                        |),
                                        0
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The range is out of bound."
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ columns :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                      "columns"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let col := M.copy (| γ0_0 |) in
                                          let~ policies :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                []
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          "clone",
                                                          []
                                                        |),
                                                        [ range ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      [ Ty.path "usize" ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let i := M.copy (| γ0_0 |) in
                                                                    let~ _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "push",
                                                                            []
                                                                          |),
                                                                          [
                                                                            policies;
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::clone::Clone",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                "clone",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::Index",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::sync::Arc")
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_core::policy::policy::Policy";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                    "index",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            col
                                                                                          |)
                                                                                        ]
                                                                                      |),
                                                                                      "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                      "policies"
                                                                                    |);
                                                                                    M.read (| i |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let~ _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  columns;
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      Value.StructRecord
                                                        "picachv_core::dataframe::PolicyGuardedColumn"
                                                        [ ("policies", M.read (| policies |)) ]
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                        [ ("columns", M.read (| columns |)) ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_slice : M.IsAssociatedFunction Self "slice" slice.
    
    (*
        pub fn join(
            lhs: &PolicyGuardedDataFrame,
            rhs: &PolicyGuardedDataFrame,
            info: &JoinInformation,
            options: &ContextOptions,
        ) -> PicachvResult<Self> {
            let join_preparation = || {
                let left_columns = unsafe {
                    std::slice::from_raw_parts(
                        info.left_columns.as_ptr() as *const usize,
                        info.left_columns.len(),
                    )
                };
                let right_columns = unsafe {
                    std::slice::from_raw_parts(
                        info.right_columns.as_ptr() as *const usize,
                        info.right_columns.len(),
                    )
                };
    
                let mut lhs = lhs.clone();
                let mut rhs = rhs.clone();
                let (lhs, rhs) = THREAD_POOL.install(|| {
                    rayon::join(
                        || {
                            lhs.projection_by_id(left_columns)?;
                            PicachvResult::Ok(lhs)
                        },
                        || {
                            // let mut rhs = rhs.clone();
                            rhs.projection_by_id(right_columns)?;
                            PicachvResult::Ok(rhs)
                        },
                    )
                });
    
                (lhs, rhs)
            };
    
            let (lhs, rhs) = if options.enable_profiling {
                PROFILER.profile(join_preparation, "join_preparation".into())
            } else {
                join_preparation()
            };
    
            let (lhs, rhs) = (lhs?, rhs?);
            let (lhs, rhs) = THREAD_POOL.install(|| {
                rayon::join(
                    || {
                        let left_idx = info
                            .row_join_info
                            .par_iter()
                            .map(|e| e.left_row as usize)
                            .collect::<Vec<_>>();
                        lhs.new_from_slice(&left_idx)
                    },
                    || {
                        let right_idx = info
                            .row_join_info
                            .par_iter()
                            .map(|e| e.right_row as usize)
                            .collect::<Vec<_>>();
                        rhs.new_from_slice(&right_idx)
                    },
                )
            });
            let (lhs, rhs) = (lhs?, rhs?);
    
            // We then stitch them together.
            let res = PolicyGuardedDataFrame::stitch(&lhs, &rhs)?;
            Ok(res)
        }
    *)
    Definition join (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ lhs; rhs; info; options ] =>
        ltac:(M.monadic
          (let lhs := M.alloc (| lhs |) in
          let rhs := M.alloc (| rhs |) in
          let info := M.alloc (| info |) in
          let options := M.alloc (| options |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ join_preparation :=
                  M.alloc (|
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.read (|
                                      let~ left_columns :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::slice::raw::from_raw_parts",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "as_ptr",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| info |),
                                                      "picachv_message::JoinInformation",
                                                      "left_columns"
                                                    |)
                                                  ]
                                                |));
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| info |),
                                                    "picachv_message::JoinInformation",
                                                    "left_columns"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ right_columns :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::slice::raw::from_raw_parts",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "as_ptr",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| info |),
                                                      "picachv_message::JoinInformation",
                                                      "right_columns"
                                                    |)
                                                  ]
                                                |));
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| info |),
                                                    "picachv_message::JoinInformation",
                                                    "right_columns"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ lhs :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              [],
                                              "clone",
                                              []
                                            |),
                                            [ M.read (| lhs |) ]
                                          |)
                                        |) in
                                      let~ rhs :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              [],
                                              "clone",
                                              []
                                            |),
                                            [ M.read (| rhs |) ]
                                          |)
                                        |) in
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "rayon_core::thread_pool::ThreadPool",
                                              "install",
                                              [
                                                Ty.function
                                                  [ Ty.tuple [] ]
                                                  (Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ]
                                                    ]);
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "std::sync::lazy_lock::LazyLock")
                                                    [
                                                      Ty.path "rayon_core::thread_pool::ThreadPool";
                                                      Ty.function
                                                        []
                                                        (Ty.path
                                                          "rayon_core::thread_pool::ThreadPool")
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.get_constant (|
                                                      "picachv_core::thread_pool::THREAD_POOL"
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                M.get_function (|
                                                                  "rayon_core::join::join",
                                                                  [
                                                                    Ty.function
                                                                      [ Ty.tuple [] ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                          Ty.path
                                                                            "picachv_error::PicachvError"
                                                                        ]);
                                                                    Ty.function
                                                                      [ Ty.tuple [] ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                          Ty.path
                                                                            "picachv_error::PicachvError"
                                                                        ]);
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                        Ty.path
                                                                          "picachv_error::PicachvError"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                        Ty.path
                                                                          "picachv_error::PicachvError"
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.read (|
                                                                                    let~ _ :=
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::Try",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [];
                                                                                                  Ty.path
                                                                                                    "picachv_error::PicachvError"
                                                                                                ],
                                                                                              [],
                                                                                              "branch",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                                  "projection_by_id",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  lhs;
                                                                                                  M.read (|
                                                                                                    left_columns
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    residual :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                M.never_to_any (|
                                                                                                  M.read (|
                                                                                                    M.return_ (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::try_trait::FromResidual",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::result::Result")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                                              Ty.path
                                                                                                                "picachv_error::PicachvError"
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::result::Result")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "core::convert::Infallible";
                                                                                                                Ty.path
                                                                                                                  "picachv_error::PicachvError"
                                                                                                              ]
                                                                                                          ],
                                                                                                          "from_residual",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            residual
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    val :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              val))
                                                                                        ]
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.StructTuple
                                                                                        "core::result::Result::Ok"
                                                                                        [
                                                                                          M.read (|
                                                                                            lhs
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end));
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.read (|
                                                                                    let~ _ :=
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::Try",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [];
                                                                                                  Ty.path
                                                                                                    "picachv_error::PicachvError"
                                                                                                ],
                                                                                              [],
                                                                                              "branch",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                                  "projection_by_id",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  rhs;
                                                                                                  M.read (|
                                                                                                    right_columns
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    residual :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                M.never_to_any (|
                                                                                                  M.read (|
                                                                                                    M.return_ (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::try_trait::FromResidual",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::result::Result")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                                              Ty.path
                                                                                                                "picachv_error::PicachvError"
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::result::Result")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "core::convert::Infallible";
                                                                                                                Ty.path
                                                                                                                  "picachv_error::PicachvError"
                                                                                                              ]
                                                                                                          ],
                                                                                                          "from_residual",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            residual
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    val :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              val))
                                                                                        ]
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.StructTuple
                                                                                        "core::result::Result::Ok"
                                                                                        [
                                                                                          M.read (|
                                                                                            rhs
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let lhs := M.copy (| γ0_0 |) in
                                              let rhs := M.copy (| γ0_1 |) in
                                              M.alloc (|
                                                Value.Tuple [ M.read (| lhs |); M.read (| rhs |) ]
                                              |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  |) in
                M.match_operator (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| options |),
                                "picachv_message::ContextOptions",
                                "enable_profiling"
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "picachv_core::profiler::PicachvProfiler",
                                "profile",
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame";
                                          Ty.path "picachv_error::PicachvError"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ];
                                  Ty.function
                                    [ Ty.tuple [] ]
                                    (Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ];
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ]
                                      ])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "std::sync::lazy_lock::LazyLock")
                                      [
                                        Ty.path "picachv_core::profiler::PicachvProfiler";
                                        Ty.function
                                          []
                                          (Ty.path "picachv_core::profiler::PicachvProfiler")
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.get_constant (| "picachv_core::profiler::PROFILER" |)
                                    |)
                                  ]
                                |);
                                M.read (| join_preparation |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                    [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| Value.String "join_preparation" |) ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::function::Fn",
                                Ty.function
                                  [ Ty.tuple [] ]
                                  (Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame";
                                          Ty.path "picachv_error::PicachvError"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ]),
                                [ Ty.tuple [] ],
                                "call",
                                []
                              |),
                              [ join_preparation; Value.Tuple [] ]
                            |)
                          |)))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let lhs := M.copy (| γ0_0 |) in
                        let rhs := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.read (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [ M.read (| lhs |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |);
                                M.read (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [ M.read (| rhs |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let lhs := M.copy (| γ0_0 |) in
                                let rhs := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "rayon_core::thread_pool::ThreadPool",
                                        "install",
                                        [
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ]
                                              ]);
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                  Ty.path "picachv_error::PicachvError"
                                                ];
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                  Ty.path "picachv_error::PicachvError"
                                                ]
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "std::sync::lazy_lock::LazyLock")
                                              [
                                                Ty.path "rayon_core::thread_pool::ThreadPool";
                                                Ty.function
                                                  []
                                                  (Ty.path "rayon_core::thread_pool::ThreadPool")
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.get_constant (|
                                                "picachv_core::thread_pool::THREAD_POOL"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          M.get_function (|
                                                            "rayon_core::join::join",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ]);
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ]);
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              let~ left_idx :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "rayon::iter::ParallelIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "rayon::iter::map::Map")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "rayon::slice::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_message::RowJoinInformation"
                                                                                            ];
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "picachv_message::RowJoinInformation"
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.path
                                                                                              "usize")
                                                                                        ],
                                                                                      [],
                                                                                      "collect",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "rayon::iter::ParallelIterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "rayon::slice::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_message::RowJoinInformation"
                                                                                            ],
                                                                                          [],
                                                                                          "map",
                                                                                          [
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_message::RowJoinInformation"
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                              (Ty.path
                                                                                                "usize");
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "rayon::iter::IntoParallelRefIterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_message::RowJoinInformation";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "par_iter",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  info
                                                                                                |),
                                                                                                "picachv_message::JoinInformation",
                                                                                                "row_join_info"
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                e :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.rust_cast
                                                                                                            (M.read (|
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.read (|
                                                                                                                  e
                                                                                                                |),
                                                                                                                "picachv_message::RowJoinInformation",
                                                                                                                "left_row"
                                                                                                              |)
                                                                                                            |))))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                    "new_from_slice",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    lhs;
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ left_idx ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              let~ right_idx :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "rayon::iter::ParallelIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "rayon::iter::map::Map")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "rayon::slice::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_message::RowJoinInformation"
                                                                                            ];
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "picachv_message::RowJoinInformation"
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.path
                                                                                              "usize")
                                                                                        ],
                                                                                      [],
                                                                                      "collect",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "rayon::iter::ParallelIterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "rayon::slice::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_message::RowJoinInformation"
                                                                                            ],
                                                                                          [],
                                                                                          "map",
                                                                                          [
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_message::RowJoinInformation"
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                              (Ty.path
                                                                                                "usize");
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "rayon::iter::IntoParallelRefIterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_message::RowJoinInformation";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "par_iter",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  info
                                                                                                |),
                                                                                                "picachv_message::JoinInformation",
                                                                                                "row_join_info"
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                e :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.rust_cast
                                                                                                            (M.read (|
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.read (|
                                                                                                                  e
                                                                                                                |),
                                                                                                                "picachv_message::RowJoinInformation",
                                                                                                                "right_row"
                                                                                                              |)
                                                                                                            |))))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                    "new_from_slice",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rhs;
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ right_idx ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let lhs := M.copy (| γ0_0 |) in
                                        let rhs := M.copy (| γ0_1 |) in
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                M.read (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path
                                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                              Ty.path "picachv_error::PicachvError"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [ M.read (| lhs |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                          Ty.path
                                                                            "picachv_error::PicachvError"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "picachv_error::PicachvError"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |);
                                                M.read (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path
                                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                              Ty.path "picachv_error::PicachvError"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [ M.read (| rhs |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                          Ty.path
                                                                            "picachv_error::PicachvError"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "picachv_error::PicachvError"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let lhs := M.copy (| γ0_0 |) in
                                                let rhs := M.copy (| γ0_1 |) in
                                                let~ res :=
                                                  M.copy (|
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                "stitch",
                                                                []
                                                              |),
                                                              [ lhs; rhs ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                            Ty.path
                                                                              "picachv_error::PicachvError"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "picachv_error::PicachvError"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::result::Result::Ok"
                                                    [ M.read (| res |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_join : M.IsAssociatedFunction Self "join" join.
    
    (*
        pub fn groups(&self, groups: &Groups) -> PicachvResult<Self> {
            let columns = THREAD_POOL.install(|| {
                self.columns
                    .par_iter()
                    .map(|c| {
                        let policies = groups
                            .group
                            .par_iter()
                            .map(|g| c.policies[*g as usize].clone())
                            .collect::<Vec<_>>();
                        Arc::new(PolicyGuardedColumn { policies })
                    })
                    .collect::<Vec<_>>()
            });
    
            Ok(PolicyGuardedDataFrame { columns })
        }
    *)
    Definition groups (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; groups ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let groups := M.alloc (| groups |) in
          M.read (|
            let~ columns :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "rayon_core::thread_pool::ThreadPool",
                    "install",
                    [
                      Ty.function
                        [ Ty.tuple [] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "std::sync::lazy_lock::LazyLock")
                          [
                            Ty.path "rayon_core::thread_pool::ThreadPool";
                            Ty.function [] (Ty.path "rayon_core::thread_pool::ThreadPool")
                          ],
                        [],
                        "deref",
                        []
                      |),
                      [ M.read (| M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |) |) ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::iter::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ])
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            [],
                                            "map",
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            [
                                                              Ty.path
                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::IntoParallelRefIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "par_iter",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                  "columns"
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let c := M.copy (| γ |) in
                                                            M.read (|
                                                              let~ policies :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rayon::iter::ParallelIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "rayon::iter::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "rayon::slice::Iter")
                                                                            [ Ty.path "u64" ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [ Ty.path "u64"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "rayon::iter::ParallelIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "rayon::slice::Iter")
                                                                            [ Ty.path "u64" ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                [
                                                                                  Ty.path
                                                                                    "picachv_core::policy::policy::Policy";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]);
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "rayon::iter::IntoParallelRefIterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "u64";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "par_iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| groups |),
                                                                                "picachv_message::group_by_idx::Groups",
                                                                                "group"
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let g :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::policy::policy::Policy";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::sync::Arc")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "picachv_core::policy::policy::Policy";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::sync::Arc")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          c
                                                                                                        |)
                                                                                                      ]
                                                                                                    |),
                                                                                                    "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                                    "policies"
                                                                                                  |);
                                                                                                  M.rust_cast
                                                                                                    (M.read (|
                                                                                                      M.read (|
                                                                                                        g
                                                                                                      |)
                                                                                                    |))
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "picachv_core::dataframe::PolicyGuardedColumn"
                                                                      [
                                                                        ("policies",
                                                                          M.read (| policies |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructTuple
                "core::result::Result::Ok"
                [
                  Value.StructRecord
                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                    [ ("columns", M.read (| columns |)) ]
                ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_groups : M.IsAssociatedFunction Self "groups" groups.
    
    (*
        pub fn row(&self, idx: usize) -> PicachvResult<Vec<&PolicyRef>> {
            picachv_ensure!(
                idx < self.shape().0,
                ComputeError: "The index is out of bound.",
            );
    
            let res = THREAD_POOL.install(|| {
                self.columns
                    .par_iter()
                    .map(|c| &c.policies[idx])
                    .collect::<Vec<_>>()
            });
    
            Ok(res)
        }
    *)
    Definition row (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; idx ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let idx := M.alloc (| idx |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.lt
                                    (M.read (| idx |))
                                    (M.read (|
                                      M.SubPointer.get_tuple_field (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "shape",
                                              []
                                            |),
                                            [ M.read (| self |) ]
                                          |)
                                        |),
                                        0
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The index is out of bound."
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ res :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "rayon_core::thread_pool::ThreadPool",
                        "install",
                        [
                          Ty.function
                            [ Ty.tuple [] ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::policy::policy::Policy";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]);
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::Policy";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "std::sync::lazy_lock::LazyLock")
                              [
                                Ty.path "rayon_core::thread_pool::ThreadPool";
                                Ty.function [] (Ty.path "rayon_core::thread_pool::ThreadPool")
                              ],
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.read (|
                              M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::iter::map::Map")
                                              [
                                                Ty.apply
                                                  (Ty.path "rayon::slice::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ])
                                              ],
                                            [],
                                            "collect",
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::ParallelIterator",
                                                Ty.apply
                                                  (Ty.path "rayon::slice::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                "map",
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::policy::policy::Policy";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]);
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "rayon::iter::IntoParallelRefIterator",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "par_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                      "columns"
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let c := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            [
                                                                              Ty.path
                                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ M.read (| c |) ]
                                                                      |),
                                                                      "picachv_core::dataframe::PolicyGuardedColumn",
                                                                      "policies"
                                                                    |);
                                                                    M.read (| idx |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| res |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_row : M.IsAssociatedFunction Self "row" row.
    
    (*
        pub fn stitch(
            lhs: &PolicyGuardedDataFrame,
            rhs: &PolicyGuardedDataFrame,
        ) -> PicachvResult<PolicyGuardedDataFrame> {
            tracing::debug!("stitching\n{lhs}\n{rhs}");
    
            if lhs.columns.is_empty() {
                // semi edge case.
                return Ok(rhs.clone());
            } else if rhs.columns.is_empty() {
                // semi edge case.
                return Ok(lhs.clone());
            }
    
            picachv_ensure!(
                lhs.shape().0 == rhs.shape().0,
                ComputeError: "The number of rows must be the same: {} != {}", lhs.shape().0, rhs.shape().0
            );
    
            Ok(PolicyGuardedDataFrame {
                columns: {
                    let mut lhs = lhs.columns.clone();
                    lhs.extend(rhs.columns.clone());
    
                    lhs
                },
            })
        }
    *)
    Definition stitch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ lhs; rhs ] =>
        ltac:(M.monadic
          (let lhs := M.alloc (| lhs |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  let~ enabled :=
                    M.alloc (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "tracing_core::metadata::Level",
                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                              "le",
                              []
                            |),
                            [
                              M.get_constant (| "tracing_core::metadata::DEBUG" |);
                              M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      "current",
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.read (|
                            let~ interest :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::callsite::DefaultCallsite",
                                    "interest",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.get_constant (|
                                        "picachv_core::dataframe::stitch::__CALLSITE"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              LogicalOp.and (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      "is_never",
                                      []
                                    |),
                                    [ interest ]
                                  |)),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_function (|
                                      "tracing::__macro_support::__is_enabled",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          "metadata",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.get_constant (|
                                              "picachv_core::dataframe::stitch::__CALLSITE"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (| interest |)
                                    ]
                                  |)))
                              |)
                            |)
                          |)))
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                    (Ty.tuple []),
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let value_set := M.copy (| γ |) in
                                                    M.read (|
                                                      let~ meta :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              "metadata",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.get_constant (|
                                                                  "picachv_core::dataframe::stitch::__CALLSITE"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "tracing_core::event::Event",
                                                              "dispatch",
                                                              []
                                                            |),
                                                            [ M.read (| meta |); value_set ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::dataframe::stitch::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::Metadata",
                                                  "fields",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "tracing_core::callsite::Callsite",
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite",
                                                      [],
                                                      "metadata",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.get_constant (|
                                                          "picachv_core::dataframe::stitch::__CALLSITE"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ],
                                                              "expect",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.path
                                                                    "tracing_core::field::Iter",
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |);
                                                              M.read (|
                                                                Value.String
                                                                  "FieldSet corrupted (this is a bug)"
                                                              |)
                                                            ]
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::Some"
                                                          [
                                                            M.read (|
                                                              M.use
                                                                (M.alloc (|
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::Arguments",
                                                                          "new_v1",
                                                                          []
                                                                        |),
                                                                        [
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.read (|
                                                                                    Value.String
                                                                                      "stitching
"
                                                                                  |);
                                                                                  M.read (|
                                                                                    Value.String "
"
                                                                                  |)
                                                                                ]
                                                                            |));
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      "new_display",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [ lhs ]
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      "new_display",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [ rhs ]
                                                                                  |)
                                                                                ]
                                                                            |))
                                                                        ]
                                                                      |)
                                                                    |))
                                                                |))
                                                            |)
                                                          ]
                                                      ]
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "is_empty",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| lhs |),
                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                      "columns"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame",
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [ M.read (| rhs |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "is_empty",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| rhs |),
                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "columns"
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Ok"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ M.read (| lhs |) ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.eq
                                    (M.read (|
                                      M.SubPointer.get_tuple_field (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "shape",
                                              []
                                            |),
                                            [ M.read (| lhs |) ]
                                          |)
                                        |),
                                        0
                                      |)
                                    |))
                                    (M.read (|
                                      M.SubPointer.get_tuple_field (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "shape",
                                              []
                                            |),
                                            [ M.read (| rhs |) ]
                                          |)
                                        |),
                                        0
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The number of rows must be the same: "
                                                                        |);
                                                                        M.read (|
                                                                          Value.String " != "
                                                                        |)
                                                                      ]
                                                                  |));
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [ Ty.path "usize" ]
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_tuple_field (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                    "shape",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| lhs |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              0
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [ Ty.path "usize" ]
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_tuple_field (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                    "shape",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| rhs |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              0
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                        [
                          ("columns",
                            M.read (|
                              let~ lhs :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| lhs |),
                                        "picachv_core::dataframe::PolicyGuardedDataFrame",
                                        "columns"
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::Extend",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                      "extend",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                    |),
                                    [
                                      lhs;
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| rhs |),
                                            "picachv_core::dataframe::PolicyGuardedDataFrame",
                                            "columns"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              lhs
                            |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_stitch : M.IsAssociatedFunction Self "stitch" stitch.
    
    (*
        pub fn union(inputs: &[&Arc<Self>]) -> PicachvResult<Self> {
            // Ensures we are really doing unions.
            picachv_ensure!(
                !inputs.is_empty(),
                ComputeError: "Doing union on an empty vector of dataframes is meaningless.",
            );
    
            // Ensures that the schemas are the same.
            picachv_ensure!(
                inputs.par_iter().all(|df| df.columns.len() == inputs[0].columns.len()),
                ComputeError: "The schemas of the inputs must be the same.",
            );
    
            // Do unions.
            let mut columns = vec![];
            for i in 0..inputs[0].columns.len() {
                let mut policies = vec![];
                for input in inputs.iter() {
                    policies.extend(input.columns[i].policies.clone());
                }
                columns.push(Arc::new(PolicyGuardedColumn { policies }));
            }
    
            Ok(PolicyGuardedDataFrame { columns })
        }
    *)
    Definition union (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ inputs ] =>
        ltac:(M.monadic
          (let inputs := M.alloc (| inputs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ],
                                        "is_empty",
                                        []
                                      |),
                                      [ M.read (| inputs |) ]
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "Doing union on an empty vector of dataframes is meaningless."
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "rayon::iter::ParallelIterator",
                                      Ty.apply
                                        (Ty.path "rayon::slice::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      [],
                                      "all",
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "rayon::iter::IntoParallelRefIterator",
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          [],
                                          "par_iter",
                                          []
                                        |),
                                        [ M.read (| inputs |) ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let df := M.copy (| γ |) in
                                                      BinOp.Pure.eq
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| M.read (| df |) |) ]
                                                              |),
                                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                              "columns"
                                                            |)
                                                          ]
                                                        |))
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.read (| inputs |),
                                                                      M.alloc (| Value.Integer 0 |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |),
                                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                              "columns"
                                                            |)
                                                          ]
                                                        |))))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The schemas of the inputs must be the same."
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ columns :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.read (| inputs |),
                                                M.alloc (| Value.Integer 0 |)
                                              |)
                                            |)
                                          ]
                                        |),
                                        "picachv_core::dataframe::PolicyGuardedDataFrame",
                                        "columns"
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let~ policies :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                []
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ],
                                                          "iter",
                                                          []
                                                        |),
                                                        [ M.read (| inputs |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let~ _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let input :=
                                                                      M.copy (| γ0_0 |) in
                                                                    let~ _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::collect::Extend",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                [
                                                                                  Ty.path
                                                                                    "picachv_core::policy::policy::Policy";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                            "extend",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    [
                                                                                      Ty.path
                                                                                        "picachv_core::policy::policy::Policy";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                          |),
                                                                          [
                                                                            policies;
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::clone::Clone",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::sync::Arc")
                                                                                      [
                                                                                        Ty.path
                                                                                          "picachv_core::policy::policy::Policy";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                "clone",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::Deref",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      "deref",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::deref::Deref",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::sync::Arc")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                [],
                                                                                                "deref",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.read (|
                                                                                                    input
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |),
                                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                            "columns"
                                                                                          |);
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |),
                                                                                  "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                  "policies"
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let~ _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  columns;
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      Value.StructRecord
                                                        "picachv_core::dataframe::PolicyGuardedColumn"
                                                        [ ("policies", M.read (| policies |)) ]
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                        [ ("columns", M.read (| columns |)) ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_union : M.IsAssociatedFunction Self "union" union.
    
    (*
        pub fn new(columns: Vec<PolicyGuardedColumnRef>) -> Self {
            PolicyGuardedDataFrame { columns }
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ columns ] =>
        ltac:(M.monadic
          (let columns := M.alloc (| columns |) in
          Value.StructRecord
            "picachv_core::dataframe::PolicyGuardedDataFrame"
            [ ("columns", M.read (| columns |)) ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    
    (*
        pub(crate) fn projection_by_id(&mut self, project_list: &[usize]) -> PicachvResult<()> {
            picachv_ensure!(
                project_list.par_iter().all(|&col| col < self.columns.len()),
                ComputeError: "The column is out of bound.",
            );
    
            let mut index = 0;
            // Avoid unnecessary clone().
            self.columns.retain(|_| {
                let res = project_list.binary_search(&index);
                index += 1;
                res.is_ok()
            });
    
            Ok(())
        }
    *)
    Definition projection_by_id (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; project_list ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let project_list := M.alloc (| project_list |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "rayon::iter::ParallelIterator",
                                      Ty.apply (Ty.path "rayon::slice::Iter") [ Ty.path "usize" ],
                                      [],
                                      "all",
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                          ]
                                          (Ty.path "bool")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "rayon::iter::IntoParallelRefIterator",
                                          Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                                          [],
                                          "par_iter",
                                          []
                                        |),
                                        [ M.read (| project_list |) ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ := M.read (| γ |) in
                                                      let col := M.copy (| γ |) in
                                                      BinOp.Pure.lt
                                                        (M.read (| col |))
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedColumn";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                              "columns"
                                                            |)
                                                          ]
                                                        |))))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The column is out of bound."
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ index := M.alloc (| Value.Integer 0 |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "retain",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.path "bool")
                        ]
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "picachv_core::dataframe::PolicyGuardedDataFrame",
                          "columns"
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.read (|
                                          let~ res :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                                                  "binary_search",
                                                  []
                                                |),
                                                [ M.read (| project_list |); index ]
                                              |)
                                            |) in
                                          let~ _ :=
                                            let β := index in
                                            M.write (|
                                              β,
                                              BinOp.Wrap.add
                                                Integer.Usize
                                                (M.read (| β |))
                                                (Value.Integer 1)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.path "usize"; Ty.path "usize" ],
                                                "is_ok",
                                                []
                                              |),
                                              [ res ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_projection_by_id :
      M.IsAssociatedFunction Self "projection_by_id" projection_by_id.
    
    (*
        pub fn into_rows(&self) -> Vec<Row> {
            let shape = self.shape();
    
            let mut rows = vec![];
            for i in 0..shape.0 {
                let mut row = vec![];
                for j in 0..shape.1 {
                    row.push(self.columns[j].policies[i].clone());
                }
                rows.push(row);
            }
            rows
        }
    *)
    Definition into_rows (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ shape :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame",
                    "shape",
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ rows :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.path "picachv_core::policy::policy::Policy";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  []
                |)
              |) in
            let~ _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer 0);
                            ("end_", M.read (| M.SubPointer.get_tuple_field (| shape, 0 |) |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      let~ row :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::Policy";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              []
                                            |),
                                            []
                                          |)
                                        |) in
                                      let~ _ :=
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", Value.Integer 0);
                                                      ("end_",
                                                        M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            shape,
                                                            1
                                                          |)
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let~ _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "usize" ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "core::option::Option::None"
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let j := M.copy (| γ0_0 |) in
                                                                let~ _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "push",
                                                                        []
                                                                      |),
                                                                      [
                                                                        row;
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::sync::Arc")
                                                                                      [
                                                                                        Ty.path
                                                                                          "picachv_core::policy::policy::Policy";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::Deref",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      "deref",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              self
                                                                                            |),
                                                                                            "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                            "columns"
                                                                                          |);
                                                                                          M.read (|
                                                                                            j
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |),
                                                                                  "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                  "policies"
                                                                                |);
                                                                                M.read (| i |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |)) in
                                      let~ _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              []
                                            |),
                                            [ rows; M.read (| row |) ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            rows
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_into_rows : M.IsAssociatedFunction Self "into_rows" into_rows.
    
    (*
        pub fn finalize(&self) -> PicachvResult<()> {
            tracing::debug!("finalizing\n{self}");
    
            for c in self.columns.iter() {
                picachv_ensure!(
                    c.policies.par_iter().all(
                        |p| matches!(p.deref(), Policy::PolicyClean),
                    ),
                    ComputeError: "Possible policy breach detected; abort early.\n\nThe required policy is\n{self}",
                );
            }
    
            Ok(())
        }
    *)
    Definition finalize (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  let~ enabled :=
                    M.alloc (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "tracing_core::metadata::Level",
                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                              "le",
                              []
                            |),
                            [
                              M.get_constant (| "tracing_core::metadata::DEBUG" |);
                              M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      "current",
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.read (|
                            let~ interest :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::callsite::DefaultCallsite",
                                    "interest",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.get_constant (|
                                        "picachv_core::dataframe::finalize::__CALLSITE"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              LogicalOp.and (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      "is_never",
                                      []
                                    |),
                                    [ interest ]
                                  |)),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_function (|
                                      "tracing::__macro_support::__is_enabled",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          "metadata",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.get_constant (|
                                              "picachv_core::dataframe::finalize::__CALLSITE"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (| interest |)
                                    ]
                                  |)))
                              |)
                            |)
                          |)))
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                    (Ty.tuple []),
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let value_set := M.copy (| γ |) in
                                                    M.read (|
                                                      let~ meta :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              "metadata",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.get_constant (|
                                                                  "picachv_core::dataframe::finalize::__CALLSITE"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "tracing_core::event::Event",
                                                              "dispatch",
                                                              []
                                                            |),
                                                            [ M.read (| meta |); value_set ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::dataframe::finalize::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::Metadata",
                                                  "fields",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "tracing_core::callsite::Callsite",
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite",
                                                      [],
                                                      "metadata",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.get_constant (|
                                                          "picachv_core::dataframe::finalize::__CALLSITE"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ],
                                                              "expect",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.path
                                                                    "tracing_core::field::Iter",
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |);
                                                              M.read (|
                                                                Value.String
                                                                  "FieldSet corrupted (this is a bug)"
                                                              |)
                                                            ]
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::Some"
                                                          [
                                                            M.read (|
                                                              M.use
                                                                (M.alloc (|
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::Arguments",
                                                                          "new_v1",
                                                                          []
                                                                        |),
                                                                        [
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.read (|
                                                                                    Value.String
                                                                                      "finalizing
"
                                                                                  |)
                                                                                ]
                                                                            |));
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      "new_display",
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [ self ]
                                                                                  |)
                                                                                ]
                                                                            |))
                                                                        ]
                                                                      |)
                                                                    |))
                                                                |))
                                                            |)
                                                          ]
                                                      ]
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                      "columns"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let c := M.copy (| γ0_0 |) in
                                          let~ _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.Pure.not
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "rayon::iter::ParallelIterator",
                                                                Ty.apply
                                                                  (Ty.path "rayon::slice::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::policy::policy::Policy";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                "all",
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::sync::Arc")
                                                                                [
                                                                                  Ty.path
                                                                                    "picachv_core::policy::policy::Policy";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "bool")
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "rayon::iter::IntoParallelRefIterator",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "par_iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            [
                                                                              Ty.path
                                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ M.read (| c |) ]
                                                                      |),
                                                                      "picachv_core::dataframe::PolicyGuardedColumn",
                                                                      "policies"
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let p :=
                                                                                  M.copy (| γ |) in
                                                                                M.read (|
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_core::policy::policy::Policy";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            p
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.read (|
                                                                                              γ
                                                                                            |) in
                                                                                          let _ :=
                                                                                            M.is_struct_tuple (|
                                                                                              γ,
                                                                                              "picachv_core::policy::policy::Policy::PolicyClean"
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Bool
                                                                                              true
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (M.alloc (|
                                                                                            Value.Bool
                                                                                              false
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              [
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "picachv_error::__private::must_use",
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructTuple
                                                                      "picachv_error::PicachvError::ComputeError"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::Into",
                                                                            Ty.path
                                                                              "alloc::string::String",
                                                                            [
                                                                              Ty.path
                                                                                "picachv_error::ErrString"
                                                                            ],
                                                                            "into",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              let~ res :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_function (|
                                                                                      "alloc::fmt::format",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::Arguments",
                                                                                          "new_v1",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          (* Unsize *)
                                                                                          M.pointer_coercion
                                                                                            (M.alloc (|
                                                                                              Value.Array
                                                                                                [
                                                                                                  M.read (|
                                                                                                    Value.String
                                                                                                      "Possible policy breach detected; abort early.

The required policy is
"
                                                                                                  |)
                                                                                                ]
                                                                                            |));
                                                                                          (* Unsize *)
                                                                                          M.pointer_coercion
                                                                                            (M.alloc (|
                                                                                              Value.Array
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      "new_display",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      self
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                            |))
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              res
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_finalize : M.IsAssociatedFunction Self "finalize" finalize.
    
    (*
        pub fn shape(&self) -> (usize, usize) {
            match self.columns.as_slice() {
                &[] => (0, 0),
                v => (v[0].policies.len(), v.len()),
            }
        }
    *)
    Definition shape (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          [
                            Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "as_slice",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                      "columns"
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (| Value.Tuple [ Value.Integer 0; Value.Integer 0 ] |)));
                fun γ =>
                  ltac:(M.monadic
                    (let v := M.copy (| γ |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::Policy";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_array_field (|
                                      M.read (| v |),
                                      M.alloc (| Value.Integer 0 |)
                                    |)
                                  ]
                                |),
                                "picachv_core::dataframe::PolicyGuardedColumn",
                                "policies"
                              |)
                            ]
                          |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "len",
                              []
                            |),
                            [ M.read (| v |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_shape : M.IsAssociatedFunction Self "shape" shape.
    
    (*
        pub fn filter(&mut self, pred: &[bool]) -> PicachvResult<()> {
            picachv_ensure!(
                pred.len() == self.shape().0,
                ComputeError: "The length of the predicate does not match the dataframe: {} != {}", pred.len(), self.shape().0,
            );
    
            self.columns = THREAD_POOL.install(|| {
                self.columns
                    .par_iter()
                    .map(|c| {
                        let policies = c
                            .policies
                            .par_iter()
                            .zip(pred.par_iter())
                            .filter_map(|(p, b)| if *b { Some(p.clone()) } else { None })
                            .collect::<Vec<_>>();
    
                        Arc::new(PolicyGuardedColumn { policies })
                    })
                    .collect()
            });
    
            Ok(())
        }
    *)
    Definition filter (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; pred ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let pred := M.alloc (| pred |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.eq
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ Ty.path "bool" ],
                                        "len",
                                        []
                                      |),
                                      [ M.read (| pred |) ]
                                    |))
                                    (M.read (|
                                      M.SubPointer.get_tuple_field (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "shape",
                                              []
                                            |),
                                            [ M.read (| self |) ]
                                          |)
                                        |),
                                        0
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::ComputeError"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "The length of the predicate does not match the dataframe: "
                                                                        |);
                                                                        M.read (|
                                                                          Value.String " != "
                                                                        |)
                                                                      ]
                                                                  |));
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [ Ty.path "usize" ]
                                                                          |),
                                                                          [
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    [ Ty.path "bool"
                                                                                    ],
                                                                                  "len",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| pred |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [ Ty.path "usize" ]
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_tuple_field (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                                    "shape",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      self
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              0
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                      "columns"
                    |),
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "rayon_core::thread_pool::ThreadPool",
                        "install",
                        [
                          Ty.function
                            [ Ty.tuple [] ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]);
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.path "picachv_core::dataframe::PolicyGuardedColumn";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "std::sync::lazy_lock::LazyLock")
                              [
                                Ty.path "rayon_core::thread_pool::ThreadPool";
                                Ty.function [] (Ty.path "rayon_core::thread_pool::ThreadPool")
                              ],
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.read (|
                              M.get_constant (| "picachv_core::thread_pool::THREAD_POOL" |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::iter::map::Map")
                                              [
                                                Ty.apply
                                                  (Ty.path "rayon::slice::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                      Ty.path "alloc::alloc::Global"
                                                    ])
                                              ],
                                            [],
                                            "collect",
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::ParallelIterator",
                                                Ty.apply
                                                  (Ty.path "rayon::slice::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                "map",
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedColumn";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]);
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "rayon::iter::IntoParallelRefIterator",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "par_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                      "columns"
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let c := M.copy (| γ |) in
                                                                M.read (|
                                                                  let~ policies :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "rayon::iter::ParallelIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "rayon::iter::filter_map::FilterMap")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "rayon::iter::zip::Zip")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "rayon::slice::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "rayon::slice::Iter")
                                                                                    [ Ty.path "bool"
                                                                                    ]
                                                                                ];
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::sync::Arc")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "picachv_core::policy::policy::Policy";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "bool"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::sync::Arc")
                                                                                      [
                                                                                        Ty.path
                                                                                          "picachv_core::policy::policy::Policy";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ])
                                                                            ],
                                                                          [],
                                                                          "collect",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "rayon::iter::ParallelIterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "rayon::iter::zip::Zip")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "rayon::slice::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "rayon::slice::Iter")
                                                                                    [ Ty.path "bool"
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              "filter_map",
                                                                              [
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::sync::Arc")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "picachv_core::policy::policy::Policy";
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bool"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                  (Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ]);
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "rayon::iter::IndexedParallelIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "rayon::slice::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::sync::Arc")
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  "zip",
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "rayon::slice::Iter")
                                                                                      [
                                                                                        Ty.path
                                                                                          "bool"
                                                                                      ]
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "rayon::iter::IntoParallelRefIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_core::policy::policy::Policy";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      "par_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::sync::Arc")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            "deref",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              c
                                                                                            |)
                                                                                          ]
                                                                                        |),
                                                                                        "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                        "policies"
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "rayon::iter::IntoParallelRefIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        [
                                                                                          Ty.path
                                                                                            "bool"
                                                                                        ],
                                                                                      [],
                                                                                      "par_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        pred
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.closure
                                                                                (fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    match γ with
                                                                                    | [ α0 ] =>
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          α0
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                  γ,
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    γ0_1 :=
                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                  γ,
                                                                                                  1
                                                                                                |) in
                                                                                              let
                                                                                                    p :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              let
                                                                                                    b :=
                                                                                                M.copy (|
                                                                                                  γ0_1
                                                                                                |) in
                                                                                              M.read (|
                                                                                                M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ :=
                                                                                                          M.use
                                                                                                            (M.read (|
                                                                                                              b
                                                                                                            |)) in
                                                                                                        let
                                                                                                              _ :=
                                                                                                          M.is_constant_or_break_match (|
                                                                                                            M.read (|
                                                                                                              γ
                                                                                                            |),
                                                                                                            Value.Bool
                                                                                                              true
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Value.StructTuple
                                                                                                            "core::option::Option::Some"
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::clone::Clone",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::sync::Arc")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "picachv_core::policy::policy::Policy";
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  "clone",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.read (|
                                                                                                                    p
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                        |)));
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.alloc (|
                                                                                                          Value.StructTuple
                                                                                                            "core::option::Option::None"
                                                                                                            []
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)
                                                                                              |)))
                                                                                        ]
                                                                                      |)
                                                                                    | _ =>
                                                                                      M.impossible (||)
                                                                                    end))
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::dataframe::PolicyGuardedColumn";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "picachv_core::dataframe::PolicyGuardedColumn"
                                                                          [
                                                                            ("policies",
                                                                              M.read (| policies |))
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_filter : M.IsAssociatedFunction Self "filter" filter.
  End Impl_picachv_core_dataframe_PolicyGuardedDataFrame.
  
  (*
  pub fn apply_transform(
      df_arena: &Arc<RwLock<DfArena>>,
      df_uuid: Uuid,
      transform: TransformInfo,
      options: &ContextOptions,
  ) -> PicachvResult<Uuid> {
      match transform.information {
          Some(ti) => match ti {
              Information::Filter(pred) => {
                  let mut df_arena = df_arena.write();
                  let df = df_arena.get_mut(&df_uuid)?;
  
                  // We then apply the transformation.
                  //
                  // We first check if we are holding a strong reference to the dataframe, if so
                  // we can directly apply the transformation on the dataframe, otherwise we need
                  // to clone the dataframe and apply the transformation on the cloned dataframe.
                  // By doing so we can save the memory usage.
                  let new_uuid = match Arc::get_mut(df) {
                      Some(df) => {
                          df.filter(&pred.filter)?;
                          // We just re-use the UUID.
                          df_uuid
                      },
                      None => {
                          let mut df = ( **df).clone();
                          df.filter(&pred.filter)?;
                          // We insert the new dataframe and this methods returns a new UUID.
                          df_arena.insert(df)?
                      },
                  };
  
                  Ok(new_uuid)
              },
  
              Information::Union(union_info) => {
                  let mut df_arena = df_arena.write();
  
                  let involved_dfs = [&union_info.lhs_df_uuid, &union_info.rhs_df_uuid]
                      .par_iter()
                      .map(|uuid| {
                          let uuid = Uuid::from_slice_le(uuid)
                              .map_err(|_| PicachvError::InvalidOperation("Invalid UUID.".into()))?;
                          df_arena.get(&uuid)
                      })
                      .collect::<PicachvResult<Vec<_>>>()?;
  
                  // We just union them all.
                  let new_df = PolicyGuardedDataFrame::union(&involved_dfs)?;
  
                  // Assign the new UUID.
                  df_arena.insert(new_df)
              },
  
              Information::Join(join) => {
                  let mut df_arena = df_arena.write();
  
                  let lhs = Uuid::from_slice_le(&join.lhs_df_uuid)
                      .map_err(|_| PicachvError::InvalidOperation("Invalid UUID.".into()))?;
                  let rhs = Uuid::from_slice_le(&join.rhs_df_uuid)
                      .map_err(|_| PicachvError::InvalidOperation("Invalid UUID.".into()))?;
  
                  let lhs_df = df_arena.get(&lhs)?;
                  let rhs_df = df_arena.get(&rhs)?;
  
                  let new_df = if options.enable_profiling {
                      PROFILER.profile(
                          || PolicyGuardedDataFrame::join(lhs_df, rhs_df, &join, options),
                          "join".into(),
                      )
                  } else {
                      PolicyGuardedDataFrame::join(lhs_df, rhs_df, &join, options)
                  }?;
  
                  df_arena.insert(new_df)
              },
  
              Information::Reorder(reorder_info) => {
                  let mut df_arena = df_arena.write();
                  let df = df_arena.get_mut(&df_uuid)?;
                  // This is the permutation array where arr[i] = j means that the i-th row should be
                  // placed with the j-th row.
                  let perm = reorder_info
                      .perm
                      .par_iter()
                      .map(|e| *e as usize)
                      .collect::<Vec<_>>();
  
                  // We then apply the transformation.
                  match Arc::get_mut(df) {
                      Some(df) => {
                          df.reorder(&perm)?;
                          // We just re-use the UUID.
                          Ok(df_uuid)
                      },
                      None => {
                          let mut df = ( **df).clone();
                          df.reorder(&perm)?;
                          // We insert the new dataframe and this methods returns a new UUID.
                          df_arena.insert(df)
                      },
                  }
              },
  
              _ => todo!(),
          },
          None => Ok(df_uuid),
      }
  }
  *)
  Definition apply_transform (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ df_arena; df_uuid; transform; options ] =>
      ltac:(M.monadic
        (let df_arena := M.alloc (| df_arena |) in
        let df_uuid := M.alloc (| df_uuid |) in
        let transform := M.alloc (| transform |) in
        let options := M.alloc (| options |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              M.match_operator (|
                M.SubPointer.get_struct_record_field (|
                  transform,
                  "picachv_message::TransformInfo",
                  "information"
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let ti := M.copy (| γ0_0 |) in
                      M.match_operator (|
                        ti,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "picachv_message::transform_info::Information::Filter",
                                  0
                                |) in
                              let pred := M.copy (| γ0_0 |) in
                              let~ df_arena :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "spin::rwlock::RwLock")
                                        [
                                          Ty.apply
                                            (Ty.path "picachv_core::arena::Arena")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame"
                                            ];
                                          Ty.path "spin::relax::Spin"
                                        ],
                                      "write",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "spin::rwlock::RwLock")
                                                [
                                                  Ty.apply
                                                    (Ty.path "picachv_core::arena::Arena")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                    ];
                                                  Ty.path "spin::relax::Spin"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| df_arena |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "picachv_core::arena::Arena")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                ],
                                              "get_mut",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::DerefMut",
                                                  Ty.apply
                                                    (Ty.path "spin::rwlock::RwLockWriteGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "picachv_core::arena::Arena")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                        ];
                                                      Ty.path "spin::relax::Spin"
                                                    ],
                                                  [],
                                                  "deref_mut",
                                                  []
                                                |),
                                                [ df_arena ]
                                              |);
                                              df_uuid
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ new_uuid :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "get_mut",
                                          []
                                        |),
                                        [ M.read (| df |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let df := M.copy (| γ0_0 |) in
                                          let~ _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "picachv_error::PicachvError"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                        "filter",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| df |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "bool";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              pred,
                                                              "picachv_message::FilterInformation",
                                                              "filter"
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path "uuid::Uuid";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          df_uuid));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          let~ df :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ M.read (| df |) ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "picachv_error::PicachvError"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                        "filter",
                                                        []
                                                      |),
                                                      [
                                                        df;
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "bool";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              pred,
                                                              "picachv_message::FilterInformation",
                                                              "filter"
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path "uuid::Uuid";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "picachv_core::arena::Arena")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                        ],
                                                      "insert",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path
                                                              "spin::rwlock::RwLockWriteGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "picachv_core::arena::Arena")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                ];
                                                              Ty.path "spin::relax::Spin"
                                                            ],
                                                          [],
                                                          "deref_mut",
                                                          []
                                                        |),
                                                        [ df_arena ]
                                                      |);
                                                      M.read (| df |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path "uuid::Uuid";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)))
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  [ M.read (| new_uuid |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "picachv_message::transform_info::Information::Union",
                                  0
                                |) in
                              let union_info := M.copy (| γ0_0 |) in
                              let~ df_arena :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "spin::rwlock::RwLock")
                                        [
                                          Ty.apply
                                            (Ty.path "picachv_core::arena::Arena")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame"
                                            ];
                                          Ty.path "spin::relax::Spin"
                                        ],
                                      "write",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "spin::rwlock::RwLock")
                                                [
                                                  Ty.apply
                                                    (Ty.path "picachv_core::arena::Arena")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                    ];
                                                  Ty.path "spin::relax::Spin"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| df_arena |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ involved_dfs :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "rayon::iter::ParallelIterator",
                                              Ty.apply
                                                (Ty.path "rayon::iter::map::Map")
                                                [
                                                  Ty.apply
                                                    (Ty.path "rayon::slice::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "u8";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u8";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "picachv_error::PicachvError"
                                                      ])
                                                ],
                                              [],
                                              "collect",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "picachv_error::PicachvError"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "rayon::iter::ParallelIterator",
                                                  Ty.apply
                                                    (Ty.path "rayon::slice::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "u8";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ],
                                                  [],
                                                  "map",
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u8";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "picachv_error::PicachvError"
                                                        ]);
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "rayon::iter::IntoParallelRefIterator",
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "u8";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      [],
                                                      "par_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              union_info,
                                                              "picachv_message::UnionInformation",
                                                              "lhs_df_uuid"
                                                            |);
                                                            M.SubPointer.get_struct_record_field (|
                                                              union_info,
                                                              "picachv_message::UnionInformation",
                                                              "rhs_df_uuid"
                                                            |)
                                                          ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let uuid := M.copy (| γ |) in
                                                                  M.read (|
                                                                    let~ uuid :=
                                                                      M.copy (|
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::Try",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "uuid::Uuid";
                                                                                    Ty.path
                                                                                      "picachv_error::PicachvError"
                                                                                  ],
                                                                                [],
                                                                                "branch",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      [
                                                                                        Ty.path
                                                                                          "uuid::Uuid";
                                                                                        Ty.path
                                                                                          "uuid::error::Error"
                                                                                      ],
                                                                                    "map_err",
                                                                                    [
                                                                                      Ty.path
                                                                                        "picachv_error::PicachvError";
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "uuid::error::Error"
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.path
                                                                                          "picachv_error::PicachvError")
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "uuid::Uuid",
                                                                                        "from_slice_le",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u8";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            "deref",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.read (|
                                                                                                uuid
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.closure
                                                                                      (fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          match γ
                                                                                          with
                                                                                          | [ α0
                                                                                              ] =>
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                α0
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (Value.StructTuple
                                                                                                      "picachv_error::PicachvError::InvalidOperation"
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::convert::Into",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "str"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_error::ErrString"
                                                                                                            ],
                                                                                                            "into",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              Value.String
                                                                                                                "Invalid UUID."
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]))
                                                                                              ]
                                                                                            |)
                                                                                          | _ =>
                                                                                            M.impossible (||)
                                                                                          end))
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                                    0
                                                                                  |) in
                                                                                let residual :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.return_ (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::try_trait::FromResidual",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::result::Result")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "picachv_error::PicachvError"
                                                                                              ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::convert::Infallible";
                                                                                                  Ty.path
                                                                                                    "picachv_error::PicachvError"
                                                                                                ]
                                                                                            ],
                                                                                            "from_residual",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              residual
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                                    0
                                                                                  |) in
                                                                                let val :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                val))
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "picachv_core::arena::Arena")
                                                                            [
                                                                              Ty.path
                                                                                "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                            ],
                                                                          "get",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "spin::rwlock::RwLockWriteGuard")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "picachv_core::arena::Arena")
                                                                                    [
                                                                                      Ty.path
                                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "spin::relax::Spin"
                                                                                ],
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [ df_arena ]
                                                                          |);
                                                                          uuid
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ new_df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              "union",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            [
                                                              Ty.path
                                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ involved_dfs ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "picachv_core::arena::Arena")
                                      [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ],
                                    "insert",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "spin::rwlock::RwLockWriteGuard")
                                          [
                                            Ty.apply
                                              (Ty.path "picachv_core::arena::Arena")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame"
                                              ];
                                            Ty.path "spin::relax::Spin"
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [ df_arena ]
                                    |);
                                    M.read (| new_df |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "picachv_message::transform_info::Information::Join",
                                  0
                                |) in
                              let join := M.copy (| γ0_0 |) in
                              let~ df_arena :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "spin::rwlock::RwLock")
                                        [
                                          Ty.apply
                                            (Ty.path "picachv_core::arena::Arena")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame"
                                            ];
                                          Ty.path "spin::relax::Spin"
                                        ],
                                      "write",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "spin::rwlock::RwLock")
                                                [
                                                  Ty.apply
                                                    (Ty.path "picachv_core::arena::Arena")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                    ];
                                                  Ty.path "spin::relax::Spin"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| df_arena |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ lhs :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "uuid::Uuid";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "uuid::Uuid"; Ty.path "uuid::error::Error"
                                                ],
                                              "map_err",
                                              [
                                                Ty.path "picachv_error::PicachvError";
                                                Ty.function
                                                  [ Ty.tuple [ Ty.path "uuid::error::Error" ] ]
                                                  (Ty.path "picachv_error::PicachvError")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "uuid::Uuid",
                                                  "from_slice_le",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        join,
                                                        "picachv_message::JoinInformation",
                                                        "lhs_df_uuid"
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (Value.StructTuple
                                                                "picachv_error::PicachvError::InvalidOperation"
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ],
                                                                      [
                                                                        Ty.path
                                                                          "picachv_error::ErrString"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        Value.String "Invalid UUID."
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ rhs :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "uuid::Uuid";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "uuid::Uuid"; Ty.path "uuid::error::Error"
                                                ],
                                              "map_err",
                                              [
                                                Ty.path "picachv_error::PicachvError";
                                                Ty.function
                                                  [ Ty.tuple [ Ty.path "uuid::error::Error" ] ]
                                                  (Ty.path "picachv_error::PicachvError")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "uuid::Uuid",
                                                  "from_slice_le",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        join,
                                                        "picachv_message::JoinInformation",
                                                        "rhs_df_uuid"
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (Value.StructTuple
                                                                "picachv_error::PicachvError::InvalidOperation"
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ],
                                                                      [
                                                                        Ty.path
                                                                          "picachv_error::ErrString"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        Value.String "Invalid UUID."
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ lhs_df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "picachv_core::arena::Arena")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                ],
                                              "get",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "spin::rwlock::RwLockWriteGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "picachv_core::arena::Arena")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                        ];
                                                      Ty.path "spin::relax::Spin"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ df_arena ]
                                              |);
                                              lhs
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ rhs_df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "picachv_core::arena::Arena")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                ],
                                              "get",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "spin::rwlock::RwLockWriteGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "picachv_core::arena::Arena")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                        ];
                                                      Ty.path "spin::relax::Spin"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ df_arena ]
                                              |);
                                              rhs
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ new_df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.SubPointer.get_struct_record_field (|
                                                          M.read (| options |),
                                                          "picachv_message::ContextOptions",
                                                          "enable_profiling"
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "picachv_core::profiler::PicachvProfiler",
                                                          "profile",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ];
                                                            Ty.function
                                                              [ Ty.tuple [] ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::sync::lazy_lock::LazyLock")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::profiler::PicachvProfiler";
                                                                  Ty.function
                                                                    []
                                                                    (Ty.path
                                                                      "picachv_core::profiler::PicachvProfiler")
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.get_constant (|
                                                                  "picachv_core::profiler::PROFILER"
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                              "join",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    [
                                                                                      Ty.path
                                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    lhs_df
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::sync::Arc")
                                                                                    [
                                                                                      Ty.path
                                                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    rhs_df
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              join;
                                                                              M.read (| options |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end));
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::borrow::Cow")
                                                                  [ Ty.path "str" ]
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [ M.read (| Value.String "join" |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                          "join",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ M.read (| lhs_df |) ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                [
                                                                  Ty.path
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ M.read (| rhs_df |) ]
                                                          |);
                                                          join;
                                                          M.read (| options |)
                                                        ]
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "picachv_core::arena::Arena")
                                      [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ],
                                    "insert",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "spin::rwlock::RwLockWriteGuard")
                                          [
                                            Ty.apply
                                              (Ty.path "picachv_core::arena::Arena")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame"
                                              ];
                                            Ty.path "spin::relax::Spin"
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [ df_arena ]
                                    |);
                                    M.read (| new_df |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "picachv_message::transform_info::Information::Reorder",
                                  0
                                |) in
                              let reorder_info := M.copy (| γ0_0 |) in
                              let~ df_arena :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "spin::rwlock::RwLock")
                                        [
                                          Ty.apply
                                            (Ty.path "picachv_core::arena::Arena")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame"
                                            ];
                                          Ty.path "spin::relax::Spin"
                                        ],
                                      "write",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "spin::rwlock::RwLock")
                                                [
                                                  Ty.apply
                                                    (Ty.path "picachv_core::arena::Arena")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                    ];
                                                  Ty.path "spin::relax::Spin"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| df_arena |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ df :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "picachv_core::arena::Arena")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                ],
                                              "get_mut",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::DerefMut",
                                                  Ty.apply
                                                    (Ty.path "spin::rwlock::RwLockWriteGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "picachv_core::arena::Arena")
                                                        [
                                                          Ty.path
                                                            "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                        ];
                                                      Ty.path "spin::relax::Spin"
                                                    ],
                                                  [],
                                                  "deref_mut",
                                                  []
                                                |),
                                                [ df_arena ]
                                              |);
                                              df_uuid
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ perm :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "rayon::iter::ParallelIterator",
                                      Ty.apply
                                        (Ty.path "rayon::iter::map::Map")
                                        [
                                          Ty.apply (Ty.path "rayon::slice::Iter") [ Ty.path "u64" ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ]
                                            ]
                                            (Ty.path "usize")
                                        ],
                                      [],
                                      "collect",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "rayon::iter::ParallelIterator",
                                          Ty.apply (Ty.path "rayon::slice::Iter") [ Ty.path "u64" ],
                                          [],
                                          "map",
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ]
                                              ]
                                              (Ty.path "usize");
                                            Ty.path "usize"
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "rayon::iter::IntoParallelRefIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              "par_iter",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                reorder_info,
                                                "picachv_message::ReorderInformation",
                                                "perm"
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let e := M.copy (| γ |) in
                                                          M.rust_cast
                                                            (M.read (| M.read (| e |) |))))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "get_mut",
                                      []
                                    |),
                                    [ M.read (| df |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let df := M.copy (| γ0_0 |) in
                                      let~ _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "picachv_error::PicachvError"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                    "reorder",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| df |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ perm ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "uuid::Uuid";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::result::Result::Ok"
                                          [ M.read (| df_uuid |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      let~ df :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame",
                                              [],
                                              "clone",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ M.read (| df |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "picachv_error::PicachvError"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                    "reorder",
                                                    []
                                                  |),
                                                  [
                                                    df;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ perm ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "uuid::Uuid";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "picachv_core::arena::Arena")
                                              [
                                                Ty.path
                                                  "picachv_core::dataframe::PolicyGuardedDataFrame"
                                              ],
                                            "insert",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::DerefMut",
                                                Ty.apply
                                                  (Ty.path "spin::rwlock::RwLockWriteGuard")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "picachv_core::arena::Arena")
                                                      [
                                                        Ty.path
                                                          "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                      ];
                                                    Ty.path "spin::relax::Spin"
                                                  ],
                                                [],
                                                "deref_mut",
                                                []
                                              |),
                                              [ df_arena ]
                                            |);
                                            M.read (| df |)
                                          ]
                                        |)
                                      |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [ M.read (| Value.String "not yet implemented" |) ]
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                      M.alloc (|
                        Value.StructTuple "core::result::Result::Ok" [ M.read (| df_uuid |) ]
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_apply_transform :
    M.IsFunction "picachv_core::dataframe::apply_transform" apply_transform.
End dataframe.
