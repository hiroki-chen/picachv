(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module constants.
  (*
  Enum LogicalPlanType
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Select";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Distinct";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Projection";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Aggregation";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Join";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Union";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Scan";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Other";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalPlanType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalPlanType" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Select"
                          |) in
                        M.alloc (| M.read (| Value.String "Select" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Distinct"
                          |) in
                        M.alloc (| M.read (| Value.String "Distinct" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Projection"
                          |) in
                        M.alloc (| M.read (| Value.String "Projection" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Aggregation"
                          |) in
                        M.alloc (| M.read (| Value.String "Aggregation" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Join"
                          |) in
                        M.alloc (| M.read (| Value.String "Join" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Union"
                          |) in
                        M.alloc (| M.read (| Value.String "Union" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Scan"
                          |) in
                        M.alloc (| M.read (| Value.String "Scan" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalPlanType::Other"
                          |) in
                        M.alloc (| M.read (| Value.String "Other" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalPlanType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_convert_From_picachv_core_constants_LogicalPlanType_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (* IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "picachv_core::constants::LogicalPlanType" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_LogicalPlanType_for_u8.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (* TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::LogicalPlanType" ].
    
    (* TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t := M.run ltac:(M.monadic (Value.String "LogicalPlanType")).
    
    (* TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Select" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Distinct" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::LogicalPlanType::Projection"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::LogicalPlanType::Aggregation"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 4 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Join" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 5 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Union" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 6 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Scan" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 7 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalPlanType::Other" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::LogicalPlanType" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    (* TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::LogicalPlanType" ].
    
    (* TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::LogicalPlanType",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_LogicalPlanType.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_LogicalPlanType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalPlanType".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_LogicalPlanType.
  
  (*
  Enum QuantileInterpolOptions
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Nearest";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Lower";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Higher";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Midpoint";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Linear";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::QuantileInterpolOptions" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::QuantileInterpolOptions" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::QuantileInterpolOptions::Nearest"
                          |) in
                        M.alloc (| M.read (| Value.String "Nearest" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::QuantileInterpolOptions::Lower"
                          |) in
                        M.alloc (| M.read (| Value.String "Lower" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::QuantileInterpolOptions::Higher"
                          |) in
                        M.alloc (| M.read (| Value.String "Higher" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::QuantileInterpolOptions::Midpoint"
                          |) in
                        M.alloc (| M.read (| Value.String "Midpoint" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::QuantileInterpolOptions::Linear"
                          |) in
                        M.alloc (| M.read (| Value.String "Linear" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_default_Default_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* Default *)
    Definition default (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (Value.StructTuple "picachv_core::constants::QuantileInterpolOptions::Nearest" []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_QuantileInterpolOptions.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
    
    (* Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::QuantileInterpolOptions" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "isize", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_QuantileInterpolOptions.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_for_picachv_core_constants_QuantileInterpolOptions.
      Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
      
      (* Serialize *)
      Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.read (|
              M.match_operator (|
                M.read (| self |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::QuantileInterpolOptions::Nearest"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            "serialize_unit_variant",
                            []
                          |),
                          [
                            M.read (| __serializer |);
                            M.read (| Value.String "QuantileInterpolOptions" |);
                            Value.Integer 0;
                            M.read (| Value.String "Nearest" |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::QuantileInterpolOptions::Lower"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            "serialize_unit_variant",
                            []
                          |),
                          [
                            M.read (| __serializer |);
                            M.read (| Value.String "QuantileInterpolOptions" |);
                            Value.Integer 1;
                            M.read (| Value.String "Lower" |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::QuantileInterpolOptions::Higher"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            "serialize_unit_variant",
                            []
                          |),
                          [
                            M.read (| __serializer |);
                            M.read (| Value.String "QuantileInterpolOptions" |);
                            Value.Integer 2;
                            M.read (| Value.String "Higher" |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::QuantileInterpolOptions::Midpoint"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            "serialize_unit_variant",
                            []
                          |),
                          [
                            M.read (| __serializer |);
                            M.read (| Value.String "QuantileInterpolOptions" |);
                            Value.Integer 3;
                            M.read (| Value.String "Midpoint" |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::QuantileInterpolOptions::Linear"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            "serialize_unit_variant",
                            []
                          |),
                          [
                            M.read (| __serializer |);
                            M.read (| Value.String "QuantileInterpolOptions" |);
                            Value.Integer 4;
                            M.read (| Value.String "Linear" |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_picachv_core_constants_QuantileInterpolOptions.
    Module Impl_serde_de_Deserialize_for_picachv_core_constants_QuantileInterpolOptions.
      Definition Self : Ty.t := Ty.path "picachv_core::constants::QuantileInterpolOptions".
      
      (* Deserialize *)
      Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                "deserialize_enum",
                [ Ty.path "picachv_core::constants::_'1::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                M.read (| Value.String "QuantileInterpolOptions" |);
                M.read (|
                  M.get_constant (| "picachv_core::constants::_'1::deserialize::VARIANTS" |)
                |);
                Value.StructRecord
                  "picachv_core::constants::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_picachv_core_constants_QuantileInterpolOptions.
    Module Impl_serde_ser_Serialize_for_picachv_core_constants_GroupByMethod.
      Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
      
      (* Serialize *)
      Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    M.read (| self |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Min"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 0;
                                M.read (| Value.String "Min" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::NanMin"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 1;
                                M.read (| Value.String "NanMin" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Max"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 2;
                                M.read (| Value.String "Max" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::NanMax"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 3;
                                M.read (| Value.String "NanMax" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Median"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 4;
                                M.read (| Value.String "Median" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Mean"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 5;
                                M.read (| Value.String "Mean" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::First"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 6;
                                M.read (| Value.String "First" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Last"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 7;
                                M.read (| Value.String "Last" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Sum"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 8;
                                M.read (| Value.String "Sum" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Groups"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 9;
                                M.read (| Value.String "Groups" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::NUnique"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 10;
                                M.read (| Value.String "NUnique" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Quantile",
                              0
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Quantile",
                              1
                            |) in
                          let __field0 := M.alloc (| γ0_0 |) in
                          let __field1 := M.alloc (| γ0_1 |) in
                          let~ __serde_state :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.associated; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::Serializer",
                                          __S,
                                          [],
                                          "serialize_tuple_variant",
                                          []
                                        |),
                                        [
                                          M.read (| __serializer |);
                                          M.read (| Value.String "GroupByMethod" |);
                                          Value.Integer 11;
                                          M.read (| Value.String "Quantile" |);
                                          BinOp.Wrap.add
                                            Integer.Usize
                                            (BinOp.Wrap.add
                                              Integer.Usize
                                              (Value.Integer 0)
                                              (Value.Integer 1))
                                            (Value.Integer 1)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.associated ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "serde::ser::SerializeTupleVariant",
                                        Ty.associated,
                                        [],
                                        "serialize_field",
                                        [ Ty.path "f64" ]
                                      |),
                                      [ __serde_state; M.read (| __field0 |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.associated; Ty.associated ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.associated
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |) in
                          let~ _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.associated ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "serde::ser::SerializeTupleVariant",
                                        Ty.associated,
                                        [],
                                        "serialize_field",
                                        [ Ty.path "picachv_core::constants::QuantileInterpolOptions"
                                        ]
                                      |),
                                      [ __serde_state; M.read (| __field1 |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.associated; Ty.associated ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.associated
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeTupleVariant",
                                Ty.associated,
                                [],
                                "end",
                                []
                              |),
                              [ M.read (| __serde_state |) ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Count",
                              "include_nulls"
                            |) in
                          let include_nulls := M.alloc (| γ0_0 |) in
                          let~ __serde_state :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.associated; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::Serializer",
                                          __S,
                                          [],
                                          "serialize_struct_variant",
                                          []
                                        |),
                                        [
                                          M.read (| __serializer |);
                                          M.read (| Value.String "GroupByMethod" |);
                                          Value.Integer 12;
                                          M.read (| Value.String "Count" |);
                                          BinOp.Wrap.add
                                            Integer.Usize
                                            (Value.Integer 0)
                                            (Value.Integer 1)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.associated ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "serde::ser::SerializeStructVariant",
                                        Ty.associated,
                                        [],
                                        "serialize_field",
                                        [ Ty.path "bool" ]
                                      |),
                                      [
                                        __serde_state;
                                        M.read (| Value.String "include_nulls" |);
                                        M.read (| include_nulls |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.associated; Ty.associated ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.associated
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeStructVariant",
                                Ty.associated,
                                [],
                                "end",
                                []
                              |),
                              [ M.read (| __serde_state |) ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Implode"
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_unit_variant",
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 13;
                                M.read (| Value.String "Implode" |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Std",
                              0
                            |) in
                          let __field0 := M.alloc (| γ0_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_newtype_variant",
                                [ Ty.path "u8" ]
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 14;
                                M.read (| Value.String "Std" |);
                                M.read (| __field0 |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_core::constants::GroupByMethod::Var",
                              0
                            |) in
                          let __field0 := M.alloc (| γ0_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                "serialize_newtype_variant",
                                [ Ty.path "u8" ]
                              |),
                              [
                                M.read (| __serializer |);
                                M.read (| Value.String "GroupByMethod" |);
                                Value.Integer 15;
                                M.read (| Value.String "Var" |);
                                M.read (| __field0 |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_picachv_core_constants_GroupByMethod.
    Module Impl_serde_de_Deserialize_for_picachv_core_constants_GroupByMethod.
      Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
      
      (* Deserialize *)
      Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                "deserialize_enum",
                [ Ty.path "picachv_core::constants::_'3::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                M.read (| Value.String "GroupByMethod" |);
                M.read (|
                  M.get_constant (| "picachv_core::constants::_'3::deserialize::VARIANTS" |)
                |);
                Value.StructRecord
                  "picachv_core::constants::_'3::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_picachv_core_constants_GroupByMethod.
  End underscore.
  
  
  (*
  Enum JoinType
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Left";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Right";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Full";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Inner";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_JoinType.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_JoinType.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (| γ, "picachv_core::constants::JoinType::Left" |) in
                        M.alloc (| M.read (| Value.String "Left" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (| γ, "picachv_core::constants::JoinType::Right" |) in
                        M.alloc (| M.read (| Value.String "Right" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (| γ, "picachv_core::constants::JoinType::Full" |) in
                        M.alloc (| M.read (| Value.String "Full" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (| γ, "picachv_core::constants::JoinType::Inner" |) in
                        M.alloc (| M.read (| Value.String "Inner" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_JoinType.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_JoinType.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_JoinType.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_JoinType.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_JoinType.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  []
                |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_JoinType.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_JoinType.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::JoinType" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_JoinType.
  
  Module Impl_core_default_Default_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     Default *)
    Definition default (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] => ltac:(M.monadic (Value.StructTuple "picachv_core::constants::JoinType::Inner" []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_picachv_core_constants_JoinType.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::JoinType" ].
    
    (*     TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t := M.run ltac:(M.monadic (Value.String "JoinType")).
    
    (*     TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::JoinType::Left" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::JoinType::Right" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::JoinType::Full" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::JoinType::Inner" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::JoinType" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_JoinType.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::JoinType" ].
    
    (*     TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::JoinType",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_JoinType.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_JoinType.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::JoinType".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_JoinType.
  
  Module Impl_core_convert_From_picachv_core_constants_JoinType_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (*     IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "picachv_core::constants::JoinType" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_JoinType_for_u8.
  
  (*
  Enum LogicalBinaryOperator
  {
    ty_params := [];
    variants :=
      [
        {
          name := "And";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Or";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalBinaryOperator::And"
                          |) in
                        M.alloc (| M.read (| Value.String "And" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::LogicalBinaryOperator::Or"
                          |) in
                        M.alloc (| M.read (| Value.String "Or" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  []
                |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_convert_From_picachv_core_constants_LogicalBinaryOperator_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (*     IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *)
        [ (* T *) Ty.path "picachv_core::constants::LogicalBinaryOperator" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_LogicalBinaryOperator_for_u8.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t :=
      M.run ltac:(M.monadic (Value.String "LogicalBinaryOperator")).
    
    (*     TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalBinaryOperator::And" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::LogicalBinaryOperator::Or" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::LogicalBinaryOperator",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_LogicalBinaryOperator.
  
  (*
  Enum ComparisonBinaryOperator
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Eq";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Neq";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Gt";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Lt";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Le";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Ge";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Eq"
                          |) in
                        M.alloc (| M.read (| Value.String "Eq" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Neq"
                          |) in
                        M.alloc (| M.read (| Value.String "Neq" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Gt"
                          |) in
                        M.alloc (| M.read (| Value.String "Gt" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Lt"
                          |) in
                        M.alloc (| M.read (| Value.String "Lt" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Le"
                          |) in
                        M.alloc (| M.read (| Value.String "Le" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ComparisonBinaryOperator::Ge"
                          |) in
                        M.alloc (| M.read (| Value.String "Ge" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  []
                |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_convert_From_picachv_core_constants_ComparisonBinaryOperator_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (*     IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *)
        [ (* T *) Ty.path "picachv_core::constants::ComparisonBinaryOperator" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_ComparisonBinaryOperator_for_u8.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t :=
      M.run ltac:(M.monadic (Value.String "ComparisonBinaryOperator")).
    
    (*     TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Eq"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Neq"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Gt"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Lt"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 4 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Le"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 5 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ComparisonBinaryOperator::Ge"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::ComparisonBinaryOperator",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_ComparisonBinaryOperator.
  
  (*
  Enum ArithmeticBinaryOperator
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Add";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Sub";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Mul";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Div";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Mod";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Pow";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Add"
                          |) in
                        M.alloc (| M.read (| Value.String "Add" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Sub"
                          |) in
                        M.alloc (| M.read (| Value.String "Sub" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Mul"
                          |) in
                        M.alloc (| M.read (| Value.String "Mul" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Div"
                          |) in
                        M.alloc (| M.read (| Value.String "Div" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Mod"
                          |) in
                        M.alloc (| M.read (| Value.String "Mod" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::ArithmeticBinaryOperator::Pow"
                          |) in
                        M.alloc (| M.read (| Value.String "Pow" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  []
                |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_convert_From_picachv_core_constants_ArithmeticBinaryOperator_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (*     IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *)
        [ (* T *) Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_ArithmeticBinaryOperator_for_u8.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t :=
      M.run ltac:(M.monadic (Value.String "ArithmeticBinaryOperator")).
    
    (*     TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Add"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Sub"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Mul"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Div"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 4 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Mod"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 5 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "picachv_core::constants::ArithmeticBinaryOperator::Pow"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ].
    
    (*     TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::ArithmeticBinaryOperator",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  (*
  Enum BinOperator
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Logical";
          item := StructTuple [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ];
          discriminant := None;
        };
        {
          name := "Comparsion";
          item := StructTuple [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ];
          discriminant := None;
        };
        {
          name := "Arithmetic";
          item := StructTuple [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Logical" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Comparsion" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Arithmetic" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Logical",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Logical",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "picachv_core::constants::LogicalBinaryOperator",
                                  [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ],
                                  "eq",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Comparsion",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Comparsion",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "picachv_core::constants::ComparisonBinaryOperator",
                                  [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ],
                                  "eq",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Arithmetic",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Arithmetic",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "picachv_core::constants::ArithmeticBinaryOperator",
                                  [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ],
                                  "eq",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::intrinsics::unreachable", [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.match_operator (|
              M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_0 := M.read (| γ0_0 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ2_0 |) in
                    let γ0_1 := M.read (| γ0_1 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    let __arg1_0 := M.alloc (| γ2_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "picachv_core::constants::LogicalBinaryOperator",
                          [ Ty.path "picachv_core::constants::LogicalBinaryOperator" ],
                          "partial_cmp",
                          []
                        |),
                        [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_0 := M.read (| γ0_0 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ2_0 |) in
                    let γ0_1 := M.read (| γ0_1 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    let __arg1_0 := M.alloc (| γ2_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "picachv_core::constants::ComparisonBinaryOperator",
                          [ Ty.path "picachv_core::constants::ComparisonBinaryOperator" ],
                          "partial_cmp",
                          []
                        |),
                        [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_0 := M.read (| γ0_0 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ2_0 |) in
                    let γ0_1 := M.read (| γ0_1 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    let __arg1_0 := M.alloc (| γ2_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "picachv_core::constants::ArithmeticBinaryOperator",
                          [ Ty.path "picachv_core::constants::ArithmeticBinaryOperator" ],
                          "partial_cmp",
                          []
                        |),
                        [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "isize",
                          [ Ty.path "isize" ],
                          "partial_cmp",
                          []
                        |),
                        [ __self_tag; __arg1_tag ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], "cmp", [] |),
                  [ __self_tag; __arg1_tag ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::cmp::Ordering::Equal" |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Logical",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Logical",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::Ord",
                                  Ty.path "picachv_core::constants::LogicalBinaryOperator",
                                  [],
                                  "cmp",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Comparsion",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Comparsion",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::Ord",
                                  Ty.path "picachv_core::constants::ComparisonBinaryOperator",
                                  [],
                                  "cmp",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::BinOperator::Arithmetic",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::BinOperator::Arithmetic",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::Ord",
                                  Ty.path "picachv_core::constants::ArithmeticBinaryOperator",
                                  [],
                                  "cmp",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::intrinsics::unreachable", [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (* Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::BinOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "isize", [], "hash", [ __H ] |),
                  [ __self_tag; M.read (| state |) ]
                |)
              |) in
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "picachv_core::constants::LogicalBinaryOperator",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "picachv_core::constants::ComparisonBinaryOperator",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "picachv_core::constants::ArithmeticBinaryOperator",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_BinOperator.
  
  Module Impl_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (*
        pub fn is_logical(&self) -> bool {
            matches!(self, BinOperator::Logical(_))
        }
    *)
    Definition is_logical (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    M.alloc (| Value.Bool true |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_logical : M.IsAssociatedFunction Self "is_logical" is_logical.
    
    (*
        pub fn is_comparison(&self) -> bool {
            matches!(self, BinOperator::Comparsion(_))
        }
    *)
    Definition is_comparison (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    M.alloc (| Value.Bool true |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_comparison :
      M.IsAssociatedFunction Self "is_comparison" is_comparison.
    
    (*
        pub fn is_arithmetic(&self) -> bool {
            matches!(self, BinOperator::Arithmetic(_))
        }
    *)
    Definition is_arithmetic (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    M.alloc (| Value.Bool true |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_arithmetic :
      M.IsAssociatedFunction Self "is_arithmetic" is_arithmetic.
  End Impl_picachv_core_constants_BinOperator.
  
  (*
  Enum UnaryOperator
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Identity";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Redact";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Substitute";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Not";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [
              M.read (| f |);
              M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::UnaryOperator::Identity"
                          |) in
                        M.alloc (| M.read (| Value.String "Identity" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::UnaryOperator::Redact"
                          |) in
                        M.alloc (| M.read (| Value.String "Redact" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::UnaryOperator::Substitute"
                          |) in
                        M.alloc (| M.read (| Value.String "Substitute" |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::constants::UnaryOperator::Not"
                          |) in
                        M.alloc (| M.read (| Value.String "Not" |) |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_marker_StructuralEq_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_cmp_Eq_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     Eq *)
    Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_cmp_PartialOrd_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     PartialOrd *)
    Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u8",
                  [ Ty.path "u8" ],
                  "partial_cmp",
                  []
                |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_cmp_Ord_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     Ord *)
    Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u8", [], "cmp", [] |),
                [ __self_tag; __arg1_tag ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_hash_Hash_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     Hash *)
    Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::UnaryOperator" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (| "core::hash::Hash", Ty.path "u8", [], "hash", [ __H ] |),
                [ __self_tag; M.read (| state |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_convert_From_picachv_core_constants_UnaryOperator_for_u8.
    Definition Self : Ty.t := Ty.path "u8".
    
    (*     IntoPrimitive *)
    Definition from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ enum_value ] =>
        ltac:(M.monadic
          (let enum_value := M.alloc (| enum_value |) in
          M.rust_cast (M.read (| enum_value |))))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "picachv_core::constants::UnaryOperator" ]
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_picachv_core_constants_UnaryOperator_for_u8.
  
  Module Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Primitive : Ty.t := Ty.path "u8".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::UnaryOperator" ].
    
    (*     TryFromPrimitive *)
    (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
    Definition value_NAME : Value.t := M.run ltac:(M.monadic (Value.String "UnaryOperator")).
    
    (*     TryFromPrimitive *)
    Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.read (|
            M.match_operator (|
              number,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::UnaryOperator::Identity" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::UnaryOperator::Redact" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 2 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::UnaryOperator::Substitute" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 3 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::UnaryOperator::Not" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "num_enum::TryFromPrimitiveError")
                                [ Ty.path "picachv_core::constants::UnaryOperator" ],
                              "new",
                              []
                            |),
                            [ M.read (| number |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::TryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Primitive", InstanceField.Ty _Primitive);
          ("Error", InstanceField.Ty _Error);
          ("value_NAME", InstanceField.Constant value_NAME);
          ("try_from_primitive", InstanceField.Method try_from_primitive)
        ].
  End Impl_num_enum_TryFromPrimitive_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_core_convert_TryFrom_u8_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*     TryFromPrimitive *)
    Definition _Error : Ty.t :=
      Ty.apply
        (Ty.path "num_enum::TryFromPrimitiveError")
        [ Ty.path "picachv_core::constants::UnaryOperator" ].
    
    (*     TryFromPrimitive *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ number ] =>
        ltac:(M.monadic
          (let number := M.alloc (| number |) in
          M.call_closure (|
            M.get_trait_method (|
              "num_enum::TryFromPrimitive",
              Ty.path "picachv_core::constants::UnaryOperator",
              [],
              "try_from_primitive",
              []
            |),
            [ M.read (| number |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u8_for_picachv_core_constants_UnaryOperator.
  
  Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    Axiom Implements :
      M.IsTraitInstance
        "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_picachv_core_constants_UnaryOperator.
  
  (*
  Enum GroupByMethod
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Min";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NanMin";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Max";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NanMax";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Median";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Mean";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "First";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Last";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Sum";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Groups";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "NUnique";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Quantile";
          item :=
            StructTuple
              [ Ty.path "f64"; Ty.path "picachv_core::constants::QuantileInterpolOptions" ];
          discriminant := None;
        };
        {
          name := "Count";
          item := StructRecord [ ("include_nulls", Ty.path "bool") ];
          discriminant := None;
        };
        {
          name := "Implode";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Std";
          item := StructTuple [ Ty.path "u8" ];
          discriminant := None;
        };
        {
          name := "Var";
          item := StructTuple [ Ty.path "u8" ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_marker_Copy_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_picachv_core_constants_GroupByMethod.
  
  Module Impl_core_clone_Clone_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Value.DeclaredButUndefined,
                                      [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_constants_GroupByMethod.
  
  Module Impl_core_fmt_Debug_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Min" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Min" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::NanMin" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "NanMin" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Max" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Max" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::NanMax" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "NanMax" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Median" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Median" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Mean" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Mean" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::First" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "First" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Last" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Last" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Sum" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Sum" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Groups" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Groups" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::GroupByMethod::NUnique"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "NUnique" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Quantile",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Quantile",
                        1
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field2_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Quantile" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          (* Unsize *) M.pointer_coercion __self_1
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Count",
                        "include_nulls"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Count" |);
                          M.read (| Value.String "include_nulls" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Implode"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Implode" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Std",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Std" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::GroupByMethod::Var",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Var" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_constants_GroupByMethod.
  
  Module Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_picachv_core_constants_GroupByMethod.
  
  Module Impl_core_cmp_PartialEq_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::GroupByMethod" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "picachv_core::constants::GroupByMethod" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::GroupByMethod::Quantile",
                                0
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::GroupByMethod::Quantile",
                                1
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::GroupByMethod::Quantile",
                                0
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::GroupByMethod::Quantile",
                                1
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |)),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "picachv_core::constants::QuantileInterpolOptions",
                                      [ Ty.path "picachv_core::constants::QuantileInterpolOptions"
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "picachv_core::constants::GroupByMethod::Count",
                                "include_nulls"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "picachv_core::constants::GroupByMethod::Count",
                                "include_nulls"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| __self_0 |) |))
                                (M.read (| M.read (| __arg1_0 |) |))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::GroupByMethod::Std",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::GroupByMethod::Std",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| __self_0 |) |))
                                (M.read (| M.read (| __arg1_0 |) |))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "picachv_core::constants::GroupByMethod::Var",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "picachv_core::constants::GroupByMethod::Var",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| __self_0 |) |))
                                (M.read (| M.read (| __arg1_0 |) |))
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_picachv_core_constants_GroupByMethod.
  
  
  
  Module Impl_core_convert_TryFrom_picachv_message_GroupByMethod_for_picachv_core_constants_GroupByMethod.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::GroupByMethod".
    
    (*     type Error = PicachvError; *)
    Definition _Error : Ty.t := Ty.path "picachv_error::PicachvError".
    
    (*
        fn try_from(value: picachv_message::GroupByMethod) -> PicachvResult<Self> {
            match value {
                picachv_message::GroupByMethod::Min => Ok(GroupByMethod::Min),
                picachv_message::GroupByMethod::NanMin => Ok(GroupByMethod::NanMin),
                picachv_message::GroupByMethod::Max => Ok(GroupByMethod::Max),
                picachv_message::GroupByMethod::NanMax => Ok(GroupByMethod::NanMax),
                picachv_message::GroupByMethod::Median => Ok(GroupByMethod::Median),
                picachv_message::GroupByMethod::Mean => Ok(GroupByMethod::Mean),
                picachv_message::GroupByMethod::First => Ok(GroupByMethod::First),
                picachv_message::GroupByMethod::Last => Ok(GroupByMethod::Last),
                picachv_message::GroupByMethod::Sum => Ok(GroupByMethod::Sum),
                picachv_message::GroupByMethod::Len => Ok(GroupByMethod::Count {
                    include_nulls: true,
                }),
            }
        }
    *)
    Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.match_operator (|
              value,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Min" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Min" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::NanMin" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::NanMin" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Max" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Max" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::NanMax" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::NanMax" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Median" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Median" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Mean" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Mean" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::First" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::First" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Last" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Last" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Sum" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "picachv_core::constants::GroupByMethod::Sum" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "picachv_message::GroupByMethod::Len" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "picachv_core::constants::GroupByMethod::Count"
                            [ ("include_nulls", Value.Bool true) ]
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        Self
        (* Trait polymorphic types *) [ (* T *) Ty.path "picachv_message::GroupByMethod" ]
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_picachv_message_GroupByMethod_for_picachv_core_constants_GroupByMethod.
  
  Module Impl_core_fmt_Display_for_picachv_core_constants_LogicalBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::LogicalBinaryOperator".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                LogicalBinaryOperator::And => write!(f, "&&"),
                LogicalBinaryOperator::Or => write!(f, "||"),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::LogicalBinaryOperator::And"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "&&" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::LogicalBinaryOperator::Or"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "||" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_constants_LogicalBinaryOperator.
  
  Module Impl_core_fmt_Display_for_picachv_core_constants_ComparisonBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ComparisonBinaryOperator".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                ComparisonBinaryOperator::Eq => write!(f, "=="),
                ComparisonBinaryOperator::Neq => write!(f, "!="),
                ComparisonBinaryOperator::Gt => write!(f, ">"),
                ComparisonBinaryOperator::Lt => write!(f, "<"),
                ComparisonBinaryOperator::Le => write!(f, "<="),
                ComparisonBinaryOperator::Ge => write!(f, ">="),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Eq"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "==" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Neq"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "!=" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Gt"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String ">" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Lt"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "<" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Le"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "<=" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ComparisonBinaryOperator::Ge"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String ">=" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_constants_ComparisonBinaryOperator.
  
  Module Impl_core_fmt_Display_for_picachv_core_constants_ArithmeticBinaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::ArithmeticBinaryOperator".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                ArithmeticBinaryOperator::Add => write!(f, "+"),
                ArithmeticBinaryOperator::Sub => write!(f, "-"),
                ArithmeticBinaryOperator::Mul => write!(f, "*"),
                ArithmeticBinaryOperator::Div => write!(f, "/"),
                ArithmeticBinaryOperator::Mod => write!(f, "%"),
                ArithmeticBinaryOperator::Pow => write!(f, "^"),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Add"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "+" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Sub"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "-" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Mul"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "*" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Div"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "/" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Mod"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "%" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::ArithmeticBinaryOperator::Pow"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "^" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_constants_ArithmeticBinaryOperator.
  
  Module Impl_core_fmt_Display_for_picachv_core_constants_BinOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::BinOperator".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                BinOperator::Logical(op) => write!(f, "{}", op),
                BinOperator::Comparsion(op) => write!(f, "{}", op),
                BinOperator::Arithmetic(op) => write!(f, "{}", op),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Logical",
                        0
                      |) in
                    let op := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.path
                                                  "picachv_core::constants::LogicalBinaryOperator"
                                              ]
                                          ]
                                        |),
                                        [ op ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Comparsion",
                        0
                      |) in
                    let op := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.path
                                                  "picachv_core::constants::ComparisonBinaryOperator"
                                              ]
                                          ]
                                        |),
                                        [ op ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "picachv_core::constants::BinOperator::Arithmetic",
                        0
                      |) in
                    let op := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.path
                                                  "picachv_core::constants::ArithmeticBinaryOperator"
                                              ]
                                          ]
                                        |),
                                        [ op ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_constants_BinOperator.
  
  Module Impl_core_fmt_Display_for_picachv_core_constants_UnaryOperator.
    Definition Self : Ty.t := Ty.path "picachv_core::constants::UnaryOperator".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                UnaryOperator::Identity => write!(f, ""),
                UnaryOperator::Redact => write!(f, "redact"),
                UnaryOperator::Substitute => write!(f, "substitute"),
                UnaryOperator::Not => write!(f, "not"),
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::UnaryOperator::Identity"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [ (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |)) ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::UnaryOperator::Redact" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "redact" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "picachv_core::constants::UnaryOperator::Substitute"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array [ M.read (| Value.String "substitute" |) ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (| γ, "picachv_core::constants::UnaryOperator::Not" |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "not" |) ] |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_picachv_core_constants_UnaryOperator.
End constants.
