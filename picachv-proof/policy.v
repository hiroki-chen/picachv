(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module policy.
  Module policy.
    Definition value_P_CLEAN : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (| Value.StructTuple "picachv_core::policy::policy::Policy::PolicyClean" [] |))).
    
    (*
    pub fn p_bot() -> &'static Policy {
        static POLICY: LazyLock<Policy> = LazyLock::new(|| Policy::PolicyDeclassify {
            label: Arc::new(PolicyLabel::PolicyBot),
            next: Arc::new(Policy::PolicyClean),
        });
    
        &POLICY
    }
    *)
    Definition p_bot (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            M.get_trait_method (|
              "core::ops::deref::Deref",
              Ty.apply
                (Ty.path "std::sync::lazy_lock::LazyLock")
                [
                  Ty.path "picachv_core::policy::policy::Policy";
                  Ty.function [] (Ty.path "picachv_core::policy::policy::Policy")
                ],
              [],
              "deref",
              []
            |),
            [ M.read (| M.get_constant (| "picachv_core::policy::policy::p_bot::POLICY" |) |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_p_bot : M.IsFunction "picachv_core::policy::policy::p_bot" p_bot.
    
    Module p_bot.
      Definition value_POLICY : Value.t :=
        M.run
          ltac:(M.monadic
            (M.alloc (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::sync::lazy_lock::LazyLock")
                      [
                        Ty.path "picachv_core::policy::policy::Policy";
                        Ty.function [] (Ty.path "picachv_core::policy::policy::Policy")
                      ],
                    "new",
                    []
                  |),
                  [
                    (* ClosureFnPointer(Normal) *)
                    M.pointer_coercion
                      (M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (Value.StructRecord
                                        "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                        [
                                          ("label",
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::policy::policy::PolicyLabel";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              [
                                                Value.StructTuple
                                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                                  []
                                              ]
                                            |));
                                          ("next",
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path "picachv_core::policy::policy::Policy";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              [
                                                Value.StructTuple
                                                  "picachv_core::policy::policy::Policy::PolicyClean"
                                                  []
                                              ]
                                            |))
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end)))
                  ]
                |)
              |)
            |))).
    End p_bot.
    
    (*
    pub fn policy_ok(p: &Policy) -> bool {
        p == &P_CLEAN || p == p_bot()
    }
    *)
    Definition policy_ok (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ p ] =>
        ltac:(M.monadic
          (let p := M.alloc (| p |) in
          LogicalOp.or (|
            M.call_closure (|
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply (Ty.path "&") [ Ty.path "picachv_core::policy::policy::Policy" ],
                [ Ty.apply (Ty.path "&") [ Ty.path "picachv_core::policy::policy::Policy" ] ],
                "eq",
                []
              |),
              [ p; M.alloc (| M.get_constant (| "picachv_core::policy::policy::P_CLEAN" |) |) ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "&") [ Ty.path "picachv_core::policy::policy::Policy" ],
                  [ Ty.apply (Ty.path "&") [ Ty.path "picachv_core::policy::policy::Policy" ] ],
                  "eq",
                  []
                |),
                [
                  p;
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "picachv_core::policy::policy::p_bot", [] |),
                      []
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_policy_ok : M.IsFunction "picachv_core::policy::policy::policy_ok" policy_ok.
    
    (*
    Enum PrivacyScheme
    {
      ty_params := [];
      variants :=
        [
          {
            name := "DifferentialPrivacy";
            item := StructTuple [ Ty.path "picachv_core::policy::types::DpParam" ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_PrivacyScheme.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "picachv_core::policy::types::DpParam",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_PrivacyScheme.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_PrivacyScheme.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "DifferentialPrivacy" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_PrivacyScheme.
    
    Module Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_PrivacyScheme.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_PrivacyScheme.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_PrivacyScheme.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.path "picachv_core::policy::types::DpParam",
                            [ Ty.path "picachv_core::policy::types::DpParam" ],
                            "eq",
                            []
                          |),
                          [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_PrivacyScheme.
    
    Module Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_PrivacyScheme.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
      
      (* PartialOrd *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "picachv_core::policy::types::DpParam",
                            [ Ty.path "picachv_core::policy::types::DpParam" ],
                            "partial_cmp",
                            []
                          |),
                          [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_PrivacyScheme.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PrivacyScheme.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.read (|
                M.match_operator (|
                  M.read (| self |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "picachv_core::policy::types::DpParam" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "PrivacyScheme" |);
                              Value.Integer 0;
                              M.read (| Value.String "DifferentialPrivacy" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PrivacyScheme.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PrivacyScheme.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyScheme".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_enum",
                  [ Ty.path "picachv_core::policy::policy::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "PrivacyScheme" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'1::deserialize::VARIANTS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'1::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PrivacyScheme.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_UnaryTransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.associated; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    "serialize_struct",
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    M.read (| Value.String "UnaryTransformType" |);
                                    BinOp.Wrap.add
                                      Integer.Usize
                                      (M.rust_cast (Value.Bool false))
                                      (Value.Integer 1)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [ Ty.path "alloc::string::String" ]
                                |),
                                [
                                  __serde_state;
                                  M.read (| Value.String "name" |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::policy::UnaryTransformType",
                                    "name"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated,
                          [],
                          "end",
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_UnaryTransformType.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_UnaryTransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_struct",
                  [ Ty.path "picachv_core::policy::policy::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "UnaryTransformType" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'3::deserialize::FIELDS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'3::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_UnaryTransformType.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_BinaryTransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.associated; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    "serialize_struct",
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    M.read (| Value.String "BinaryTransformType" |);
                                    BinOp.Wrap.add
                                      Integer.Usize
                                      (BinOp.Wrap.add
                                        Integer.Usize
                                        (M.rust_cast (Value.Bool false))
                                        (Value.Integer 1))
                                      (Value.Integer 1)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [ Ty.path "alloc::string::String" ]
                                |),
                                [
                                  __serde_state;
                                  M.read (| Value.String "name" |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::policy::BinaryTransformType",
                                    "name"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::policy::types::AnyValue";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  __serde_state;
                                  M.read (| Value.String "arg" |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::policy::BinaryTransformType",
                                    "arg"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated,
                          [],
                          "end",
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_BinaryTransformType.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_BinaryTransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_struct",
                  [ Ty.path "picachv_core::policy::policy::_'5::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "BinaryTransformType" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'5::deserialize::FIELDS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'5::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_BinaryTransformType.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_TransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.read (|
                M.match_operator (|
                  M.read (| self |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::policy::TransformType::Unary",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "picachv_core::policy::policy::UnaryTransformType" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "TransformType" |);
                              Value.Integer 0;
                              M.read (| Value.String "Unary" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::policy::TransformType::Binary",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "picachv_core::policy::policy::BinaryTransformType" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "TransformType" |);
                              Value.Integer 1;
                              M.read (| Value.String "Binary" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::policy::policy::TransformType::Others"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_unit_variant",
                              []
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "TransformType" |);
                              Value.Integer 2;
                              M.read (| Value.String "Others" |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_TransformType.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_TransformType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_enum",
                  [ Ty.path "picachv_core::policy::policy::_'7::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "TransformType" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'7::deserialize::VARIANTS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'7::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_TransformType.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_AggType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.associated; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    "serialize_struct",
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    M.read (| Value.String "AggType" |);
                                    BinOp.Wrap.add
                                      Integer.Usize
                                      (BinOp.Wrap.add
                                        Integer.Usize
                                        (M.rust_cast (Value.Bool false))
                                        (Value.Integer 1))
                                      (Value.Integer 1)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [ Ty.path "picachv_core::constants::GroupByMethod" ]
                                |),
                                [
                                  __serde_state;
                                  M.read (| Value.String "how" |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::policy::AggType",
                                    "how"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  __serde_state;
                                  M.read (| Value.String "group_size" |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::policy::AggType",
                                    "group_size"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated,
                          [],
                          "end",
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_AggType.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_AggType.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_struct",
                  [ Ty.path "picachv_core::policy::policy::_'9::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "AggType" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'9::deserialize::FIELDS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'9::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_AggType.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_TransformOps.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformOps".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::ser::Serializer",
                  __S,
                  [],
                  "serialize_newtype_struct",
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [
                        Ty.path "picachv_core::policy::policy::TransformType";
                        Ty.path "std::hash::random::RandomState"
                      ]
                  ]
                |),
                [
                  M.read (| __serializer |);
                  M.read (| Value.String "TransformOps" |);
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::TransformOps",
                    0
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_TransformOps.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_TransformOps.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformOps".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_newtype_struct",
                  [ Ty.path "picachv_core::policy::policy::_'11::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "TransformOps" |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'11::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_TransformOps.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_AggOps.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggOps".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::ser::Serializer",
                  __S,
                  [],
                  "serialize_newtype_struct",
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [
                        Ty.path "picachv_core::policy::policy::AggType";
                        Ty.path "std::hash::random::RandomState"
                      ]
                  ]
                |),
                [
                  M.read (| __serializer |);
                  M.read (| Value.String "AggOps" |);
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::AggOps",
                    0
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_AggOps.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_AggOps.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggOps".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_newtype_struct",
                  [ Ty.path "picachv_core::policy::policy::_'13::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "AggOps" |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'13::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_AggOps.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PrivacyOp.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyOp".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::ser::Serializer",
                  __S,
                  [],
                  "serialize_newtype_struct",
                  [ Ty.path "picachv_core::policy::policy::PrivacyScheme" ]
                |),
                [
                  M.read (| __serializer |);
                  M.read (| Value.String "PrivacyOp" |);
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::PrivacyOp",
                    0
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PrivacyOp.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PrivacyOp.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyOp".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_newtype_struct",
                  [ Ty.path "picachv_core::policy::policy::_'15::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "PrivacyOp" |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'15::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PrivacyOp.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PolicyLabel.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.read (| self |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_unit_variant",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "PolicyLabel" |);
                                  Value.Integer 0;
                                  M.read (| Value.String "PolicyBot" |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                                "ops"
                              |) in
                            let ops := M.alloc (| γ0_0 |) in
                            let~ __serde_state :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            "serialize_struct_variant",
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            M.read (| Value.String "PolicyLabel" |);
                                            Value.Integer 1;
                                            M.read (| Value.String "PolicyTransform" |);
                                            BinOp.Wrap.add
                                              Integer.Usize
                                              (Value.Integer 0)
                                              (Value.Integer 1)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.associated; Ty.associated ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.associated
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::SerializeStructVariant",
                                          Ty.associated,
                                          [],
                                          "serialize_field",
                                          [ Ty.path "picachv_core::policy::policy::TransformOps" ]
                                        |),
                                        [
                                          __serde_state;
                                          M.read (| Value.String "ops" |);
                                          M.read (| ops |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStructVariant",
                                  Ty.associated,
                                  [],
                                  "end",
                                  []
                                |),
                                [ M.read (| __serde_state |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                                "ops"
                              |) in
                            let ops := M.alloc (| γ0_0 |) in
                            let~ __serde_state :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            "serialize_struct_variant",
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            M.read (| Value.String "PolicyLabel" |);
                                            Value.Integer 2;
                                            M.read (| Value.String "PolicyAgg" |);
                                            BinOp.Wrap.add
                                              Integer.Usize
                                              (Value.Integer 0)
                                              (Value.Integer 1)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.associated; Ty.associated ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.associated
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::SerializeStructVariant",
                                          Ty.associated,
                                          [],
                                          "serialize_field",
                                          [ Ty.path "picachv_core::policy::policy::AggOps" ]
                                        |),
                                        [
                                          __serde_state;
                                          M.read (| Value.String "ops" |);
                                          M.read (| ops |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStructVariant",
                                  Ty.associated,
                                  [],
                                  "end",
                                  []
                                |),
                                [ M.read (| __serde_state |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                                "ops"
                              |) in
                            let ops := M.alloc (| γ0_0 |) in
                            let~ __serde_state :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            "serialize_struct_variant",
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            M.read (| Value.String "PolicyLabel" |);
                                            Value.Integer 3;
                                            M.read (| Value.String "PolicyNoise" |);
                                            BinOp.Wrap.add
                                              Integer.Usize
                                              (Value.Integer 0)
                                              (Value.Integer 1)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.associated; Ty.associated ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.associated
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::SerializeStructVariant",
                                          Ty.associated,
                                          [],
                                          "serialize_field",
                                          [ Ty.path "picachv_core::policy::policy::PrivacyOp" ]
                                        |),
                                        [
                                          __serde_state;
                                          M.read (| Value.String "ops" |);
                                          M.read (| ops |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStructVariant",
                                  Ty.associated,
                                  [],
                                  "end",
                                  []
                                |),
                                [ M.read (| __serde_state |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_unit_variant",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "PolicyLabel" |);
                                  Value.Integer 4;
                                  M.read (| Value.String "PolicyTop" |)
                                ]
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_PolicyLabel.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PolicyLabel.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_enum",
                  [ Ty.path "picachv_core::policy::policy::_'17::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "PolicyLabel" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'17::deserialize::VARIANTS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'17::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_PolicyLabel.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_policy_Policy.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.read (| self |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "picachv_core::policy::policy::Policy::PolicyClean"
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_unit_variant",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "Policy" |);
                                  Value.Integer 0;
                                  M.read (| Value.String "PolicyClean" |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                "label"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                "next"
                              |) in
                            let label := M.alloc (| γ0_0 |) in
                            let next := M.alloc (| γ0_1 |) in
                            let~ __serde_state :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            "serialize_struct_variant",
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            M.read (| Value.String "Policy" |);
                                            Value.Integer 1;
                                            M.read (| Value.String "PolicyDeclassify" |);
                                            BinOp.Wrap.add
                                              Integer.Usize
                                              (BinOp.Wrap.add
                                                Integer.Usize
                                                (Value.Integer 0)
                                                (Value.Integer 1))
                                              (Value.Integer 1)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.associated; Ty.associated ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.associated
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::SerializeStructVariant",
                                          Ty.associated,
                                          [],
                                          "serialize_field",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path "picachv_core::policy::policy::PolicyLabel";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          __serde_state;
                                          M.read (| Value.String "label" |);
                                          M.read (| label |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.associated ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "serde::ser::SerializeStructVariant",
                                          Ty.associated,
                                          [],
                                          "serialize_field",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path "picachv_core::policy::policy::Policy";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          __serde_state;
                                          M.read (| Value.String "next" |);
                                          M.read (| next |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.associated; Ty.associated ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeStructVariant",
                                  Ty.associated,
                                  [],
                                  "end",
                                  []
                                |),
                                [ M.read (| __serde_state |) ]
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_policy_Policy.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_policy_Policy.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_enum",
                  [ Ty.path "picachv_core::policy::policy::_'19::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "Policy" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::policy::_'19::deserialize::VARIANTS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::policy::_'19::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_policy_Policy.
    End underscore.
    
    
    (* StructRecord
      {
        name := "UnaryTransformType";
        ty_params := [];
        fields := [ ("name", Ty.path "alloc::string::String") ];
      } *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "picachv_core::policy::policy::UnaryTransformType"
              [
                ("name",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "alloc::string::String",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::UnaryTransformType",
                        "name"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "UnaryTransformType" |);
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::UnaryTransformType",
                      "name"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "alloc::string::String",
                [ Ty.path "alloc::string::String" ],
                "eq",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::policy::policy::UnaryTransformType",
                  "name"
                |);
                M.SubPointer.get_struct_record_field (|
                  M.read (| other |),
                  "picachv_core::policy::policy::UnaryTransformType",
                  "name"
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_picachv_core_policy_policy_UnaryTransformType.
    
    Module Impl_core_hash_Hash_for_picachv_core_policy_policy_UnaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::UnaryTransformType".
      
      (* Hash *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::hash::Hash",
                Ty.path "alloc::string::String",
                [],
                "hash",
                [ __H ]
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::policy::policy::UnaryTransformType",
                  "name"
                |);
                M.read (| state |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_picachv_core_policy_policy_UnaryTransformType.
    
    
    
    (* StructRecord
      {
        name := "BinaryTransformType";
        ty_params := [];
        fields :=
          [
            ("name", Ty.path "alloc::string::String");
            ("arg",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "picachv_core::policy::types::AnyValue"; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "picachv_core::policy::policy::BinaryTransformType"
              [
                ("name",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "alloc::string::String",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::BinaryTransformType",
                        "name"
                      |)
                    ]
                  |));
                ("arg",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.path "picachv_core::policy::types::AnyValue";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::BinaryTransformType",
                        "arg"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "BinaryTransformType" |);
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::BinaryTransformType",
                    "name"
                  |));
                M.read (| Value.String "arg" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::BinaryTransformType",
                      "arg"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "alloc::string::String",
                  [ Ty.path "alloc::string::String" ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::BinaryTransformType",
                    "name"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "picachv_core::policy::policy::BinaryTransformType",
                    "name"
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::policy::types::AnyValue";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.path "picachv_core::policy::types::AnyValue";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::BinaryTransformType",
                      "arg"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "picachv_core::policy::policy::BinaryTransformType",
                      "arg"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_picachv_core_policy_policy_BinaryTransformType.
    
    Module Impl_core_hash_Hash_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (* Hash *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "alloc::string::String",
                      [],
                      "hash",
                      [ __H ]
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::BinaryTransformType",
                        "name"
                      |);
                      M.read (| state |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::policy::types::AnyValue";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "hash",
                    [ __H ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::BinaryTransformType",
                      "arg"
                    |);
                    M.read (| state |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_picachv_core_policy_policy_BinaryTransformType.
    
    
    
    (*
    Enum TransformType
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Unary";
            item := StructTuple [ Ty.path "picachv_core::policy::policy::UnaryTransformType" ];
            discriminant := None;
          };
          {
            name := "Binary";
            item := StructTuple [ Ty.path "picachv_core::policy::policy::BinaryTransformType" ];
            discriminant := None;
          };
          {
            name := "Others";
            item := StructTuple [];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Unary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::policy::TransformType::Unary"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "picachv_core::policy::policy::UnaryTransformType",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Binary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::policy::TransformType::Binary"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "picachv_core::policy::policy::BinaryTransformType",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Others"
                        |) in
                      M.alloc (|
                        Value.StructTuple "picachv_core::policy::policy::TransformType::Others" []
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Unary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Unary" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Binary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Binary" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Others"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            []
                          |),
                          [ M.read (| f |); M.read (| Value.String "Others" |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::policy::TransformType" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::policy::TransformType" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::policy::TransformType::Unary",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::policy::TransformType::Unary",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "picachv_core::policy::policy::UnaryTransformType",
                                    [ Ty.path "picachv_core::policy::policy::UnaryTransformType" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::policy::TransformType::Binary",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::policy::TransformType::Binary",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "picachv_core::policy::policy::BinaryTransformType",
                                    [ Ty.path "picachv_core::policy::policy::BinaryTransformType" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_picachv_core_policy_policy_TransformType.
    
    Module Impl_core_hash_Hash_for_picachv_core_policy_policy_TransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformType".
      
      (* Hash *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::policy::TransformType" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "isize",
                      [],
                      "hash",
                      [ __H ]
                    |),
                    [ __self_tag; M.read (| state |) ]
                  |)
                |) in
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Unary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "picachv_core::policy::policy::UnaryTransformType",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::policy::TransformType::Binary",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "picachv_core::policy::policy::BinaryTransformType",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_picachv_core_policy_policy_TransformType.
    
    
    
    (* StructRecord
      {
        name := "AggType";
        ty_params := [];
        fields :=
          [
            ("how", Ty.path "picachv_core::constants::GroupByMethod");
            ("group_size", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "picachv_core::policy::policy::AggType"
              [
                ("how",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "picachv_core::constants::GroupByMethod",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::AggType",
                        "how"
                      |)
                    ]
                  |));
                ("group_size",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::AggType",
                        "group_size"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_AggType.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AggType" |);
                M.read (| Value.String "how" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::policy::policy::AggType",
                    "how"
                  |));
                M.read (| Value.String "group_size" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::AggType",
                      "group_size"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_AggType.
    
    
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      (*
          fn eq(&self, other: &Self) -> bool {
              self.how == other.how
          }
      *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "picachv_core::constants::GroupByMethod",
                [ Ty.path "picachv_core::constants::GroupByMethod" ],
                "eq",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::policy::policy::AggType",
                  "how"
                |);
                M.SubPointer.get_struct_record_field (|
                  M.read (| other |),
                  "picachv_core::policy::policy::AggType",
                  "how"
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_AggType.
    
    Module Impl_core_hash_Hash_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      (*
          fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
              match self.how {
                  GroupByMethod::Median => "median".hash(state),
                  GroupByMethod::Mean => "mean".hash(state),
                  GroupByMethod::Sum => "sum".hash(state),
                  GroupByMethod::Min => "min".hash(state),
                  GroupByMethod::Max => "max".hash(state),
                  GroupByMethod::First => "first".hash(state),
                  GroupByMethod::Last => "last".hash(state),
                  GroupByMethod::NUnique => "nunique".hash(state),
                  GroupByMethod::Groups => "groups".hash(state),
                  GroupByMethod::NanMax => "nanmax".hash(state),
                  GroupByMethod::NanMin => "nanmin".hash(state),
                  GroupByMethod::Count { include_nulls } => {
                      if include_nulls {
                          "count".hash(state);
                      } else {
                          "count-nonnull".hash(state);
                      }
                  },
                  GroupByMethod::Quantile(percentage, op) => {
                      "quantile".hash(state);
                      OrderedFloat(percentage).hash(state);
                      op.hash(state);
                  },
                  GroupByMethod::Std(v) => {
                      "std".hash(state);
                      v.hash(state);
                  },
                  GroupByMethod::Var(v) => {
                      "var".hash(state);
                      v.hash(state);
                  },
                  GroupByMethod::Implode => "implode".hash(state),
              }
      
              // self.group_size.hash(state);
          }
      *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              M.match_operator (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::policy::policy::AggType",
                  "how"
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Median"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "median" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Mean" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "mean" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Sum" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "sum" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Min" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "min" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Max" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "max" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::First"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "first" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::constants::GroupByMethod::Last" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "last" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::NUnique"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "nunique" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Groups"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "groups" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::NanMax"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "nanmax" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::NanMin"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "nanmin" |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Count",
                          "include_nulls"
                        |) in
                      let include_nulls := M.copy (| γ0_0 |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use include_nulls in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::hash::Hash",
                                      Ty.path "str",
                                      [],
                                      "hash",
                                      [ H ]
                                    |),
                                    [ M.read (| Value.String "count" |); M.read (| state |) ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let~ _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::hash::Hash",
                                      Ty.path "str",
                                      [],
                                      "hash",
                                      [ H ]
                                    |),
                                    [ M.read (| Value.String "count-nonnull" |); M.read (| state |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Quantile",
                          0
                        |) in
                      let γ0_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Quantile",
                          1
                        |) in
                      let percentage := M.copy (| γ0_0 |) in
                      let op := M.copy (| γ0_1 |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "str",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ M.read (| Value.String "quantile" |); M.read (| state |) ]
                          |)
                        |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ],
                              [],
                              "hash",
                              [ H ]
                            |),
                            [
                              M.alloc (|
                                Value.StructTuple
                                  "ordered_float::OrderedFloat"
                                  [ M.read (| percentage |) ]
                              |);
                              M.read (| state |)
                            ]
                          |)
                        |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "picachv_core::constants::QuantileInterpolOptions",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ op; M.read (| state |) ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Std",
                          0
                        |) in
                      let v := M.copy (| γ0_0 |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "str",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ M.read (| Value.String "std" |); M.read (| state |) ]
                          |)
                        |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "u8",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ v; M.read (| state |) ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Var",
                          0
                        |) in
                      let v := M.copy (| γ0_0 |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "str",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ M.read (| Value.String "var" |); M.read (| state |) ]
                          |)
                        |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::hash::Hash",
                              Ty.path "u8",
                              [],
                              "hash",
                              [ H ]
                            |),
                            [ v; M.read (| state |) ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::constants::GroupByMethod::Implode"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "str",
                            [],
                            "hash",
                            [ H ]
                          |),
                          [ M.read (| Value.String "implode" |); M.read (| state |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_picachv_core_policy_policy_AggType.
    
    Module Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      (*
          fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
              match self.how == other.how {
                  true => self.group_size.partial_cmp(&other.group_size),
                  false => None,
              }
          }
      *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "picachv_core::constants::GroupByMethod",
                      [ Ty.path "picachv_core::constants::GroupByMethod" ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::AggType",
                        "how"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "picachv_core::policy::policy::AggType",
                        "how"
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "usize",
                            [ Ty.path "usize" ],
                            "partial_cmp",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "picachv_core::policy::policy::AggType",
                              "group_size"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "picachv_core::policy::policy::AggType",
                              "group_size"
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.is_constant_or_break_match (| M.read (| γ |), Value.Bool false |) in
                      M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_AggType.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_policy_AggType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggType".
      
      Axiom Implements :
        M.IsTraitInstance "core::cmp::Eq" Self (* Trait polymorphic types *) [] (* Instance *) [].
    End Impl_core_cmp_Eq_for_picachv_core_policy_policy_AggType.
    
    (* Trait *)
    Module SetLike.
      Definition set_eq (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                M.get_trait_method (|
                  "picachv_core::policy::policy::SetLike",
                  Self,
                  [],
                  "is_subset",
                  []
                |),
                [ M.read (| self |); M.read (| other |) ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "picachv_core::policy::policy::SetLike",
                    Self,
                    [],
                    "is_subset",
                    []
                  |),
                  [ M.read (| other |); M.read (| self |) ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_set_eq :
        M.IsProvidedMethod "picachv_core::policy::policy::SetLike" "set_eq" set_eq.
    End SetLike.
    
    (* StructTuple
      {
        name := "TransformOps";
        ty_params := [];
        fields :=
          [
            Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [
                Ty.path "picachv_core::policy::policy::TransformType";
                Ty.path "std::hash::random::RandomState"
              ]
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_TransformOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformOps".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "TransformOps" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::TransformOps",
                      0
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_TransformOps.
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_TransformOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformOps".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "picachv_core::policy::policy::TransformOps"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [
                        Ty.path "picachv_core::policy::policy::TransformType";
                        Ty.path "std::hash::random::RandomState"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::TransformOps",
                      0
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_TransformOps.
    
    
    
    (* StructTuple
      {
        name := "AggOps";
        ty_params := [];
        fields :=
          [
            Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [
                Ty.path "picachv_core::policy::policy::AggType";
                Ty.path "std::hash::random::RandomState"
              ]
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_AggOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggOps".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AggOps" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::AggOps",
                      0
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_AggOps.
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_AggOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggOps".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "picachv_core::policy::policy::AggOps"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [
                        Ty.path "picachv_core::policy::policy::AggType";
                        Ty.path "std::hash::random::RandomState"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::AggOps",
                      0
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_AggOps.
    
    
    
    (* StructTuple
      {
        name := "PrivacyOp";
        ty_params := [];
        fields := [ Ty.path "picachv_core::policy::policy::PrivacyScheme" ];
      } *)
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_PrivacyOp.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyOp".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "PrivacyOp" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::PrivacyOp",
                      0
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_PrivacyOp.
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_PrivacyOp.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyOp".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "picachv_core::policy::policy::PrivacyOp"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "picachv_core::policy::policy::PrivacyScheme",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::policy::PrivacyOp",
                      0
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_PrivacyOp.
    
    
    
    Module Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_TransformOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::TransformOps".
      
      (*
          fn is_subset(&self, other: &Self) -> bool {
              self.0.iter().all(|op| other.0.contains(op))
          }
      *)
      Definition is_subset (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "std::collections::hash::set::Iter")
                  [ Ty.path "picachv_core::policy::policy::TransformType" ],
                [],
                "all",
                [
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "&")
                            [ Ty.path "picachv_core::policy::policy::TransformType" ]
                        ]
                    ]
                    (Ty.path "bool")
                ]
              |),
              [
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "picachv_core::policy::policy::TransformType";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      "iter",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::TransformOps",
                        0
                      |)
                    ]
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let op := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::collections::hash::set::HashSet")
                                      [
                                        Ty.path "picachv_core::policy::policy::TransformType";
                                        Ty.path "std::hash::random::RandomState"
                                      ],
                                    "contains",
                                    [ Ty.path "picachv_core::policy::policy::TransformType" ]
                                  |),
                                  [
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.read (| other |),
                                      "picachv_core::policy::policy::TransformOps",
                                      0
                                    |);
                                    M.read (| op |)
                                  ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn intersection(&self, other: &Self) -> Self {
              TransformOps(self.0.intersection(&other.0).cloned().collect())
          }
      *)
      Definition intersection (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "picachv_core::policy::policy::TransformOps"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Intersection")
                          [
                            Ty.path "picachv_core::policy::policy::TransformType";
                            Ty.path "std::hash::random::RandomState"
                          ]
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "picachv_core::policy::policy::TransformType";
                          Ty.path "std::hash::random::RandomState"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Intersection")
                          [
                            Ty.path "picachv_core::policy::policy::TransformType";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        [],
                        "cloned",
                        [ Ty.path "picachv_core::policy::policy::TransformType" ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::set::HashSet")
                              [
                                Ty.path "picachv_core::policy::policy::TransformType";
                                Ty.path "std::hash::random::RandomState"
                              ],
                            "intersection",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| self |),
                              "picachv_core::policy::policy::TransformOps",
                              0
                            |);
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| other |),
                              "picachv_core::policy::policy::TransformOps",
                              0
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      (*
          fn union(&self, other: &Self) -> Self {
              TransformOps(self.0.union(&other.0).cloned().collect())
          }
      *)
      Definition union (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "picachv_core::policy::policy::TransformOps"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Union")
                          [
                            Ty.path "picachv_core::policy::policy::TransformType";
                            Ty.path "std::hash::random::RandomState"
                          ]
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "picachv_core::policy::policy::TransformType";
                          Ty.path "std::hash::random::RandomState"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Union")
                          [
                            Ty.path "picachv_core::policy::policy::TransformType";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        [],
                        "cloned",
                        [ Ty.path "picachv_core::policy::policy::TransformType" ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::set::HashSet")
                              [
                                Ty.path "picachv_core::policy::policy::TransformType";
                                Ty.path "std::hash::random::RandomState"
                              ],
                            "union",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| self |),
                              "picachv_core::policy::policy::TransformOps",
                              0
                            |);
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| other |),
                              "picachv_core::policy::policy::TransformOps",
                              0
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "picachv_core::policy::policy::SetLike"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [
            ("is_subset", InstanceField.Method is_subset);
            ("intersection", InstanceField.Method intersection);
            ("union", InstanceField.Method union)
          ].
    End Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_TransformOps.
    
    Module Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_AggOps.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::AggOps".
      
      (*
          fn is_subset(&self, other: &Self) -> bool {
              self.0.iter().all(|op| other.0.contains(op))
          }
      *)
      Definition is_subset (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "std::collections::hash::set::Iter")
                  [ Ty.path "picachv_core::policy::policy::AggType" ],
                [],
                "all",
                [
                  Ty.function
                    [
                      Ty.tuple
                        [ Ty.apply (Ty.path "&") [ Ty.path "picachv_core::policy::policy::AggType" ]
                        ]
                    ]
                    (Ty.path "bool")
                ]
              |),
              [
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "picachv_core::policy::policy::AggType";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      "iter",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "picachv_core::policy::policy::AggOps",
                        0
                      |)
                    ]
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let op := M.copy (| γ |) in
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::collections::hash::set::HashSet")
                                      [
                                        Ty.path "picachv_core::policy::policy::AggType";
                                        Ty.path "std::hash::random::RandomState"
                                      ],
                                    "contains",
                                    [ Ty.path "picachv_core::policy::policy::AggType" ]
                                  |),
                                  [
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.read (| other |),
                                      "picachv_core::policy::policy::AggOps",
                                      0
                                    |);
                                    M.read (| op |)
                                  ]
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn intersection(&self, other: &Self) -> Self {
              let mut v = vec![];
              for item in other.0.iter() {
                  if let Some(this) = self.0.get(item) {
                      v.push(AggType {
                          how: this.how,
                          group_size: this.group_size.max(item.group_size),
                      })
                  }
              }
      
              AggOps(v.into_iter().collect())
          }
      *)
      Definition intersection (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ v :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path "picachv_core::policy::policy::AggType";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let~ _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "std::collections::hash::set::Iter")
                            [ Ty.path "picachv_core::policy::policy::AggType" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                [
                                  Ty.path "picachv_core::policy::policy::AggType";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_tuple_field (|
                                M.read (| other |),
                                "picachv_core::policy::policy::AggOps",
                                0
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let~ _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "std::collections::hash::set::Iter")
                                          [ Ty.path "picachv_core::policy::policy::AggType" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let item := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "std::collections::hash::set::HashSet")
                                                          [
                                                            Ty.path
                                                              "picachv_core::policy::policy::AggType";
                                                            Ty.path "std::hash::random::RandomState"
                                                          ],
                                                        "get",
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::AggType"
                                                        ]
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          M.read (| self |),
                                                          "picachv_core::policy::policy::AggOps",
                                                          0
                                                        |);
                                                        M.read (| item |)
                                                      ]
                                                    |)
                                                  |) in
                                                let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let this := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::AggType";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "push",
                                                      []
                                                    |),
                                                    [
                                                      v;
                                                      Value.StructRecord
                                                        "picachv_core::policy::policy::AggType"
                                                        [
                                                          ("how",
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| this |),
                                                                "picachv_core::policy::policy::AggType",
                                                                "how"
                                                              |)
                                                            |));
                                                          ("group_size",
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::Ord",
                                                                Ty.path "usize",
                                                                [],
                                                                "max",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| this |),
                                                                    "picachv_core::policy::policy::AggType",
                                                                    "group_size"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| item |),
                                                                    "picachv_core::policy::policy::AggType",
                                                                    "group_size"
                                                                  |)
                                                                |)
                                                              ]
                                                            |))
                                                        ]
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (|
                Value.StructTuple
                  "picachv_core::policy::policy::AggOps"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [
                            Ty.path "picachv_core::policy::policy::AggType";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "std::collections::hash::set::HashSet")
                            [
                              Ty.path "picachv_core::policy::policy::AggType";
                              Ty.path "std::hash::random::RandomState"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "picachv_core::policy::policy::AggType";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [ M.read (| v |) ]
                        |)
                      ]
                    |)
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn union(&self, other: &Self) -> Self {
              AggOps(self.0.union(&other.0).cloned().collect())
          }
      *)
      Definition union (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "picachv_core::policy::policy::AggOps"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::cloned::Cloned")
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Union")
                          [
                            Ty.path "picachv_core::policy::policy::AggType";
                            Ty.path "std::hash::random::RandomState"
                          ]
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.path "picachv_core::policy::policy::AggType";
                          Ty.path "std::hash::random::RandomState"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "std::collections::hash::set::Union")
                          [
                            Ty.path "picachv_core::policy::policy::AggType";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        [],
                        "cloned",
                        [ Ty.path "picachv_core::policy::policy::AggType" ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::set::HashSet")
                              [
                                Ty.path "picachv_core::policy::policy::AggType";
                                Ty.path "std::hash::random::RandomState"
                              ],
                            "union",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| self |),
                              "picachv_core::policy::policy::AggOps",
                              0
                            |);
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| other |),
                              "picachv_core::policy::policy::AggOps",
                              0
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "picachv_core::policy::policy::SetLike"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [
            ("is_subset", InstanceField.Method is_subset);
            ("intersection", InstanceField.Method intersection);
            ("union", InstanceField.Method union)
          ].
    End Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_AggOps.
    
    Module Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_PrivacyOp.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PrivacyOp".
      
      (*
          fn is_subset(&self, other: &Self) -> bool {
              self.0 <= other.0
          }
      *)
      Definition is_subset (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::cmp::PartialOrd",
                Ty.path "picachv_core::policy::policy::PrivacyScheme",
                [ Ty.path "picachv_core::policy::policy::PrivacyScheme" ],
                "le",
                []
              |),
              [
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "picachv_core::policy::policy::PrivacyOp",
                  0
                |);
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| other |),
                  "picachv_core::policy::policy::PrivacyOp",
                  0
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn intersection(&self, other: &Self) -> Self {
              PrivacyOp(match (&self.0, &other.0) {
                  (PrivacyScheme::DifferentialPrivacy(lhs), PrivacyScheme::DifferentialPrivacy(rhs)) => {
                      PrivacyScheme::DifferentialPrivacy( *lhs.min(rhs))
                  },
              })
          }
      *)
      Definition intersection (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "picachv_core::policy::policy::PrivacyOp"
              [
                M.read (|
                  M.match_operator (|
                    M.alloc (|
                      Value.Tuple
                        [
                          M.SubPointer.get_struct_tuple_field (|
                            M.read (| self |),
                            "picachv_core::policy::policy::PrivacyOp",
                            0
                          |);
                          M.SubPointer.get_struct_tuple_field (|
                            M.read (| other |),
                            "picachv_core::policy::policy::PrivacyOp",
                            0
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_0,
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                              0
                            |) in
                          let lhs := M.alloc (| γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_1,
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                              0
                            |) in
                          let rhs := M.alloc (| γ2_0 |) in
                          M.alloc (|
                            Value.StructTuple
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy"
                              [
                                M.read (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::Ord",
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "picachv_core::policy::types::DpParam" ],
                                      [],
                                      "min",
                                      []
                                    |),
                                    [ M.read (| lhs |); M.read (| rhs |) ]
                                  |)
                                |)
                              ]
                          |)))
                    ]
                  |)
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      (*
          fn union(&self, other: &Self) -> Self {
              PrivacyOp(match (&self.0, &other.0) {
                  (PrivacyScheme::DifferentialPrivacy(lhs), PrivacyScheme::DifferentialPrivacy(rhs)) => {
                      PrivacyScheme::DifferentialPrivacy( *lhs.max(rhs))
                  },
              })
          }
      *)
      Definition union (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "picachv_core::policy::policy::PrivacyOp"
              [
                M.read (|
                  M.match_operator (|
                    M.alloc (|
                      Value.Tuple
                        [
                          M.SubPointer.get_struct_tuple_field (|
                            M.read (| self |),
                            "picachv_core::policy::policy::PrivacyOp",
                            0
                          |);
                          M.SubPointer.get_struct_tuple_field (|
                            M.read (| other |),
                            "picachv_core::policy::policy::PrivacyOp",
                            0
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_0,
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                              0
                            |) in
                          let lhs := M.alloc (| γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_1,
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy",
                              0
                            |) in
                          let rhs := M.alloc (| γ2_0 |) in
                          M.alloc (|
                            Value.StructTuple
                              "picachv_core::policy::policy::PrivacyScheme::DifferentialPrivacy"
                              [
                                M.read (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::Ord",
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "picachv_core::policy::types::DpParam" ],
                                      [],
                                      "max",
                                      []
                                    |),
                                    [ M.read (| lhs |); M.read (| rhs |) ]
                                  |)
                                |)
                              ]
                          |)))
                    ]
                  |)
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "picachv_core::policy::policy::SetLike"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [
            ("is_subset", InstanceField.Method is_subset);
            ("intersection", InstanceField.Method intersection);
            ("union", InstanceField.Method union)
          ].
    End Impl_picachv_core_policy_policy_SetLike_for_picachv_core_policy_policy_PrivacyOp.
    
    (*
    Enum PolicyLabel
    {
      ty_params := [];
      variants :=
        [
          {
            name := "PolicyBot";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "PolicyTransform";
            item := StructRecord [ ("ops", Ty.path "picachv_core::policy::policy::TransformOps") ];
            discriminant := None;
          };
          {
            name := "PolicyAgg";
            item := StructRecord [ ("ops", Ty.path "picachv_core::policy::policy::AggOps") ];
            discriminant := None;
          };
          {
            name := "PolicyNoise";
            item := StructRecord [ ("ops", Ty.path "picachv_core::policy::policy::PrivacyOp") ];
            discriminant := None;
          };
          {
            name := "PolicyTop";
            item := StructTuple [];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        Value.StructTuple "picachv_core::policy::policy::PolicyLabel::PolicyBot" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "picachv_core::policy::policy::TransformOps",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "picachv_core::policy::policy::AggOps",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "picachv_core::policy::policy::PrivacyOp",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                        |) in
                      M.alloc (|
                        Value.StructTuple "picachv_core::policy::policy::PolicyLabel::PolicyTop" []
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_PolicyLabel.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            []
                          |),
                          [ M.read (| f |); M.read (| Value.String "PolicyBot" |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "PolicyTransform" |);
                            M.read (| Value.String "ops" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "PolicyAgg" |);
                            M.read (| Value.String "ops" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "PolicyNoise" |);
                            M.read (| Value.String "ops" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            []
                          |),
                          [ M.read (| f |); M.read (| Value.String "PolicyTop" |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_PolicyLabel.
    
    
    
    (*
    Enum Policy
    {
      ty_params := [];
      variants :=
        [
          {
            name := "PolicyClean";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "PolicyDeclassify";
            item :=
              StructRecord
                [
                  ("label",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::policy::policy::PolicyLabel";
                        Ty.path "alloc::alloc::Global"
                      ]);
                  ("next",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.path "picachv_core::policy::policy::Policy";
                        Ty.path "alloc::alloc::Global"
                      ])
                ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyClean"
                        |) in
                      M.alloc (|
                        Value.StructTuple "picachv_core::policy::policy::Policy::PolicyClean" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "label"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "next"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::Policy::PolicyDeclassify"
                          [
                            ("label",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::PolicyLabel";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |));
                            ("next",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::Policy";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_1 |) ]
                              |))
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_policy_Policy.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyClean"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            []
                          |),
                          [ M.read (| f |); M.read (| Value.String "PolicyClean" |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "label"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "next"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "PolicyDeclassify" |);
                            M.read (| Value.String "label" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            M.read (| Value.String "next" |);
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_policy_Policy.
    
    
    
    Module Impl_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (*
          pub fn can_declassify(&self, other: &Self) -> bool {
              match &(self, other) {
                  (PolicyLabel::PolicyBot, _) => true,
                  (
                      PolicyLabel::PolicyTransform { ops: lhs },
                      PolicyLabel::PolicyTransform { ops: rhs },
                  ) => rhs.is_subset(lhs),
                  (PolicyLabel::PolicyAgg { ops: lhs }, PolicyLabel::PolicyAgg { ops: rhs }) => {
                      rhs.is_subset(lhs)
                  },
                  (PolicyLabel::PolicyNoise { ops: lhs }, PolicyLabel::PolicyNoise { ops: rhs }) => {
                      rhs.is_subset(lhs)
                  },
                  (lhs, rhs) => lhs == rhs,
              }
          }
      *)
      Definition can_declassify (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |) |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 := M.read (| γ1_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ1_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 := M.read (| γ1_0 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ3_0 |) in
                      let γ1_1 := M.read (| γ1_1 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ3_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "picachv_core::policy::policy::SetLike",
                            Ty.path "picachv_core::policy::policy::TransformOps",
                            [],
                            "is_subset",
                            []
                          |),
                          [ M.read (| rhs |); M.read (| lhs |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 := M.read (| γ1_0 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ3_0 |) in
                      let γ1_1 := M.read (| γ1_1 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ3_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "picachv_core::policy::policy::SetLike",
                            Ty.path "picachv_core::policy::policy::AggOps",
                            [],
                            "is_subset",
                            []
                          |),
                          [ M.read (| rhs |); M.read (| lhs |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 := M.read (| γ1_0 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ3_0 |) in
                      let γ1_1 := M.read (| γ1_1 |) in
                      let γ3_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ1_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ3_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "picachv_core::policy::policy::SetLike",
                            Ty.path "picachv_core::policy::policy::PrivacyOp",
                            [],
                            "is_subset",
                            []
                          |),
                          [ M.read (| rhs |); M.read (| lhs |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let lhs := M.alloc (| γ1_0 |) in
                      let rhs := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "picachv_core::policy::policy::PolicyLabel" ]
                              ],
                            [
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.path "picachv_core::policy::policy::PolicyLabel" ]
                                ]
                            ],
                            "eq",
                            []
                          |),
                          [ lhs; rhs ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_can_declassify :
        M.IsAssociatedFunction Self "can_declassify" can_declassify.
      
      (*
          pub fn base_eq(&self, other: &Self) -> bool {
              matches!(
                  (self, other),
                  (PolicyLabel::PolicyBot, PolicyLabel::PolicyBot)
                      | (
                          PolicyLabel::PolicyTransform { .. },
                          PolicyLabel::PolicyTransform { .. }
                      )
                      | (PolicyLabel::PolicyAgg { .. }, PolicyLabel::PolicyAgg { .. })
                      | (
                          PolicyLabel::PolicyNoise { .. },
                          PolicyLabel::PolicyNoise { .. }
                      )
                      | (PolicyLabel::PolicyTop, PolicyLabel::PolicyTop)
              )
          }
      *)
      Definition base_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                                |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_1,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                                |) in
                              Value.Tuple []))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [] => M.alloc (| Value.Bool true |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_base_eq : M.IsAssociatedFunction Self "base_eq" base_eq.
    End Impl_picachv_core_policy_policy_PolicyLabel.
    
    Module Impl_core_fmt_Display_for_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  PolicyLabel::PolicyBot => write!(f, "⊥"),
                  PolicyLabel::PolicyTransform { ops } => write!(f, "Transform({:?})", ops),
                  PolicyLabel::PolicyAgg { ops } => write!(f, "Agg({:?})", ops),
                  PolicyLabel::PolicyNoise { ops } => write!(f, "Noise({:?})", ops),
                  PolicyLabel::PolicyTop => write!(f, "⊤"),
              }
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [ M.read (| Value.String (String.String "165" "") |) ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let ops := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "Transform(" |);
                                        M.read (| Value.String ")" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "picachv_core::policy::policy::TransformOps"
                                                ]
                                            ]
                                          |),
                                          [ ops ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let ops := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "Agg(" |);
                                        M.read (| Value.String ")" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.path "picachv_core::policy::policy::AggOps" ]
                                            ]
                                          |),
                                          [ ops ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let ops := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "Noise(" |);
                                        M.read (| Value.String ")" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.path "picachv_core::policy::policy::PrivacyOp"
                                                ]
                                            ]
                                          |),
                                          [ ops ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [ M.read (| Value.String (String.String "164" "") |) ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_picachv_core_policy_policy_PolicyLabel.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (*
          fn eq(&self, other: &Self) -> bool {
              match (self, other) {
                  (PolicyLabel::PolicyBot, PolicyLabel::PolicyBot)
                  | (PolicyLabel::PolicyTop, PolicyLabel::PolicyTop) => true,
                  (
                      PolicyLabel::PolicyTransform { ops: lhs },
                      PolicyLabel::PolicyTransform { ops: rhs },
                  ) => lhs.set_eq(rhs),
                  (PolicyLabel::PolicyAgg { ops: lhs }, PolicyLabel::PolicyAgg { ops: rhs }) => {
                      for l in lhs.0.iter() {
                          match rhs.0.get(l) {
                              None => return false,
                              Some(r) => {
                                  if l.group_size != r.group_size {
                                      return false;
                                  }
                              },
                          }
                      }
      
                      true
                  },
                  (PolicyLabel::PolicyNoise { ops: lhs }, PolicyLabel::PolicyNoise { ops: rhs }) => {
                      lhs.set_eq(rhs)
                  },
                  _ => false,
              }
          }
      *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let γ0_0 := M.read (| γ0_0 |) in
                                  let _ :=
                                    M.is_struct_tuple (|
                                      γ0_0,
                                      "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                    |) in
                                  let γ0_1 := M.read (| γ0_1 |) in
                                  let _ :=
                                    M.is_struct_tuple (|
                                      γ0_1,
                                      "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                    |) in
                                  Value.Tuple []));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let γ0_0 := M.read (| γ0_0 |) in
                                  let _ :=
                                    M.is_struct_tuple (|
                                      γ0_0,
                                      "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                                    |) in
                                  let γ0_1 := M.read (| γ0_1 |) in
                                  let _ :=
                                    M.is_struct_tuple (|
                                      γ0_1,
                                      "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                                    |) in
                                  Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] => M.alloc (| Value.Bool true |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                              "ops"
                            |) in
                          let lhs := M.alloc (| γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_1,
                              "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                              "ops"
                            |) in
                          let rhs := M.alloc (| γ2_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "picachv_core::policy::policy::SetLike",
                                Ty.path "picachv_core::policy::policy::TransformOps",
                                [],
                                "set_eq",
                                []
                              |),
                              [ M.read (| lhs |); M.read (| rhs |) ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                              "ops"
                            |) in
                          let lhs := M.alloc (| γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_1,
                              "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                              "ops"
                            |) in
                          let rhs := M.alloc (| γ2_0 |) in
                          let~ _ :=
                            M.use
                              (M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "std::collections::hash::set::Iter")
                                        [ Ty.path "picachv_core::policy::policy::AggType" ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "std::collections::hash::set::HashSet")
                                            [
                                              Ty.path "picachv_core::policy::policy::AggType";
                                              Ty.path "std::hash::random::RandomState"
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.read (| lhs |),
                                            "picachv_core::policy::policy::AggOps",
                                            0
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter := M.copy (| γ |) in
                                      M.loop (|
                                        ltac:(M.monadic
                                          (let~ _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "std::collections::hash::set::Iter")
                                                      [
                                                        Ty.path
                                                          "picachv_core::policy::policy::AggType"
                                                      ],
                                                    [],
                                                    "next",
                                                    []
                                                  |),
                                                  [ iter ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "core::option::Option::None"
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (| M.read (| M.break (||) |) |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let l := M.copy (| γ0_0 |) in
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::collections::hash::set::HashSet")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::policy::policy::AggType";
                                                                Ty.path
                                                                  "std::hash::random::RandomState"
                                                              ],
                                                            "get",
                                                            [
                                                              Ty.path
                                                                "picachv_core::policy::policy::AggType"
                                                            ]
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              M.read (| rhs |),
                                                              "picachv_core::policy::policy::AggOps",
                                                              0
                                                            |);
                                                            M.read (| l |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (| Value.Bool false |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let r := M.copy (| γ0_0 |) in
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          BinOp.Pure.ne
                                                                            (M.read (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| l |),
                                                                                "picachv_core::policy::policy::AggType",
                                                                                "group_size"
                                                                              |)
                                                                            |))
                                                                            (M.read (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| r |),
                                                                                "picachv_core::policy::policy::AggType",
                                                                                "group_size"
                                                                              |)
                                                                            |))
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            Value.Bool false
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                      |)))
                                ]
                              |)) in
                          M.alloc (| Value.Bool true |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                              "ops"
                            |) in
                          let lhs := M.alloc (| γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_1,
                              "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                              "ops"
                            |) in
                          let rhs := M.alloc (| γ2_0 |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "picachv_core::policy::policy::SetLike",
                                Ty.path "picachv_core::policy::policy::PrivacyOp",
                                [],
                                "set_eq",
                                []
                              |),
                              [ M.read (| lhs |); M.read (| rhs |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_PolicyLabel.
    
    Module Impl_picachv_core_policy_lattice_Lattice_for_picachv_core_policy_policy_PolicyLabel.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::PolicyLabel".
      
      (*
          fn join(&self, other: &Self) -> Self {
              match (self, other) {
                  (PolicyLabel::PolicyBot, _) => other.clone(),
                  (PolicyLabel::PolicyTransform { .. }, PolicyLabel::PolicyBot) => self.clone(),
                  (
                      PolicyLabel::PolicyTransform { ops: lhs },
                      PolicyLabel::PolicyTransform { ops: rhs },
                  ) => PolicyLabel::PolicyTransform {
                      ops: lhs.intersection(rhs),
                  },
                  (PolicyLabel::PolicyTransform { .. }, _) => other.clone(),
                  (
                      PolicyLabel::PolicyAgg { .. },
                      PolicyLabel::PolicyBot | PolicyLabel::PolicyTransform { .. },
                  ) => self.clone(),
                  (PolicyLabel::PolicyAgg { ops: lhs }, PolicyLabel::PolicyAgg { ops: rhs }) => {
                      PolicyLabel::PolicyAgg {
                          ops: {
                              let res = lhs.intersection(rhs);
                              tracing::debug!("agg join: {:?} vs {:?} => {:?}", lhs, rhs, res);
                              res
                          },
                      }
                  },
                  (PolicyLabel::PolicyAgg { .. }, _) => other.clone(),
                  (
                      PolicyLabel::PolicyNoise { .. },
                      PolicyLabel::PolicyBot
                      | PolicyLabel::PolicyTransform { .. }
                      | PolicyLabel::PolicyAgg { .. },
                  ) => self.clone(),
                  (PolicyLabel::PolicyNoise { ops: lhs }, PolicyLabel::PolicyNoise { ops: rhs }) => {
                      PolicyLabel::PolicyNoise {
                          ops: lhs.intersection(rhs),
                      }
                  },
                  (PolicyLabel::PolicyNoise { .. }, _) => other.clone(),
                  (PolicyLabel::PolicyTop, _) => self.clone(),
              }
          }
      *)
      Definition join (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                        |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::policy::SetLike",
                                  Ty.path "picachv_core::policy::policy::TransformOps",
                                  [],
                                  "intersection",
                                  []
                                |),
                                [ M.read (| lhs |); M.read (| rhs |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                        |) in
                      M.find_or_pattern (|
                        γ0_1,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              Value.Tuple []))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path "picachv_core::policy::policy::PolicyLabel",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                          [
                            ("ops",
                              M.read (|
                                let~ res :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "picachv_core::policy::policy::SetLike",
                                        Ty.path "picachv_core::policy::policy::AggOps",
                                        [],
                                        "intersection",
                                        []
                                      |),
                                      [ M.read (| lhs |); M.read (| rhs |) ]
                                    |)
                                  |) in
                                let~ _ :=
                                  let~ enabled :=
                                    M.alloc (|
                                      LogicalOp.and (|
                                        LogicalOp.and (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialOrd",
                                              Ty.path "tracing_core::metadata::Level",
                                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                              "le",
                                              []
                                            |),
                                            [
                                              M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                              M.get_constant (|
                                                "tracing::level_filters::STATIC_MAX_LEVEL"
                                              |)
                                            ]
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialOrd",
                                                Ty.path "tracing_core::metadata::Level",
                                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                                "le",
                                                []
                                              |),
                                              [
                                                M.get_constant (|
                                                  "tracing_core::metadata::DEBUG"
                                                |);
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::LevelFilter",
                                                      "current",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              ]
                                            |)))
                                        |),
                                        ltac:(M.monadic
                                          (M.read (|
                                            let~ interest :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    "interest",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.get_constant (|
                                                        "picachv_core::policy::policy::join::__CALLSITE"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              LogicalOp.and (|
                                                UnOp.Pure.not
                                                  (M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::subscriber::Interest",
                                                      "is_never",
                                                      []
                                                    |),
                                                    [ interest ]
                                                  |)),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          "metadata",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "picachv_core::policy::policy::join::__CALLSITE"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)
                                          |)))
                                      |)
                                    |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.use enabled in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::function::Fn",
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                                    ]
                                                    (Ty.tuple []),
                                                  [
                                                    Ty.tuple
                                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                                  ],
                                                  "call",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let value_set :=
                                                                      M.copy (| γ |) in
                                                                    M.read (|
                                                                      let~ meta :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "tracing_core::callsite::Callsite",
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite",
                                                                              [],
                                                                              "metadata",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.get_constant (|
                                                                                  "picachv_core::policy::policy::join::__CALLSITE"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let~ _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "tracing_core::event::Event",
                                                                              "dispatch",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| meta |);
                                                                              value_set
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  |);
                                                  Value.Tuple
                                                    [
                                                      M.read (|
                                                        let~ iter :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "tracing_core::callsite::Callsite",
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite",
                                                                        [],
                                                                        "metadata",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (|
                                                                          M.get_constant (|
                                                                            "picachv_core::policy::policy::join::__CALLSITE"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "value_set",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "tracing_core::callsite::Callsite",
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      [],
                                                                      "metadata",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.get_constant (|
                                                                          "picachv_core::policy::policy::join::__CALLSITE"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    Value.Tuple
                                                                      [
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field"
                                                                                ],
                                                                              "expect",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.path
                                                                                    "tracing_core::field::Iter",
                                                                                  [],
                                                                                  "next",
                                                                                  []
                                                                                |),
                                                                                [ iter ]
                                                                              |);
                                                                              M.read (|
                                                                                Value.String
                                                                                  "FieldSet corrupted (this is a bug)"
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::Some"
                                                                          [
                                                                            M.read (|
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  (* Unsize *)
                                                                                  M.pointer_coercion
                                                                                    (M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::Arguments",
                                                                                          "new_v1",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          (* Unsize *)
                                                                                          M.pointer_coercion
                                                                                            (M.alloc (|
                                                                                              Value.Array
                                                                                                [
                                                                                                  M.read (|
                                                                                                    Value.String
                                                                                                      "agg join: "
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    Value.String
                                                                                                      " vs "
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    Value.String
                                                                                                      " => "
                                                                                                  |)
                                                                                                ]
                                                                                            |));
                                                                                          (* Unsize *)
                                                                                          M.pointer_coercion
                                                                                            (M.alloc (|
                                                                                              Value.Array
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      "new_debug",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::policy::policy::AggOps"
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      lhs
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      "new_debug",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::policy::policy::AggOps"
                                                                                                          ]
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      rhs
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      "new_debug",
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::AggOps"
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      res
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                            |))
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                |))
                                                                            |)
                                                                          ]
                                                                      ]
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                res
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                        |) in
                      M.find_or_pattern (|
                        γ0_1,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                                |) in
                              Value.Tuple []))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path "picachv_core::policy::policy::PolicyLabel",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::policy::SetLike",
                                  Ty.path "picachv_core::policy::policy::PrivacyOp",
                                  [],
                                  "intersection",
                                  []
                                |),
                                [ M.read (| lhs |); M.read (| rhs |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn meet(&self, other: &Self) -> Self {
              match (self, other) {
                  (PolicyLabel::PolicyBot, _) => self.clone(),
                  (PolicyLabel::PolicyTransform { .. }, PolicyLabel::PolicyBot) => other.clone(),
                  (
                      PolicyLabel::PolicyTransform { ops: lhs },
                      PolicyLabel::PolicyTransform { ops: rhs },
                  ) => PolicyLabel::PolicyTransform {
                      ops: lhs.union(rhs),
                  },
                  (PolicyLabel::PolicyTransform { .. }, _) => self.clone(),
                  (
                      PolicyLabel::PolicyAgg { .. },
                      PolicyLabel::PolicyBot | PolicyLabel::PolicyTransform { .. },
                  ) => self.clone(),
                  (PolicyLabel::PolicyAgg { ops: lhs }, PolicyLabel::PolicyAgg { ops: rhs }) => {
                      PolicyLabel::PolicyAgg {
                          ops: lhs.union(rhs),
                      }
                  },
                  (PolicyLabel::PolicyAgg { .. }, _) => self.clone(),
                  (
                      PolicyLabel::PolicyNoise { .. },
                      PolicyLabel::PolicyBot
                      | PolicyLabel::PolicyTransform { .. }
                      | PolicyLabel::PolicyAgg { .. },
                  ) => self.clone(),
                  (PolicyLabel::PolicyNoise { ops: lhs }, PolicyLabel::PolicyNoise { ops: rhs }) => {
                      PolicyLabel::PolicyNoise {
                          ops: lhs.union(rhs),
                      }
                  },
                  (PolicyLabel::PolicyNoise { .. }, _) => self.clone(),
                  (PolicyLabel::PolicyTop, _) => other.clone(),
              }
          }
      *)
      Definition meet (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                        |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::policy::SetLike",
                                  Ty.path "picachv_core::policy::policy::TransformOps",
                                  [],
                                  "union",
                                  []
                                |),
                                [ M.read (| lhs |); M.read (| rhs |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                        |) in
                      M.find_or_pattern (|
                        γ0_1,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              Value.Tuple []))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path "picachv_core::policy::policy::PolicyLabel",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::policy::SetLike",
                                  Ty.path "picachv_core::policy::policy::AggOps",
                                  [],
                                  "union",
                                  []
                                |),
                                [ M.read (| lhs |); M.read (| rhs |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                        |) in
                      M.find_or_pattern (|
                        γ0_1,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyBot"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyTransform"
                                |) in
                              Value.Tuple []));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ,
                                  "picachv_core::policy::policy::PolicyLabel::PolicyAgg"
                                |) in
                              Value.Tuple []))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path "picachv_core::policy::policy::PolicyLabel",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let lhs := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise",
                          "ops"
                        |) in
                      let rhs := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                          [
                            ("ops",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::policy::SetLike",
                                  Ty.path "picachv_core::policy::policy::PrivacyOp",
                                  [],
                                  "union",
                                  []
                                |),
                                [ M.read (| lhs |); M.read (| rhs |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyNoise"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ0_0,
                          "picachv_core::policy::policy::PolicyLabel::PolicyTop"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                            [],
                            "clone",
                            []
                          |),
                          [ M.read (| other |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn top() -> Self {
              Self::PolicyTop
          }
      *)
      Definition top (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple "picachv_core::policy::policy::PolicyLabel::PolicyTop" []))
        | _, _ => M.impossible
        end.
      
      (*
          fn bottom() -> Self {
              Self::PolicyBot
          }
      *)
      Definition bottom (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple "picachv_core::policy::policy::PolicyLabel::PolicyBot" []))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "picachv_core::policy::lattice::Lattice"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [
            ("join", InstanceField.Method join);
            ("meet", InstanceField.Method meet);
            ("top", InstanceField.Method top);
            ("bottom", InstanceField.Method bottom)
          ].
    End Impl_picachv_core_policy_lattice_Lattice_for_picachv_core_policy_policy_PolicyLabel.
    
    Module Impl_core_default_Default_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          fn default() -> Self {
              Self::PolicyClean
          }
      *)
      Definition default (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple "picachv_core::policy::policy::Policy::PolicyClean" []))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_picachv_core_policy_policy_Policy.
    
    Module Impl_core_iter_traits_collect_FromIterator_picachv_core_policy_policy_PolicyLabel_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          fn from_iter<T: IntoIterator<Item = PolicyLabel>>(iter: T) -> Self {
              let labels = iter.into_iter();
              let mut res = Policy::PolicyClean;
      
              for label in labels {
                  res = Policy::PolicyDeclassify {
                      label: Arc::new(label),
                      next: Arc::new(res),
                  };
              }
      
              res
          }
      *)
      Definition from_iter (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ T ], [ iter ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| iter |) in
            M.read (|
              let~ labels :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      T,
                      [],
                      "into_iter",
                      []
                    |),
                    [ M.read (| iter |) ]
                  |)
                |) in
              let~ res :=
                M.alloc (|
                  Value.StructTuple "picachv_core::policy::policy::Policy::PolicyClean" []
                |) in
              let~ _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.associated,
                          [],
                          "into_iter",
                          []
                        |),
                        [ M.read (| labels |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let~ _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.associated,
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let label := M.copy (| γ0_0 |) in
                                        let~ _ :=
                                          M.write (|
                                            res,
                                            Value.StructRecord
                                              "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                              [
                                                ("label",
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::PolicyLabel";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [ M.read (| label |) ]
                                                  |));
                                                ("next",
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        [
                                                          Ty.path
                                                            "picachv_core::policy::policy::Policy";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [ M.read (| res |) ]
                                                  |))
                                              ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              res
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::iter::traits::collect::FromIterator"
          Self
          (* Trait polymorphic types *)
          [ (* A *) Ty.path "picachv_core::policy::policy::PolicyLabel" ]
          (* Instance *) [ ("from_iter", InstanceField.Method from_iter) ].
    End Impl_core_iter_traits_collect_FromIterator_picachv_core_policy_policy_PolicyLabel_for_picachv_core_policy_policy_Policy.
    
    Module Impl_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          pub fn new() -> Self {
              Self::default()
          }
      *)
      Definition new (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              M.get_trait_method (|
                "core::default::Default",
                Ty.path "picachv_core::policy::policy::Policy",
                [],
                "default",
                []
              |),
              []
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
      
      (*
          pub fn to_vec(&self) -> Vec<Arc<PolicyLabel>> {
              let mut res = vec![];
              let mut cur = self;
      
              while let Policy::PolicyDeclassify { label, next } = cur {
                  res.push(label.clone());
                  cur = next.as_ref();
              }
      
              res
          }
      *)
      Definition to_vec (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ res :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "picachv_core::policy::policy::PolicyLabel";
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let~ cur := M.copy (| self |) in
              let~ _ :=
                M.loop (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := cur in
                            let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                "label"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                "next"
                              |) in
                            let label := M.alloc (| γ1_0 |) in
                            let next := M.alloc (| γ1_1 |) in
                            let~ _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::PolicyLabel";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "push",
                                    []
                                  |),
                                  [
                                    res;
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::PolicyLabel";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [ M.read (| label |) ]
                                    |)
                                  ]
                                |)
                              |) in
                            let~ _ :=
                              M.write (|
                                cur,
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::AsRef",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::policy::policy::Policy";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [ Ty.path "picachv_core::policy::policy::Policy" ],
                                    "as_ref",
                                    []
                                  |),
                                  [ M.read (| next |) ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ _ :=
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                  M.alloc (| Value.Tuple [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |) in
              res
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_to_vec : M.IsAssociatedFunction Self "to_vec" to_vec.
      
      (*
          pub fn valid(&self) -> bool {
              match self {
                  Policy::PolicyClean => true,
                  Policy::PolicyDeclassify { label, next } => {
                      next.valid()
                          && match next.as_ref() {
                              Policy::PolicyClean => true,
                              Policy::PolicyDeclassify {
                                  label: next_label, ..
                              } => next_label.flowsto(label),
                          }
                  },
              }
          }
      *)
      Definition valid (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyClean"
                        |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "label"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "next"
                        |) in
                      let label := M.alloc (| γ1_0 |) in
                      let next := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        LogicalOp.and (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "picachv_core::policy::policy::Policy",
                              "valid",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::Policy";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| next |) ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::AsRef",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::policy::policy::Policy";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [ Ty.path "picachv_core::policy::policy::Policy" ],
                                      "as_ref",
                                      []
                                    |),
                                    [ M.read (| next |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let _ :=
                                        M.is_struct_tuple (|
                                          γ,
                                          "picachv_core::policy::policy::Policy::PolicyClean"
                                        |) in
                                      M.alloc (| Value.Bool true |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let γ1_0 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                          "label"
                                        |) in
                                      let next_label := M.alloc (| γ1_0 |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "picachv_core::policy::lattice::Lattice",
                                            Ty.path "picachv_core::policy::policy::PolicyLabel",
                                            [],
                                            "flowsto",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::policy::policy::PolicyLabel";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ M.read (| next_label |) ]
                                            |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.path
                                                      "picachv_core::policy::policy::PolicyLabel";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ M.read (| label |) ]
                                            |)
                                          ]
                                        |)
                                      |)))
                                ]
                              |)
                            |)))
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_valid : M.IsAssociatedFunction Self "valid" valid.
      
      (*
          pub fn cons(self, label: Arc<PolicyLabel>) -> PicachvResult<Self> {
              match self {
                  Policy::PolicyClean => Ok(Self::PolicyDeclassify {
                      label,
                      next: Arc::new(self),
                  }),
                  Policy::PolicyDeclassify {
                      label: cur,
                      next: p,
                  } => match cur.flowsto(&label) {
                      false => {
                          let inner = match Arc::try_unwrap(p) {
                              Ok(p) => p,
                              Err(p) => ( *p).clone(),
                          };
      
                          Ok(Self::PolicyDeclassify {
                              label: cur.clone(),
                              next: Arc::new(inner.cons(label)?),
                          })
                      },
                      true => Err(PicachvError::InvalidOperation(
                          "policy label is not ordered correctly".into(),
                      )),
                  },
              }
          }
      *)
      Definition cons (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; label ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let label := M.alloc (| label |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_core::policy::policy::Policy::PolicyClean"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                  [
                                    ("label", M.read (| label |));
                                    ("next",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::policy::Policy";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [ M.read (| self |) ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "label"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "next"
                            |) in
                          let cur := M.copy (| γ0_0 |) in
                          let p := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "picachv_core::policy::lattice::Lattice",
                                  Ty.path "picachv_core::policy::policy::PolicyLabel",
                                  [],
                                  "flowsto",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::policy::policy::PolicyLabel";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ cur ]
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::policy::policy::PolicyLabel";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ label ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool false
                                    |) in
                                  let~ inner :=
                                    M.copy (|
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path "picachv_core::policy::policy::Policy";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "try_unwrap",
                                              []
                                            |),
                                            [ M.read (| p |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::result::Result::Ok",
                                                  0
                                                |) in
                                              let p := M.copy (| γ0_0 |) in
                                              p));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::result::Result::Err",
                                                  0
                                                |) in
                                              let p := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    Ty.path "picachv_core::policy::policy::Policy",
                                                    [],
                                                    "clone",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.path
                                                              "picachv_core::policy::policy::Policy";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ p ]
                                                    |)
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      [
                                        Value.StructRecord
                                          "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                          [
                                            ("label",
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::PolicyLabel";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ cur ]
                                              |));
                                            ("next",
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::Policy";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::policy::policy::Policy";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "picachv_core::policy::policy::Policy",
                                                                "cons",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| inner |);
                                                                M.read (| label |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "picachv_core::policy::policy::Policy";
                                                                            Ty.path
                                                                              "picachv_error::PicachvError"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "picachv_error::PicachvError"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |))
                                          ]
                                      ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        Value.StructTuple
                                          "picachv_error::PicachvError::InvalidOperation"
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                                [ Ty.path "picachv_error::ErrString" ],
                                                "into",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  Value.String
                                                    "policy label is not ordered correctly"
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_cons : M.IsAssociatedFunction Self "cons" cons.
      
      (*
          pub fn le(&self, other: &Self) -> PicachvResult<bool> {
              picachv_ensure!(self.valid() && other.valid(),
                  ComputeError: "trying to compare invalid policies");
      
              let res = match (self, other) {
                  (Policy::PolicyClean, _) => true,
                  (
                      Policy::PolicyDeclassify {
                          label: l1,
                          next: n1,
                      },
                      Policy::PolicyDeclassify {
                          label: l2,
                          next: n2,
                      },
                  ) => {
                      tracing::debug!("{} and {}", l1.flowsto(l2), n1.le(n2));
                      l1.flowsto(l2) && n1.le(n2)
                  },
                  _ => false,
              };
      
              Ok(res)
          }
      *)
      Definition le (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (LogicalOp.and (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "picachv_core::policy::policy::Policy",
                                          "valid",
                                          []
                                        |),
                                        [ M.read (| self |) ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "picachv_core::policy::policy::Policy",
                                            "valid",
                                            []
                                          |),
                                          [ M.read (| other |) ]
                                        |)))
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "picachv_error::__private::must_use",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "picachv_error::PicachvError::ComputeError"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "trying to compare invalid policies"
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ res :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let _ :=
                                M.is_struct_tuple (|
                                  γ0_0,
                                  "picachv_core::policy::policy::Policy::PolicyClean"
                                |) in
                              M.alloc (| Value.Bool true |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                  "label"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                  "next"
                                |) in
                              let l1 := M.alloc (| γ2_0 |) in
                              let n1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                  "label"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "picachv_core::policy::policy::Policy::PolicyDeclassify",
                                  "next"
                                |) in
                              let l2 := M.alloc (| γ2_0 |) in
                              let n2 := M.alloc (| γ2_1 |) in
                              let~ _ :=
                                let~ enabled :=
                                  M.alloc (|
                                    LogicalOp.and (|
                                      LogicalOp.and (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::PartialOrd",
                                            Ty.path "tracing_core::metadata::Level",
                                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                            "le",
                                            []
                                          |),
                                          [
                                            M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                            M.get_constant (|
                                              "tracing::level_filters::STATIC_MAX_LEVEL"
                                            |)
                                          ]
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialOrd",
                                              Ty.path "tracing_core::metadata::Level",
                                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                              "le",
                                              []
                                            |),
                                            [
                                              M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::LevelFilter",
                                                    "current",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            ]
                                          |)))
                                      |),
                                      ltac:(M.monadic
                                        (M.read (|
                                          let~ interest :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  "interest",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.get_constant (|
                                                      "picachv_core::policy::policy::le::__CALLSITE"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            LogicalOp.and (|
                                              UnOp.Pure.not
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::subscriber::Interest",
                                                    "is_never",
                                                    []
                                                  |),
                                                  [ interest ]
                                                |)),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  M.get_function (|
                                                    "tracing::__macro_support::__is_enabled",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::policy::policy::le::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| interest |)
                                                  ]
                                                |)))
                                            |)
                                          |)
                                        |)))
                                    |)
                                  |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use enabled in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                                  ]
                                                  (Ty.tuple []),
                                                [
                                                  Ty.tuple
                                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let value_set :=
                                                                    M.copy (| γ |) in
                                                                  M.read (|
                                                                    let~ meta :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            "metadata",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.get_constant (|
                                                                                "picachv_core::policy::policy::le::__CALLSITE"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let~ _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::event::Event",
                                                                            "dispatch",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| meta |);
                                                                            value_set
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                |);
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      let~ iter :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "tracing_core::callsite::Callsite",
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      [],
                                                                      "metadata",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.get_constant (|
                                                                          "picachv_core::policy::policy::le::__CALLSITE"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata",
                                                                "fields",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "tracing_core::callsite::Callsite",
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                    [],
                                                                    "metadata",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.get_constant (|
                                                                        "picachv_core::policy::policy::le::__CALLSITE"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  Value.Tuple
                                                                    [
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::field::Field"
                                                                              ],
                                                                            "expect",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.path
                                                                                  "tracing_core::field::Iter",
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |);
                                                                            M.read (|
                                                                              Value.String
                                                                                "FieldSet corrupted (this is a bug)"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::Some"
                                                                        [
                                                                          M.read (|
                                                                            M.use
                                                                              (M.alloc (|
                                                                                (* Unsize *)
                                                                                M.pointer_coercion
                                                                                  (M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        (* Unsize *)
                                                                                        M.pointer_coercion
                                                                                          (M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.read (|
                                                                                                  Value.String
                                                                                                    ""
                                                                                                |);
                                                                                                M.read (|
                                                                                                  Value.String
                                                                                                    " and "
                                                                                                |)
                                                                                              ]
                                                                                          |));
                                                                                        (* Unsize *)
                                                                                        M.pointer_coercion
                                                                                          (M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument",
                                                                                                    "new_display",
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "bool"
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "picachv_core::policy::lattice::Lattice",
                                                                                                          Ty.path
                                                                                                            "picachv_core::policy::policy::PolicyLabel",
                                                                                                          [],
                                                                                                          "flowsto",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::deref::Deref",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::sync::Arc")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "picachv_core::policy::policy::PolicyLabel";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              "deref",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                l1
                                                                                                              |)
                                                                                                            ]
                                                                                                          |);
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::deref::Deref",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::sync::Arc")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "picachv_core::policy::policy::PolicyLabel";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              "deref",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                l2
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument",
                                                                                                    "new_display",
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "bool"
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::cmp::PartialOrd",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::sync::Arc")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_core::policy::policy::Policy";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::sync::Arc")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "picachv_core::policy::policy::Policy";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ],
                                                                                                          "le",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            n1
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            n2
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |))
                                                                                      ]
                                                                                    |)
                                                                                  |))
                                                                              |))
                                                                          |)
                                                                        ]
                                                                    ]
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "picachv_core::policy::lattice::Lattice",
                                      Ty.path "picachv_core::policy::policy::PolicyLabel",
                                      [],
                                      "flowsto",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::policy::PolicyLabel";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| l1 |) ]
                                      |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::policy::PolicyLabel";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.read (| l2 |) ]
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::Policy";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::policy::Policy";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                        "le",
                                        []
                                      |),
                                      [ M.read (| n1 |); M.read (| n2 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                        ]
                      |)
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| res |) ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_le : M.IsAssociatedFunction Self "le" le.
      (*
          fn do_downgrade(&self, by: &PolicyLabel) -> PicachvResult<Self> {
              match &self {
                  // The current policy is less stricter.
                  Policy::PolicyClean => Ok(self.clone()),
                  Policy::PolicyDeclassify { label, next } => match label.can_declassify(by) {
                      true => Ok(next.as_ref().clone()),
                      false => Ok(self.clone()),
                  },
              }
          }
      *)
      Definition do_downgrade (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; by_ ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let by_ := M.alloc (| by_ |) in
            M.read (|
              M.match_operator (|
                M.alloc (| self |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyClean"
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "picachv_core::policy::policy::Policy",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| self |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ := M.read (| γ |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "label"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "next"
                        |) in
                      let label := M.alloc (| γ2_0 |) in
                      let next := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "picachv_core::policy::policy::PolicyLabel",
                              "can_declassify",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "picachv_core::policy::policy::PolicyLabel";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| label |) ]
                              |);
                              M.read (| by_ |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path "picachv_core::policy::policy::Policy",
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::AsRef",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              [
                                                Ty.path "picachv_core::policy::policy::Policy";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [ Ty.path "picachv_core::policy::policy::Policy" ],
                                            "as_ref",
                                            []
                                          |),
                                          [ M.read (| next |) ]
                                        |)
                                      ]
                                    |)
                                  ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool false
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path "picachv_core::policy::policy::Policy",
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [ M.read (| self |) ]
                                    |)
                                  ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_do_downgrade :
        M.IsAssociatedFunction Self "do_downgrade" do_downgrade.
      
      (*
          pub fn join(&self, other: &Self) -> PicachvResult<Self> {
              picachv_ensure!(self.valid() && other.valid(),
                  ComputeError: "trying to join invalid policies");
      
              match (self, other) {
                  (Policy::PolicyClean, _) => Ok(other.clone()),
                  (_, Policy::PolicyClean) => Ok(self.clone()),
                  (
                      Policy::PolicyDeclassify {
                          label: label1,
                          next: next1,
                      },
                      Policy::PolicyDeclassify {
                          label: label2,
                          next: next2,
                      },
                  ) => {
                      if label1.base_eq(label2) {
                          return Ok(Policy::PolicyDeclassify {
                              label: Arc::new(label1.join(label2)),
                              next: Arc::new(next1.join(next2)?),
                          });
                      }
      
                      let (lbl, p3) = match label1.flowsto(label2) {
                          true => (label2, self.join(next2)?),
                          false => (label1, next1.join(other)?),
                      };
      
                      Ok(Policy::PolicyDeclassify {
                          label: lbl.clone(),
                          next: Arc::new(p3),
                      })
                  },
              }
          }
      *)
      Definition join (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (LogicalOp.and (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "picachv_core::policy::policy::Policy",
                                          "valid",
                                          []
                                        |),
                                        [ M.read (| self |) ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "picachv_core::policy::policy::Policy",
                                            "valid",
                                            []
                                          |),
                                          [ M.read (| other |) ]
                                        |)))
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "picachv_error::__private::must_use",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "picachv_error::PicachvError::ComputeError"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "trying to join invalid policies"
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ0_0,
                              "picachv_core::policy::policy::Policy::PolicyClean"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.path "picachv_core::policy::policy::Policy",
                                    [],
                                    "clone",
                                    []
                                  |),
                                  [ M.read (| other |) ]
                                |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ0_1,
                              "picachv_core::policy::policy::Policy::PolicyClean"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.path "picachv_core::policy::policy::Policy",
                                    [],
                                    "clone",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "label"
                            |) in
                          let γ2_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "next"
                            |) in
                          let label1 := M.alloc (| γ2_0 |) in
                          let next1 := M.alloc (| γ2_1 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_1,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "label"
                            |) in
                          let γ2_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_1,
                              "picachv_core::policy::policy::Policy::PolicyDeclassify",
                              "next"
                            |) in
                          let label2 := M.alloc (| γ2_0 |) in
                          let next2 := M.alloc (| γ2_1 |) in
                          let~ _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "picachv_core::policy::policy::PolicyLabel",
                                              "base_eq",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::PolicyLabel";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ M.read (| label1 |) ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::PolicyLabel";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ M.read (| label2 |) ]
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructRecord
                                                  "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                                  [
                                                    ("label",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            [
                                                              Ty.path
                                                                "picachv_core::policy::policy::PolicyLabel";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "picachv_core::policy::lattice::Lattice",
                                                              Ty.path
                                                                "picachv_core::policy::policy::PolicyLabel",
                                                              [],
                                                              "join",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::policy::policy::PolicyLabel";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| label1 |) ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::policy::policy::PolicyLabel";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| label2 |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |));
                                                    ("next",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            [
                                                              Ty.path
                                                                "picachv_core::policy::policy::Policy";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::Try",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "picachv_core::policy::policy::Policy";
                                                                        Ty.path
                                                                          "picachv_error::PicachvError"
                                                                      ],
                                                                    [],
                                                                    "branch",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "picachv_core::policy::policy::Policy",
                                                                        "join",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [ M.read (| next1 |) ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::policy::policy::Policy";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [ M.read (| next2 |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Break",
                                                                        0
                                                                      |) in
                                                                    let residual :=
                                                                      M.copy (| γ0_0 |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::FromResidual",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_core::policy::policy::Policy";
                                                                                    Ty.path
                                                                                      "picachv_error::PicachvError"
                                                                                  ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::convert::Infallible";
                                                                                      Ty.path
                                                                                        "picachv_error::PicachvError"
                                                                                    ]
                                                                                ],
                                                                                "from_residual",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  residual
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                                        0
                                                                      |) in
                                                                    let val := M.copy (| γ0_0 |) in
                                                                    val))
                                                              ]
                                                            |)
                                                          |)
                                                        ]
                                                      |))
                                                  ]
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.match_operator (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "picachv_core::policy::lattice::Lattice",
                                    Ty.path "picachv_core::policy::policy::PolicyLabel",
                                    [],
                                    "flowsto",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::PolicyLabel";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ M.read (| label1 |) ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::PolicyLabel";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ M.read (| label2 |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      Value.Tuple
                                        [
                                          M.read (| label2 |);
                                          M.read (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path
                                                          "picachv_core::policy::policy::Policy";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "picachv_core::policy::policy::Policy",
                                                        "join",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| self |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::policy::policy::Policy";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ M.read (| next2 |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::policy::policy::Policy";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |)
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool false
                                      |) in
                                    M.alloc (|
                                      Value.Tuple
                                        [
                                          M.read (| label1 |);
                                          M.read (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path
                                                          "picachv_core::policy::policy::Policy";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "picachv_core::policy::policy::Policy",
                                                        "join",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::policy::policy::Policy";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ M.read (| next1 |) ]
                                                        |);
                                                        M.read (| other |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::policy::policy::Policy";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |)
                                        ]
                                    |)))
                              ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let lbl := M.copy (| γ0_0 |) in
                                  let p3 := M.copy (| γ0_1 |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      [
                                        Value.StructRecord
                                          "picachv_core::policy::policy::Policy::PolicyDeclassify"
                                          [
                                            ("label",
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::PolicyLabel";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ M.read (| lbl |) ]
                                              |));
                                            ("next",
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::Policy";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [ M.read (| p3 |) ]
                                              |))
                                          ]
                                      ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_join : M.IsAssociatedFunction Self "join" join.
      
      (*
          pub fn downgrade(&self, by: &Arc<PolicyLabel>) -> PicachvResult<Self> {
              let p = build_policy!(by.clone())?;
              tracing::debug!("in downgrade: constructed policy: {p:?}");
      
              tracing::debug!("downgrading: {self:?} vs {p:?}");
      
              match self.le(&p) {
                  Ok(b) => {
                      picachv_ensure!(b, PrivacyError: "trying to downgrade by an operation that is not allowed");
                      self.do_downgrade(by)
                  },
                  Err(e) => Err(e),
              }
          }
      *)
      Definition downgrade (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; by_ ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let by_ := M.alloc (| by_ |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ p :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.path "picachv_core::policy::policy::Policy";
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "picachv_core::policy::policy::Policy",
                                  "cons",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "picachv_core::policy::policy::Policy",
                                      "new",
                                      []
                                    |),
                                    []
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "picachv_core::policy::policy::PolicyLabel";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "picachv_core::policy::policy::PolicyLabel";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                      "into",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::policy::PolicyLabel";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [ M.read (| by_ |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "picachv_core::policy::policy::Policy";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    let~ enabled :=
                      M.alloc (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                              ]
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialOrd",
                                  Ty.path "tracing_core::metadata::Level",
                                  [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                  "le",
                                  []
                                |),
                                [
                                  M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::metadata::LevelFilter",
                                        "current",
                                        []
                                      |),
                                      []
                                    |)
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.read (|
                              let~ interest :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::callsite::DefaultCallsite",
                                      "interest",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.get_constant (|
                                          "picachv_core::policy::policy::downgrade::__CALLSITE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "is_never",
                                        []
                                      |),
                                      [ interest ]
                                    |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_function (|
                                        "tracing::__macro_support::__is_enabled",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "tracing_core::callsite::Callsite",
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            [],
                                            "metadata",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.get_constant (|
                                                "picachv_core::policy::policy::downgrade::__CALLSITE"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (| interest |)
                                      ]
                                    |)))
                                |)
                              |)
                            |)))
                        |)
                      |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use enabled in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                      (Ty.tuple []),
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                    "call",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let value_set := M.copy (| γ |) in
                                                      M.read (|
                                                        let~ meta :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                "metadata",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.get_constant (|
                                                                    "picachv_core::policy::policy::downgrade::__CALLSITE"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                []
                                                              |),
                                                              [ M.read (| meta |); value_set ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    |);
                                    Value.Tuple
                                      [
                                        M.read (|
                                          let~ iter :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::field::FieldSet",
                                                  "iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          "metadata",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "picachv_core::policy::policy::downgrade::__CALLSITE"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "value_set",
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [ Ty.path "tracing_core::field::Field"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("tracing_core::field::Value::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::policy::policy::downgrade::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::Field"
                                                                  ],
                                                                "expect",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.path
                                                                      "tracing_core::field::Iter",
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "FieldSet corrupted (this is a bug)"
                                                                |)
                                                              ]
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              M.read (|
                                                                M.use
                                                                  (M.alloc (|
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "in downgrade: constructed policy: "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_debug",
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy"
                                                                                        ]
                                                                                      |),
                                                                                      [ p ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |))
                                                              |)
                                                            ]
                                                        ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ :=
                    let~ enabled :=
                      M.alloc (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                              ]
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialOrd",
                                  Ty.path "tracing_core::metadata::Level",
                                  [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                  "le",
                                  []
                                |),
                                [
                                  M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::metadata::LevelFilter",
                                        "current",
                                        []
                                      |),
                                      []
                                    |)
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.read (|
                              let~ interest :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::callsite::DefaultCallsite",
                                      "interest",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.get_constant (|
                                          "picachv_core::policy::policy::downgrade::__CALLSITE'1"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "is_never",
                                        []
                                      |),
                                      [ interest ]
                                    |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_function (|
                                        "tracing::__macro_support::__is_enabled",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "tracing_core::callsite::Callsite",
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            [],
                                            "metadata",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.get_constant (|
                                                "picachv_core::policy::policy::downgrade::__CALLSITE'1"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (| interest |)
                                      ]
                                    |)))
                                |)
                              |)
                            |)))
                        |)
                      |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use enabled in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                      (Ty.tuple []),
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                    "call",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let value_set := M.copy (| γ |) in
                                                      M.read (|
                                                        let~ meta :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                "metadata",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.get_constant (|
                                                                    "picachv_core::policy::policy::downgrade::__CALLSITE'1"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                []
                                                              |),
                                                              [ M.read (| meta |); value_set ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    |);
                                    Value.Tuple
                                      [
                                        M.read (|
                                          let~ iter :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::field::FieldSet",
                                                  "iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          "metadata",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "picachv_core::policy::policy::downgrade::__CALLSITE'1"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "value_set",
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [ Ty.path "tracing_core::field::Field"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("tracing_core::field::Value::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::policy::policy::downgrade::__CALLSITE'1"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::Field"
                                                                  ],
                                                                "expect",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.path
                                                                      "tracing_core::field::Iter",
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "FieldSet corrupted (this is a bug)"
                                                                |)
                                                              ]
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              M.read (|
                                                                M.use
                                                                  (M.alloc (|
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "downgrading: "
                                                                                    |);
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        " vs "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_debug",
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "picachv_core::policy::policy::Policy"
                                                                                            ]
                                                                                        ]
                                                                                      |),
                                                                                      [ self ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_debug",
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_core::policy::policy::Policy"
                                                                                        ]
                                                                                      |),
                                                                                      [ p ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |))
                                                              |)
                                                            ]
                                                        ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "picachv_core::policy::policy::Policy",
                          "le",
                          []
                        |),
                        [ M.read (| self |); p ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::result::Result::Ok",
                              0
                            |) in
                          let b := M.copy (| γ0_0 |) in
                          let~ _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| UnOp.Pure.not (M.read (| b |)) |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "picachv_error::__private::must_use",
                                                    []
                                                  |),
                                                  [
                                                    Value.StructTuple
                                                      "picachv_error::PicachvError::PrivacyError"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::Into",
                                                            Ty.path "alloc::string::String",
                                                            [ Ty.path "picachv_error::ErrString" ],
                                                            "into",
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              let~ res :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "alloc::fmt::format",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::Arguments",
                                                                          "new_const",
                                                                          []
                                                                        |),
                                                                        [
                                                                          (* Unsize *)
                                                                          M.pointer_coercion
                                                                            (M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.read (|
                                                                                    Value.String
                                                                                      "trying to downgrade by an operation that is not allowed"
                                                                                  |)
                                                                                ]
                                                                            |))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              res
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "picachv_core::policy::policy::Policy",
                                "do_downgrade",
                                []
                              |),
                              [
                                M.read (| self |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "picachv_core::policy::policy::PolicyLabel";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ M.read (| by_ |) ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::result::Result::Err",
                              0
                            |) in
                          let e := M.copy (| γ0_0 |) in
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Err" [ M.read (| e |) ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_downgrade : M.IsAssociatedFunction Self "downgrade" downgrade.
    End Impl_picachv_core_policy_policy_Policy.
    
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          fn eq(&self, other: &Self) -> bool {
              matches!((self.le(other), other.le(self)), (Ok(true), Ok(true)))
          }
      *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  Value.Tuple
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "picachv_core::policy::policy::Policy",
                          "le",
                          []
                        |),
                        [ M.read (| self |); M.read (| other |) ]
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "picachv_core::policy::policy::Policy",
                          "le",
                          []
                        |),
                        [ M.read (| other |); M.read (| self |) ]
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      M.alloc (| Value.Bool true |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Bool false |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_policy_Policy.
    
    Module Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
              match (self.le(other), other.le(self)) {
                  (Ok(true), Ok(true)) => Some(std::cmp::Ordering::Equal),
                  (Ok(true), Ok(false)) => Some(std::cmp::Ordering::Less),
                  (Ok(false), Ok(true)) => Some(std::cmp::Ordering::Greater),
                  _ => None,
              }
          }
      *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  Value.Tuple
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "picachv_core::policy::policy::Policy",
                          "le",
                          []
                        |),
                        [ M.read (| self |); M.read (| other |) ]
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "picachv_core::policy::policy::Policy",
                          "le",
                          []
                        |),
                        [ M.read (| other |); M.read (| self |) ]
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.StructTuple "core::cmp::Ordering::Equal" [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool false |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.StructTuple "core::cmp::Ordering::Less" [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool false |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "core::result::Result::Ok",
                          0
                        |) in
                      let _ :=
                        M.is_constant_or_break_match (| M.read (| γ1_0 |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.StructTuple "core::cmp::Ordering::Greater" [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_picachv_core_policy_policy_Policy.
    
    Module Impl_core_fmt_Display_for_picachv_core_policy_policy_Policy.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::Policy".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  Policy::PolicyClean => write!(f, "∅"),
                  Policy::PolicyDeclassify { label, next } => {
                      write!(f, "{label} ⇝ {next}")
                  },
              }
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyClean"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [ M.read (| Value.String (String.String "005" "") |) ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "label"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "picachv_core::policy::policy::Policy::PolicyDeclassify",
                          "next"
                        |) in
                      let label := M.alloc (| γ1_0 |) in
                      let next := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String (" " ++ (String.String "221" " ")) |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::PolicyLabel";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                          |),
                                          [ label ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::policy::Policy";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                          |),
                                          [ next ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_picachv_core_policy_policy_Policy.
    
    Module Impl_core_convert_TryFrom_picachv_message_ArithmeticBinaryOperator_for_picachv_core_policy_policy_BinaryTransformType.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::policy::BinaryTransformType".
      
      (*     type Error = PicachvError; *)
      Definition _Error : Ty.t := Ty.path "picachv_error::PicachvError".
      
      (*
          fn try_from(op: ArithmeticBinaryOperator) -> PicachvResult<Self> {
              match op {
                  ArithmeticBinaryOperator::Add => Ok(Self {
                      name: "add".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  ArithmeticBinaryOperator::Sub => Ok(Self {
                      name: "sub".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  ArithmeticBinaryOperator::Mul => Ok(Self {
                      name: "mul".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  ArithmeticBinaryOperator::Div => Ok(Self {
                      name: "div".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  ArithmeticBinaryOperator::Mod => Ok(Self {
                      name: "mod".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  ArithmeticBinaryOperator::Pow => Ok(Self {
                      name: "pow".into(),
                      arg: Arc::new(AnyValue::None),
                  }),
                  _ => picachv_bail!(InvalidOperation: "unsupported arithmetic binary operator"),
              }
          }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ op ] =>
          ltac:(M.monadic
            (let op := M.alloc (| op |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    op,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Add"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "add" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Sub"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "sub" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Mul"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "mul" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Div"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "div" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Mod"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "mod" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "picachv_message::ArithmeticBinaryOperator::Pow"
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::policy::policy::BinaryTransformType"
                                  [
                                    ("name",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "pow" |) ]
                                      |));
                                    ("arg",
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "picachv_core::policy::types::AnyValue";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_core::policy::types::AnyValue::None"
                                            []
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "picachv_error::__private::must_use",
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "picachv_error::PicachvError::InvalidOperation"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "unsupported arithmetic binary operator"
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.path "picachv_message::ArithmeticBinaryOperator" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_picachv_message_ArithmeticBinaryOperator_for_picachv_core_policy_policy_BinaryTransformType.
  End policy.
End policy.
