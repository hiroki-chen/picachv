(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module cast.
  (*
  pub fn into_duration(value: &AnyValueRef) -> PicachvResult<AnyValueRef> {
      match value.as_ref() {
          AnyValue::Duration(_) => Ok(value.clone()),
          AnyValue::String(s) => {
              let d = parse(s).map_err(|e| {
                  PicachvError::InvalidOperation(
                      format!("Failed to parse the duration: {}", e).into(),
                  )
              })?;
  
              Ok(Arc::new(AnyValue::Duration(d)))
          },
  
          _ => Err(PicachvError::InvalidOperation(
              "The value is not a duration.".into(),
          )),
      }
  }
  *)
  Definition into_duration (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      ltac:(M.monadic
        (let value := M.alloc (| value |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.path "picachv_core::policy::types::AnyValue";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [ Ty.path "picachv_core::policy::types::AnyValue" ],
                      "as_ref",
                      []
                    |),
                    [ M.read (| value |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Duration",
                          0
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::policy::types::AnyValue";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| value |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::String",
                          0
                        |) in
                      let s := M.alloc (| γ1_0 |) in
                      let~ d :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "core::time::Duration";
                                      Ty.path "picachv_error::PicachvError"
                                    ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::time::Duration";
                                          Ty.path "parse_duration::parse::Error"
                                        ],
                                      "map_err",
                                      [
                                        Ty.path "picachv_error::PicachvError";
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "parse_duration::parse::Error" ] ]
                                          (Ty.path "picachv_error::PicachvError")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_function (| "parse_duration::parse::parse", [] |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloc::string::String",
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ M.read (| s |) ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let e := M.copy (| γ |) in
                                                      Value.StructTuple
                                                        "picachv_error::PicachvError::InvalidOperation"
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "alloc::string::String",
                                                              [ Ty.path "picachv_error::ErrString"
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                let~ res :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "alloc::fmt::format",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "Failed to parse the duration: "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [
                                                                                          Ty.path
                                                                                            "parse_duration::parse::Error"
                                                                                        ]
                                                                                      |),
                                                                                      [ e ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                res
                                                              |)
                                                            ]
                                                          |)
                                                        ]))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::types::AnyValue";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "picachv_error::PicachvError"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::policy::types::AnyValue";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "picachv_core::policy::types::AnyValue::Duration"
                                  [ M.read (| d |) ]
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [
                            Value.StructTuple
                              "picachv_error::PicachvError::InvalidOperation"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                    [ Ty.path "picachv_error::ErrString" ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| Value.String "The value is not a duration." |) ]
                                |)
                              ]
                          ]
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_into_duration : M.IsFunction "picachv_core::cast::into_duration" into_duration.
  
  (*
  pub fn into_i64(value: &AnyValueRef) -> PicachvResult<AnyValueRef> {
      match value.as_ref() {
          AnyValue::Int32(i) => Ok(Arc::new(AnyValue::Int64( *i as i64))),
          AnyValue::Int64(_) => Ok(value.clone()),
          AnyValue::String(s) => {
              let i = s.parse::<i64>().map_err(|e| {
                  PicachvError::InvalidOperation(format!("Failed to parse the integer: {}", e).into())
              })?;
  
              Ok(Arc::new(AnyValue::Int64(i)))
          },
  
          _ => Err(PicachvError::InvalidOperation(
              "The value is not an integer.".into(),
          )),
      }
  }
  *)
  Definition into_i64 (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ value ] =>
      ltac:(M.monadic
        (let value := M.alloc (| value |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.path "picachv_core::policy::types::AnyValue";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [ Ty.path "picachv_core::policy::types::AnyValue" ],
                      "as_ref",
                      []
                    |),
                    [ M.read (| value |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int32",
                          0
                        |) in
                      let i := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::policy::types::AnyValue";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "picachv_core::policy::types::AnyValue::Int64"
                                  [ M.rust_cast (M.read (| M.read (| i |) |)) ]
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int64",
                          0
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::policy::types::AnyValue";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| value |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::String",
                          0
                        |) in
                      let s := M.alloc (| γ1_0 |) in
                      let~ i :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "i64"; Ty.path "picachv_error::PicachvError" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.path "i64"; Ty.path "core::num::error::ParseIntError"
                                        ],
                                      "map_err",
                                      [
                                        Ty.path "picachv_error::PicachvError";
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "core::num::error::ParseIntError" ] ]
                                          (Ty.path "picachv_error::PicachvError")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "str",
                                          "parse",
                                          [ Ty.path "i64" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloc::string::String",
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ M.read (| s |) ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let e := M.copy (| γ |) in
                                                      Value.StructTuple
                                                        "picachv_error::PicachvError::InvalidOperation"
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "alloc::string::String",
                                                              [ Ty.path "picachv_error::ErrString"
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                let~ res :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "alloc::fmt::format",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "Failed to parse the integer: "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [
                                                                                          Ty.path
                                                                                            "core::num::error::ParseIntError"
                                                                                        ]
                                                                                      |),
                                                                                      [ e ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                res
                                                              |)
                                                            ]
                                                          |)
                                                        ]))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::policy::types::AnyValue";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "picachv_error::PicachvError"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "picachv_core::policy::types::AnyValue";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "picachv_core::policy::types::AnyValue::Int64"
                                  [ M.read (| i |) ]
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [
                            Value.StructTuple
                              "picachv_error::PicachvError::InvalidOperation"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                    [ Ty.path "picachv_error::ErrString" ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| Value.String "The value is not an integer." |) ]
                                |)
                              ]
                          ]
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function_into_i64 : M.IsFunction "picachv_core::cast::into_i64" into_i64.
End cast.
