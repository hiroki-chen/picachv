(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module policy.
  Module types.
    Axiom AnyValueRef :
      (Ty.path "picachv_core::policy::types::AnyValueRef") =
        (Ty.apply
          (Ty.path "alloc::sync::Arc")
          [ Ty.path "picachv_core::policy::types::AnyValue"; Ty.path "alloc::alloc::Global" ]).
    
    Axiom ValueArrayRef :
      (Ty.path "picachv_core::policy::types::ValueArrayRef") =
        (Ty.apply
          (Ty.path "alloc::sync::Arc")
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  [ Ty.path "picachv_core::policy::types::AnyValue"; Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ];
            Ty.path "alloc::alloc::Global"
          ]).
    
    (* StructTuple
      {
        name := "DpParam";
        ty_params := [];
        fields :=
          [
            Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ];
            Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ]
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_types_DpParam.
    
    Module Impl_core_marker_Copy_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_for_picachv_core_policy_types_DpParam.
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "DpParam" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::types::DpParam",
                    0
                  |));
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::types::DpParam",
                      1
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_types_DpParam.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_types_DpParam.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.associated; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    "serialize_tuple_struct",
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    M.read (| Value.String "DpParam" |);
                                    BinOp.Wrap.add
                                      Integer.Usize
                                      (BinOp.Wrap.add
                                        Integer.Usize
                                        (Value.Integer 0)
                                        (Value.Integer 1))
                                      (Value.Integer 1)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeTupleStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [
                                    Ty.apply
                                      (Ty.path "ordered_float::OrderedFloat")
                                      [ Ty.path "f64" ]
                                  ]
                                |),
                                [
                                  __serde_state;
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::types::DpParam",
                                    0
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let~ _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::SerializeTupleStruct",
                                  Ty.associated,
                                  [],
                                  "serialize_field",
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "ordered_float::OrderedFloat")
                                          [ Ty.path "f64" ]
                                      ]
                                  ]
                                |),
                                [
                                  __serde_state;
                                  M.SubPointer.get_struct_tuple_field (|
                                    M.read (| self |),
                                    "picachv_core::policy::types::DpParam",
                                    1
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "serde::ser::SerializeTupleStruct",
                          Ty.associated,
                          [],
                          "end",
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_types_DpParam.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_types_DpParam.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_tuple_struct",
                  [ Ty.path "picachv_core::policy::types::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "DpParam" |);
                  Value.Integer 2;
                  Value.StructRecord
                    "picachv_core::policy::types::_'1::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_types_DpParam.
      Module Impl_serde_ser_Serialize_for_picachv_core_policy_types_AnyValue.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
        
        (* Serialize *)
        Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let __serializer := M.alloc (| __serializer |) in
              M.read (|
                M.match_operator (|
                  M.read (| self |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Boolean",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "bool" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 0;
                              M.read (| Value.String "Boolean" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::String",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "alloc::string::String" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 1;
                              M.read (| Value.String "String" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::UInt8",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "u8" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 2;
                              M.read (| Value.String "UInt8" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::UInt16",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "u16" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 3;
                              M.read (| Value.String "UInt16" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::UInt32",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "u32" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 4;
                              M.read (| Value.String "UInt32" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::UInt64",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "u64" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 5;
                              M.read (| Value.String "UInt64" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Int8",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "i8" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 6;
                              M.read (| Value.String "Int8" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Int16",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "i16" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 7;
                              M.read (| Value.String "Int16" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Int32",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "i32" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 8;
                              M.read (| Value.String "Int32" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Int64",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "i64" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 9;
                              M.read (| Value.String "Int64" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Float32",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f32" ] ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 10;
                              M.read (| Value.String "Float32" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Float64",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 11;
                              M.read (| Value.String "Float64" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "picachv_core::policy::types::AnyValue::Duration",
                            0
                          |) in
                        let __field0 := M.alloc (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_newtype_variant",
                              [ Ty.path "core::time::Duration" ]
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 12;
                              M.read (| Value.String "Duration" |);
                              M.read (| __field0 |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "picachv_core::policy::types::AnyValue::None"
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "serde::ser::Serializer",
                              __S,
                              [],
                              "serialize_unit_variant",
                              []
                            |),
                            [
                              M.read (| __serializer |);
                              M.read (| Value.String "AnyValue" |);
                              Value.Integer 13;
                              M.read (| Value.String "None" |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_picachv_core_policy_types_AnyValue.
      Module Impl_serde_de_Deserialize_for_picachv_core_policy_types_AnyValue.
        Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
        
        (* Deserialize *)
        Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __deserializer |) in
              M.call_closure (|
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  "deserialize_enum",
                  [ Ty.path "picachv_core::policy::types::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  M.read (| Value.String "AnyValue" |);
                  M.read (|
                    M.get_constant (| "picachv_core::policy::types::_'3::deserialize::VARIANTS" |)
                  |);
                  Value.StructRecord
                    "picachv_core::policy::types::_'3::deserialize::__Visitor"
                    [
                      ("marker", Value.StructTuple "core::marker::PhantomData" []);
                      ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_picachv_core_policy_types_AnyValue.
    End underscore.
    
    
    Module Impl_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (*
          pub fn epsilon(&self) -> f64 {
              self.0 .0
          }
      *)
      Definition epsilon (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_tuple_field (|
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "picachv_core::policy::types::DpParam",
                  0
                |),
                "ordered_float::OrderedFloat",
                0
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_epsilon : M.IsAssociatedFunction Self "epsilon" epsilon.
      
      (*
          pub fn delta(&self) -> Option<f64> {
              self.1.map(|x| x.0)
          }
      *)
      Definition delta (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ],
                "map",
                [
                  Ty.path "f64";
                  Ty.function
                    [
                      Ty.tuple
                        [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ]
                    ]
                    (Ty.path "f64")
                ]
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::types::DpParam",
                    1
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let x := M.copy (| γ |) in
                                M.read (|
                                  M.SubPointer.get_struct_tuple_field (|
                                    x,
                                    "ordered_float::OrderedFloat",
                                    0
                                  |)
                                |)))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_delta : M.IsAssociatedFunction Self "delta" delta.
    End Impl_picachv_core_policy_types_DpParam.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (*
          fn eq(&self, other: &Self) -> bool {
              self.0 == other.0 && self.1 == other.1
          }
      *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ],
                  [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "picachv_core::policy::types::DpParam",
                    0
                  |);
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| other |),
                    "picachv_core::policy::types::DpParam",
                    0
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ],
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ]
                    ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "picachv_core::policy::types::DpParam",
                      1
                    |);
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| other |),
                      "picachv_core::policy::types::DpParam",
                      1
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_types_DpParam.
    
    Module Impl_core_cmp_PartialOrd_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (*
          fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
              Some(self.cmp(other))
          }
      *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            Value.StructTuple
              "core::option::Option::Some"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::Ord",
                    Ty.path "picachv_core::policy::types::DpParam",
                    [],
                    "cmp",
                    []
                  |),
                  [ M.read (| self |); M.read (| other |) ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_picachv_core_policy_types_DpParam.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      Axiom Implements :
        M.IsTraitInstance "core::cmp::Eq" Self (* Trait polymorphic types *) [] (* Instance *) [].
    End Impl_core_cmp_Eq_for_picachv_core_policy_types_DpParam.
    
    Module Impl_core_cmp_Ord_for_picachv_core_policy_types_DpParam.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::DpParam".
      
      (*
          fn cmp(&self, other: &Self) -> Ordering {
              self.partial_cmp(other).unwrap()
          }
      *)
      Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [ Ty.path "core::cmp::Ordering" ],
                "unwrap",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialOrd",
                    Ty.path "picachv_core::policy::types::DpParam",
                    [ Ty.path "picachv_core::policy::types::DpParam" ],
                    "partial_cmp",
                    []
                  |),
                  [ M.read (| self |); M.read (| other |) ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_picachv_core_policy_types_DpParam.
    
    (*
    Enum AnyValue
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Boolean";
            item := StructTuple [ Ty.path "bool" ];
            discriminant := None;
          };
          {
            name := "String";
            item := StructTuple [ Ty.path "alloc::string::String" ];
            discriminant := None;
          };
          {
            name := "UInt8";
            item := StructTuple [ Ty.path "u8" ];
            discriminant := None;
          };
          {
            name := "UInt16";
            item := StructTuple [ Ty.path "u16" ];
            discriminant := None;
          };
          {
            name := "UInt32";
            item := StructTuple [ Ty.path "u32" ];
            discriminant := None;
          };
          {
            name := "UInt64";
            item := StructTuple [ Ty.path "u64" ];
            discriminant := None;
          };
          {
            name := "Int8";
            item := StructTuple [ Ty.path "i8" ];
            discriminant := None;
          };
          {
            name := "Int16";
            item := StructTuple [ Ty.path "i16" ];
            discriminant := None;
          };
          {
            name := "Int32";
            item := StructTuple [ Ty.path "i32" ];
            discriminant := None;
          };
          {
            name := "Int64";
            item := StructTuple [ Ty.path "i64" ];
            discriminant := None;
          };
          {
            name := "Float32";
            item :=
              StructTuple [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f32" ] ];
            discriminant := None;
          };
          {
            name := "Float64";
            item :=
              StructTuple [ Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ] ];
            discriminant := None;
          };
          {
            name := "Duration";
            item := StructTuple [ Ty.path "core::time::Duration" ];
            discriminant := None;
          };
          {
            name := "None";
            item := StructTuple [];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Boolean",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Boolean"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "bool",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::String",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::String"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloc::string::String",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt8",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::UInt8"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u8",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt16",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::UInt16"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u16",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::UInt32"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::UInt64"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u64",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int8",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Int8"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "i8",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int16",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Int16"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "i16",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Int32"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "i32",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Int64"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "i64",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Float32"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f32" ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Float64"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Duration",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "picachv_core::policy::types::AnyValue::Duration"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "core::time::Duration",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::policy::types::AnyValue::None" |) in
                      M.alloc (|
                        Value.StructTuple "picachv_core::policy::types::AnyValue::None" []
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_cmp_PartialEq_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::types::AnyValue" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::types::AnyValue" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Boolean",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Boolean",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::String",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::String",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "alloc::string::String",
                                    [ Ty.path "alloc::string::String" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::UInt8",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::UInt8",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::UInt16",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::UInt16",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::UInt32",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::UInt32",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::UInt64",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::UInt64",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Int8",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Int8",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Int16",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Int16",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Int32",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Int32",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Int64",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Int64",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Float32",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Float32",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "ordered_float::OrderedFloat")
                                      [ Ty.path "f32" ],
                                    [
                                      Ty.apply
                                        (Ty.path "ordered_float::OrderedFloat")
                                        [ Ty.path "f32" ]
                                    ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Float64",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Float64",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "ordered_float::OrderedFloat")
                                      [ Ty.path "f64" ],
                                    [
                                      Ty.apply
                                        (Ty.path "ordered_float::OrderedFloat")
                                        [ Ty.path "f64" ]
                                    ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "picachv_core::policy::types::AnyValue::Duration",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "picachv_core::policy::types::AnyValue::Duration",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "core::time::Duration",
                                    [ Ty.path "core::time::Duration" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_marker_StructuralEq_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_cmp_Eq_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Value.DeclaredButUndefined,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Value.DeclaredButUndefined,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Value.DeclaredButUndefined,
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Value.DeclaredButUndefined,
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Value.DeclaredButUndefined,
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Value.DeclaredButUndefined,
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.match_operator (|
                                                                                Value.DeclaredButUndefined,
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.match_operator (|
                                                                                        Value.DeclaredButUndefined,
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.match_operator (|
                                                                                                Value.DeclaredButUndefined,
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.match_operator (|
                                                                                                        Value.DeclaredButUndefined,
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (M.match_operator (|
                                                                                                                Value.DeclaredButUndefined,
                                                                                                                [
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (M.alloc (|
                                                                                                                        Value.Tuple
                                                                                                                          []
                                                                                                                      |)))
                                                                                                                ]
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |)))
                                                                                                ]
                                                                                              |)))
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_hash_Hash_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (* Hash *)
      Definition hash (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "picachv_core::policy::types::AnyValue" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "isize",
                      [],
                      "hash",
                      [ __H ]
                    |),
                    [ __self_tag; M.read (| state |) ]
                  |)
                |) in
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Boolean",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "bool",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::String",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloc::string::String",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt8",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "u8",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt16",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "u16",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "u32",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "u64",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int8",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "i8",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int16",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "i16",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "i32",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "i64",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float32",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f32" ],
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float64",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.apply (Ty.path "ordered_float::OrderedFloat") [ Ty.path "f64" ],
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Duration",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "core::time::Duration",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_picachv_core_policy_types_AnyValue.
    
    
    
    Module Impl_core_fmt_Debug_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              match self {
                  Self::Duration(d) => {
                      let dt = DateTime::from_timestamp_nanos(d.as_nanos() as _);
                      write!(f, "{:?}", dt)
                  },
                  Self::Boolean(b) => write!(f, "{:?}: bool", b),
                  Self::String(s) => write!(f, "{:?}: string", s),
                  Self::UInt8(u) => write!(f, "{:?}: u8", u),
                  Self::UInt16(u) => write!(f, "{:?}: u16", u),
                  Self::UInt32(u) => write!(f, "{:?}: u32", u),
                  Self::UInt64(u) => write!(f, "{:?}: u64", u),
                  Self::Int8(i) => write!(f, "{:?}: i8", i),
                  Self::Int16(i) => write!(f, "{:?}: i16", i),
                  Self::Int32(i) => write!(f, "{:?}: i32", i),
                  Self::Int64(i) => write!(f, "{:?}: i64", i),
                  Self::Float32(v) => write!(f, "{:?}: f32", v),
                  Self::Float64(v) => write!(f, "{:?}: f64", v),
                  Self::None => write!(f, "None"),
              }
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Duration",
                          0
                        |) in
                      let d := M.alloc (| γ1_0 |) in
                      let~ dt :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "chrono::datetime::DateTime")
                                [ Ty.path "chrono::offset::utc::Utc" ],
                              "from_timestamp_nanos",
                              []
                            |),
                            [
                              M.rust_cast
                                (M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::time::Duration",
                                    "as_nanos",
                                    []
                                  |),
                                  [ M.read (| d |) ]
                                |))
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "chrono::datetime::DateTime")
                                                [ Ty.path "chrono::offset::utc::Utc" ]
                                            ]
                                          |),
                                          [ dt ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Boolean",
                          0
                        |) in
                      let b := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": bool" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "bool" ] ]
                                          |),
                                          [ b ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::String",
                          0
                        |) in
                      let s := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": string" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.path "alloc::string::String" ]
                                            ]
                                          |),
                                          [ s ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt8",
                          0
                        |) in
                      let u := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": u8" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "u8" ] ]
                                          |),
                                          [ u ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt16",
                          0
                        |) in
                      let u := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": u16" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "u16" ] ]
                                          |),
                                          [ u ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt32",
                          0
                        |) in
                      let u := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": u32" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                          |),
                                          [ u ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::UInt64",
                          0
                        |) in
                      let u := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": u64" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ]
                                          |),
                                          [ u ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int8",
                          0
                        |) in
                      let i := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": i8" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "i8" ] ]
                                          |),
                                          [ i ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int16",
                          0
                        |) in
                      let i := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": i16" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "i16" ] ]
                                          |),
                                          [ i ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int32",
                          0
                        |) in
                      let i := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": i32" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "i32" ] ]
                                          |),
                                          [ i ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Int64",
                          0
                        |) in
                      let i := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": i64" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "i64" ] ]
                                          |),
                                          [ i ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float32",
                          0
                        |) in
                      let v := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": f32" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "ordered_float::OrderedFloat")
                                                    [ Ty.path "f32" ]
                                                ]
                                            ]
                                          |),
                                          [ v ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "picachv_core::policy::types::AnyValue::Float64",
                          0
                        |) in
                      let v := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.read (| Value.String "" |);
                                        M.read (| Value.String ": f64" |)
                                      ]
                                  |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "ordered_float::OrderedFloat")
                                                    [ Ty.path "f64" ]
                                                ]
                                            ]
                                          |),
                                          [ v ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (| γ, "picachv_core::policy::types::AnyValue::None" |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (| Value.Array [ M.read (| Value.String "None" |) ] |))
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_picachv_core_policy_types_AnyValue.
    
    Module Impl_core_convert_TryFrom_picachv_message_PrimitiveValue_for_picachv_core_policy_types_AnyValue.
      Definition Self : Ty.t := Ty.path "picachv_core::policy::types::AnyValue".
      
      (*     type Error = PicachvError; *)
      Definition _Error : Ty.t := Ty.path "picachv_error::PicachvError".
      
      (*
          fn try_from(value: PrimitiveValue) -> PicachvResult<Self> {
              use picachv_message::primitive_value::Value;
      
              match value.value {
                  Some(v) => Ok(match v {
                      Value::Bool(b) => Self::Boolean(b),
                      Value::I8(i) => Self::Int8(i as _),
                      Value::I16(i) => Self::Int16(i as _),
                      Value::I32(i) => Self::Int32(i),
                      Value::I64(i) => Self::Int64(i),
                      Value::U8(u) => Self::UInt8(u as _),
                      Value::U16(u) => Self::UInt16(u as _),
                      Value::U32(u) => Self::UInt32(u),
                      Value::U64(u) => Self::UInt64(u),
                      Value::F32(f) => Self::Float32(OrderedFloat(f as _)),
                      Value::F64(f) => Self::Float64(OrderedFloat(f)),
                      Value::Str(s) => Self::String(s),
                      Value::Duration(d) => Self::Duration(Duration::new(d.sec as _, d.nsec as _)),
                  }),
                  None => Err(PicachvError::ComputeError("The value is empty.".into())),
              }
          }
      *)
      Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| value |) in
            M.read (|
              M.match_operator (|
                M.SubPointer.get_struct_record_field (|
                  value,
                  "picachv_message::PrimitiveValue",
                  "value"
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let v := M.copy (| γ0_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Ok"
                          [
                            M.read (|
                              M.match_operator (|
                                v,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::Bool",
                                          0
                                        |) in
                                      let b := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Boolean"
                                          [ M.read (| b |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::I8",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Int8"
                                          [ M.rust_cast (M.read (| i |)) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::I16",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Int16"
                                          [ M.rust_cast (M.read (| i |)) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::I32",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Int32"
                                          [ M.read (| i |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::I64",
                                          0
                                        |) in
                                      let i := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Int64"
                                          [ M.read (| i |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::U8",
                                          0
                                        |) in
                                      let u := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::UInt8"
                                          [ M.rust_cast (M.read (| u |)) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::U16",
                                          0
                                        |) in
                                      let u := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::UInt16"
                                          [ M.rust_cast (M.read (| u |)) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::U32",
                                          0
                                        |) in
                                      let u := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::UInt32"
                                          [ M.read (| u |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::U64",
                                          0
                                        |) in
                                      let u := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::UInt64"
                                          [ M.read (| u |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::F32",
                                          0
                                        |) in
                                      let f := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Float32"
                                          [
                                            Value.StructTuple
                                              "ordered_float::OrderedFloat"
                                              [ M.read (| M.use f |) ]
                                          ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::F64",
                                          0
                                        |) in
                                      let f := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Float64"
                                          [
                                            Value.StructTuple
                                              "ordered_float::OrderedFloat"
                                              [ M.read (| f |) ]
                                          ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::Str",
                                          0
                                        |) in
                                      let s := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::String"
                                          [ M.read (| s |) ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "picachv_message::primitive_value::Value::Duration",
                                          0
                                        |) in
                                      let d := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "picachv_core::policy::types::AnyValue::Duration"
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::time::Duration",
                                                "new",
                                                []
                                              |),
                                              [
                                                M.rust_cast
                                                  (M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      d,
                                                      "picachv_message::primitive_value::Duration",
                                                      "sec"
                                                    |)
                                                  |));
                                                M.rust_cast
                                                  (M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      d,
                                                      "picachv_message::primitive_value::Duration",
                                                      "nsec"
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          ]
                                      |)))
                                ]
                              |)
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::result::Result::Err"
                          [
                            Value.StructTuple
                              "picachv_error::PicachvError::ComputeError"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                    [ Ty.path "picachv_error::ErrString" ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| Value.String "The value is empty." |) ]
                                |)
                              ]
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          Self
          (* Trait polymorphic types *) [ (* T *) Ty.path "picachv_message::PrimitiveValue" ]
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_picachv_message_PrimitiveValue_for_picachv_core_policy_types_AnyValue.
  End types.
End policy.
