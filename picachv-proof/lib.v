(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition value_ALLOC : Value.t :=
  M.run
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.StructTuple "jemallocator::Jemalloc" [] |) |))).

Module underscore.
  (* static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc; *)
  Definition __rust_alloc (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ size; align ] =>
      ltac:(M.monadic
        (let size := M.alloc (| size |) in
        let align := M.alloc (| align |) in
        M.call_closure (|
          M.get_trait_method (|
            "core::alloc::global::GlobalAlloc",
            Ty.path "jemallocator::Jemalloc",
            [],
            "alloc",
            []
          |),
          [
            M.read (| M.get_constant (| "picachv_core::ALLOC" |) |);
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::alloc::layout::Layout",
                "from_size_align_unchecked",
                []
              |),
              [ M.read (| size |); M.read (| align |) ]
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function___rust_alloc : M.IsFunction "picachv_core::_::__rust_alloc" __rust_alloc.
  
  (* static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc; *)
  Definition __rust_dealloc (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ ptr; size; align ] =>
      ltac:(M.monadic
        (let ptr := M.alloc (| ptr |) in
        let size := M.alloc (| size |) in
        let align := M.alloc (| align |) in
        M.call_closure (|
          M.get_trait_method (|
            "core::alloc::global::GlobalAlloc",
            Ty.path "jemallocator::Jemalloc",
            [],
            "dealloc",
            []
          |),
          [
            M.read (| M.get_constant (| "picachv_core::ALLOC" |) |);
            M.read (| ptr |);
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::alloc::layout::Layout",
                "from_size_align_unchecked",
                []
              |),
              [ M.read (| size |); M.read (| align |) ]
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function___rust_dealloc : M.IsFunction "picachv_core::_::__rust_dealloc" __rust_dealloc.
  
  (* static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc; *)
  Definition __rust_realloc (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ ptr; size; align; new_size ] =>
      ltac:(M.monadic
        (let ptr := M.alloc (| ptr |) in
        let size := M.alloc (| size |) in
        let align := M.alloc (| align |) in
        let new_size := M.alloc (| new_size |) in
        M.call_closure (|
          M.get_trait_method (|
            "core::alloc::global::GlobalAlloc",
            Ty.path "jemallocator::Jemalloc",
            [],
            "realloc",
            []
          |),
          [
            M.read (| M.get_constant (| "picachv_core::ALLOC" |) |);
            M.read (| ptr |);
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::alloc::layout::Layout",
                "from_size_align_unchecked",
                []
              |),
              [ M.read (| size |); M.read (| align |) ]
            |);
            M.read (| new_size |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function___rust_realloc : M.IsFunction "picachv_core::_::__rust_realloc" __rust_realloc.
  
  (* static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc; *)
  Definition __rust_alloc_zeroed (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ size; align ] =>
      ltac:(M.monadic
        (let size := M.alloc (| size |) in
        let align := M.alloc (| align |) in
        M.call_closure (|
          M.get_trait_method (|
            "core::alloc::global::GlobalAlloc",
            Ty.path "jemallocator::Jemalloc",
            [],
            "alloc_zeroed",
            []
          |),
          [
            M.read (| M.get_constant (| "picachv_core::ALLOC" |) |);
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::alloc::layout::Layout",
                "from_size_align_unchecked",
                []
              |),
              [ M.read (| size |); M.read (| align |) ]
            |)
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Function___rust_alloc_zeroed :
    M.IsFunction "picachv_core::_::__rust_alloc_zeroed" __rust_alloc_zeroed.
End underscore.

(* StructRecord
  {
    name := "Arenas";
    ty_params := [];
    fields :=
      [
        ("expr_arena",
          Ty.apply
            (Ty.path "alloc::sync::Arc")
            [
              Ty.apply
                (Ty.path "spin::rwlock::RwLock")
                [
                  Ty.apply
                    (Ty.path "picachv_core::arena::Arena")
                    [ Ty.path "picachv_core::expr::Expr" ];
                  Ty.path "spin::relax::Spin"
                ];
              Ty.path "alloc::alloc::Global"
            ]);
        ("df_arena",
          Ty.apply
            (Ty.path "alloc::sync::Arc")
            [
              Ty.apply
                (Ty.path "spin::rwlock::RwLock")
                [
                  Ty.apply
                    (Ty.path "picachv_core::arena::Arena")
                    [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ];
                  Ty.path "spin::relax::Spin"
                ];
              Ty.path "alloc::alloc::Global"
            ])
      ];
  } *)

Module Impl_core_fmt_Debug_for_picachv_core_Arenas.
  Definition Self : Ty.t := Ty.path "picachv_core::Arenas".
  
  (* Debug *)
  Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          M.get_associated_function (|
            Ty.path "core::fmt::Formatter",
            "debug_struct_field2_finish",
            []
          |),
          [
            M.read (| f |);
            M.read (| Value.String "Arenas" |);
            M.read (| Value.String "expr_arena" |);
            (* Unsize *)
            M.pointer_coercion
              (M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "picachv_core::Arenas",
                "expr_arena"
              |));
            M.read (| Value.String "df_arena" |);
            (* Unsize *)
            M.pointer_coercion
              (M.alloc (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::Arenas",
                  "df_arena"
                |)
              |))
          ]
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_picachv_core_Arenas.

Module Impl_core_default_Default_for_picachv_core_Arenas.
  Definition Self : Ty.t := Ty.path "picachv_core::Arenas".
  
  (*
      fn default() -> Self {
          Self::new()
      }
  *)
  Definition default (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic
        (M.call_closure (|
          M.get_associated_function (| Ty.path "picachv_core::Arenas", "new", [] |),
          []
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::default::Default"
      Self
      (* Trait polymorphic types *) []
      (* Instance *) [ ("default", InstanceField.Method default) ].
End Impl_core_default_Default_for_picachv_core_Arenas.

Module Impl_picachv_core_Arenas.
  Definition Self : Ty.t := Ty.path "picachv_core::Arenas".
  
  (*
      pub fn new() -> Self {
          Arenas {
              expr_arena: Arc::new(RwLock::new(ExprArena::new("expr_arena".into()))),
              df_arena: Arc::new(RwLock::new(Arena::new("df_arena".into()))),
          }
      }
  *)
  Definition new (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [] =>
      ltac:(M.monadic
        (Value.StructRecord
          "picachv_core::Arenas"
          [
            ("expr_arena",
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    [
                      Ty.apply
                        (Ty.path "spin::rwlock::RwLock")
                        [
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::expr::Expr" ];
                          Ty.path "spin::relax::Spin"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "new",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "spin::rwlock::RwLock")
                        [
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::expr::Expr" ];
                          Ty.path "spin::relax::Spin"
                        ],
                      "new",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::expr::Expr" ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.apply (Ty.path "&") [ Ty.path "str" ],
                              [ Ty.path "alloc::string::String" ],
                              "into",
                              []
                            |),
                            [ M.read (| Value.String "expr_arena" |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |));
            ("df_arena",
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    [
                      Ty.apply
                        (Ty.path "spin::rwlock::RwLock")
                        [
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ];
                          Ty.path "spin::relax::Spin"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "new",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "spin::rwlock::RwLock")
                        [
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ];
                          Ty.path "spin::relax::Spin"
                        ],
                      "new",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.apply (Ty.path "&") [ Ty.path "str" ],
                              [ Ty.path "alloc::string::String" ],
                              "into",
                              []
                            |),
                            [ M.read (| Value.String "df_arena" |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |))
          ]))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
  
  (*
      pub fn build_expr(&self, arg: ExprArgument) -> PicachvResult<Uuid> {
          let arg = arg.argument.ok_or(PicachvError::InvalidOperation(
              "The argument is empty.".into(),
          ))?;
  
          let expr = Expr::from_args(self, arg)?;
  
          let mut lock = self.expr_arena.write();
          lock.insert(expr)
      }
  *)
  Definition build_expr (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ self; arg ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let arg := M.alloc (| arg |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let~ arg :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "picachv_message::expr_argument::Argument";
                              Ty.path "picachv_error::PicachvError"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [ Ty.path "picachv_message::expr_argument::Argument" ],
                              "ok_or",
                              [ Ty.path "picachv_error::PicachvError" ]
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  arg,
                                  "picachv_message::ExprArgument",
                                  "argument"
                                |)
                              |);
                              Value.StructTuple
                                "picachv_error::PicachvError::InvalidOperation"
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                      [ Ty.path "picachv_error::ErrString" ],
                                      "into",
                                      []
                                    |),
                                    [ M.read (| Value.String "The argument is empty." |) ]
                                  |)
                                ]
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "uuid::Uuid";
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "picachv_error::PicachvError"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let~ expr :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "picachv_core::expr::Expr";
                              Ty.path "picachv_error::PicachvError"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "picachv_core::expr::Expr",
                              "from_args",
                              []
                            |),
                            [ M.read (| self |); M.read (| arg |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "uuid::Uuid";
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "picachv_error::PicachvError"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let~ lock :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "spin::rwlock::RwLock")
                        [
                          Ty.apply
                            (Ty.path "picachv_core::arena::Arena")
                            [ Ty.path "picachv_core::expr::Expr" ];
                          Ty.path "spin::relax::Spin"
                        ],
                      "write",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.apply
                                (Ty.path "spin::rwlock::RwLock")
                                [
                                  Ty.apply
                                    (Ty.path "picachv_core::arena::Arena")
                                    [ Ty.path "picachv_core::expr::Expr" ];
                                  Ty.path "spin::relax::Spin"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "picachv_core::Arenas",
                            "expr_arena"
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "picachv_core::arena::Arena")
                      [ Ty.path "picachv_core::expr::Expr" ],
                    "insert",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.apply
                          (Ty.path "spin::rwlock::RwLockWriteGuard")
                          [
                            Ty.apply
                              (Ty.path "picachv_core::arena::Arena")
                              [ Ty.path "picachv_core::expr::Expr" ];
                            Ty.path "spin::relax::Spin"
                          ],
                        [],
                        "deref_mut",
                        []
                      |),
                      [ lock ]
                    |);
                    M.read (| expr |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Axiom AssociatedFunction_build_expr : M.IsAssociatedFunction Self "build_expr" build_expr.
End Impl_picachv_core_Arenas.

(*
pub fn get_new_uuid() -> Uuid {
    Uuid::new_v4()
}
*)
Definition get_new_uuid (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [] =>
    ltac:(M.monadic
      (M.call_closure (| M.get_associated_function (| Ty.path "uuid::Uuid", "new_v4", [] |), [] |)))
  | _, _ => M.impossible
  end.

Axiom Function_get_new_uuid : M.IsFunction "picachv_core::get_new_uuid" get_new_uuid.

(*
pub fn arrays_into_bytes(arrays: Vec<Arc<dyn Array>>) -> PicachvResult<Vec<u8>> {
    let arrays = arrays.into_iter().map(|e| ("", e)).collect::<Vec<_>>();
    let rb = RecordBatch::try_from_iter(arrays).map_err(|e| {
        PicachvError::InvalidOperation(format!("Failed to create record batch. {e}").into())
    })?;

    let mut ipc_writer = StreamWriter::try_new(vec![], &rb.schema()).map_err(|e| {
        PicachvError::InvalidOperation(format!("Failed to create IPC writer. {e}").into())
    })?;
    ipc_writer.write(&rb).map_err(|e| {
        PicachvError::InvalidOperation(format!("Failed to write record batch. {e}").into())
    })?;
    ipc_writer.finish().map_err(|e| {
        PicachvError::InvalidOperation(format!("Failed to finish IPC writer. {e}").into())
    })?;

    Ok(ipc_writer.get_ref().to_vec())
}
*)
Definition arrays_into_bytes (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ arrays ] =>
    ltac:(M.monadic
      (let arrays := M.alloc (| arrays |) in
      M.catch_return (|
        ltac:(M.monadic
          (M.read (|
            let~ arrays :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [ Ty.path "str" ];
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ])
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [ Ty.path "str" ];
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "map",
                        [
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [ Ty.path "str" ];
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [ M.read (| arrays |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let e := M.copy (| γ |) in
                                        Value.Tuple
                                          [ M.read (| Value.String "" |); M.read (| e |) ]))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ rb :=
              M.copy (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.path "arrow_array::record_batch::RecordBatch";
                            Ty.path "picachv_error::PicachvError"
                          ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.path "arrow_array::record_batch::RecordBatch";
                                Ty.path "arrow_schema::error::ArrowError"
                              ],
                            "map_err",
                            [
                              Ty.path "picachv_error::PicachvError";
                              Ty.function
                                [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                (Ty.path "picachv_error::PicachvError")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "arrow_array::record_batch::RecordBatch",
                                "try_from_iter",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                ]
                              |),
                              [ M.read (| arrays |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let e := M.copy (| γ |) in
                                            Value.StructTuple
                                              "picachv_error::PicachvError::InvalidOperation"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_v1",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "Failed to create record batch. "
                                                                          |)
                                                                        ]
                                                                    |));
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [
                                                                                Ty.path
                                                                                  "arrow_schema::error::ArrowError"
                                                                              ]
                                                                            |),
                                                                            [ e ]
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "picachv_error::PicachvError"
                                      ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |)
              |) in
            let~ ipc_writer :=
              M.copy (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "arrow_ipc::writer::StreamWriter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "picachv_error::PicachvError"
                          ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "arrow_ipc::writer::StreamWriter")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                  ];
                                Ty.path "arrow_schema::error::ArrowError"
                              ],
                            "map_err",
                            [
                              Ty.path "picachv_error::PicachvError";
                              Ty.function
                                [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                (Ty.path "picachv_error::PicachvError")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "arrow_ipc::writer::StreamWriter")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                  ],
                                "try_new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                    "new",
                                    []
                                  |),
                                  []
                                |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "arrow_schema::schema::Schema";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "arrow_array::record_batch::RecordBatch",
                                          "schema",
                                          []
                                        |),
                                        [ rb ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let e := M.copy (| γ |) in
                                            Value.StructTuple
                                              "picachv_error::PicachvError::InvalidOperation"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_v1",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "Failed to create IPC writer. "
                                                                          |)
                                                                        ]
                                                                    |));
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [
                                                                                Ty.path
                                                                                  "arrow_schema::error::ArrowError"
                                                                              ]
                                                                            |),
                                                                            [ e ]
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "picachv_error::PicachvError"
                                      ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |)
              |) in
            let~ _ :=
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::try_trait::Try",
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                      [],
                      "branch",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "arrow_schema::error::ArrowError" ],
                          "map_err",
                          [
                            Ty.path "picachv_error::PicachvError";
                            Ty.function
                              [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                              (Ty.path "picachv_error::PicachvError")
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "arrow_ipc::writer::StreamWriter")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                ],
                              "write",
                              []
                            |),
                            [ ipc_writer; rb ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let e := M.copy (| γ |) in
                                          Value.StructTuple
                                            "picachv_error::PicachvError::InvalidOperation"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "Failed to write record batch. "
                                                                        |)
                                                                      ]
                                                                  |));
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [
                                                                              Ty.path
                                                                                "arrow_schema::error::ArrowError"
                                                                            ]
                                                                          |),
                                                                          [ e ]
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::ops::control_flow::ControlFlow::Break",
                          0
                        |) in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.read (|
                            M.return_ (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::FromResidual",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "picachv_error::PicachvError"
                                    ],
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "picachv_error::PicachvError"
                                      ]
                                  ],
                                  "from_residual",
                                  []
                                |),
                                [ M.read (| residual |) ]
                              |)
                            |)
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::ops::control_flow::ControlFlow::Continue",
                          0
                        |) in
                      let val := M.copy (| γ0_0 |) in
                      val))
                ]
              |) in
            let~ _ :=
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::try_trait::Try",
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                      [],
                      "branch",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "arrow_schema::error::ArrowError" ],
                          "map_err",
                          [
                            Ty.path "picachv_error::PicachvError";
                            Ty.function
                              [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                              (Ty.path "picachv_error::PicachvError")
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "arrow_ipc::writer::StreamWriter")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                ],
                              "finish",
                              []
                            |),
                            [ ipc_writer ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let e := M.copy (| γ |) in
                                          Value.StructTuple
                                            "picachv_error::PicachvError::InvalidOperation"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "alloc::string::String",
                                                  [ Ty.path "picachv_error::ErrString" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String
                                                                            "Failed to finish IPC writer. "
                                                                        |)
                                                                      ]
                                                                  |));
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [
                                                                              Ty.path
                                                                                "arrow_schema::error::ArrowError"
                                                                            ]
                                                                          |),
                                                                          [ e ]
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::ops::control_flow::ControlFlow::Break",
                          0
                        |) in
                      let residual := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.read (|
                            M.return_ (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::FromResidual",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "picachv_error::PicachvError"
                                    ],
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "picachv_error::PicachvError"
                                      ]
                                  ],
                                  "from_residual",
                                  []
                                |),
                                [ M.read (| residual |) ]
                              |)
                            |)
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::ops::control_flow::ControlFlow::Continue",
                          0
                        |) in
                      let val := M.copy (| γ0_0 |) in
                      val))
                ]
              |) in
            M.alloc (|
              Value.StructTuple
                "core::result::Result::Ok"
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                      "to_vec",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "arrow_ipc::writer::StreamWriter")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                ],
                              "get_ref",
                              []
                            |),
                            [ ipc_writer ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
            |)
          |)))
      |)))
  | _, _ => M.impossible
  end.

Axiom Function_arrays_into_bytes : M.IsFunction "picachv_core::arrays_into_bytes" arrays_into_bytes.

(*
pub fn record_batch_from_bytes(value: &[u8]) -> PicachvResult<RecordBatch> {
    let ipc_reader = StreamReader::try_new(value, None).map_err(|e| {
        PicachvError::InvalidOperation(format!("Failed to create IPC reader. {e}").into())
    })?;

    let schema = ipc_reader.schema();

    let rb = ipc_reader
        .map(|e| e.map_err(|e| PicachvError::ComputeError(e.to_string().into())))
        .collect::<PicachvResult<Vec<_>>>()?;

    arrow_select::concat::concat_batches(&schema, &rb)
        .map_err(|e| PicachvError::ComputeError(format!("Failed to concat batches. {e}").into()))
}
*)
Definition record_batch_from_bytes (τ : list Ty.t) (α : list Value.t) : M :=
  match τ, α with
  | [], [ value ] =>
    ltac:(M.monadic
      (let value := M.alloc (| value |) in
      M.catch_return (|
        ltac:(M.monadic
          (M.read (|
            let~ ipc_reader :=
              M.copy (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "arrow_ipc::reader::StreamReader")
                              [
                                Ty.apply
                                  (Ty.path "std::io::buffered::bufreader::BufReader")
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                  ]
                              ];
                            Ty.path "picachv_error::PicachvError"
                          ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "arrow_ipc::reader::StreamReader")
                                  [
                                    Ty.apply
                                      (Ty.path "std::io::buffered::bufreader::BufReader")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                      ]
                                  ];
                                Ty.path "arrow_schema::error::ArrowError"
                              ],
                            "map_err",
                            [
                              Ty.path "picachv_error::PicachvError";
                              Ty.function
                                [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                (Ty.path "picachv_error::PicachvError")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "arrow_ipc::reader::StreamReader")
                                  [
                                    Ty.apply
                                      (Ty.path "std::io::buffered::bufreader::BufReader")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                      ]
                                  ],
                                "try_new",
                                []
                              |),
                              [
                                M.read (| value |);
                                Value.StructTuple "core::option::Option::None" []
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let e := M.copy (| γ |) in
                                            Value.StructTuple
                                              "picachv_error::PicachvError::InvalidOperation"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_v1",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "Failed to create IPC reader. "
                                                                          |)
                                                                        ]
                                                                    |));
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [
                                                                                Ty.path
                                                                                  "arrow_schema::error::ArrowError"
                                                                              ]
                                                                            |),
                                                                            [ e ]
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "arrow_array::record_batch::RecordBatch";
                                        Ty.path "picachv_error::PicachvError"
                                      ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |)
              |) in
            let~ schema :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "arrow_ipc::reader::StreamReader")
                      [
                        Ty.apply
                          (Ty.path "std::io::buffered::bufreader::BufReader")
                          [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ] ]
                      ],
                    "schema",
                    []
                  |),
                  [ ipc_reader ]
                |)
              |) in
            let~ rb :=
              M.copy (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "arrow_array::record_batch::RecordBatch";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "picachv_error::PicachvError"
                          ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              [
                                Ty.apply
                                  (Ty.path "arrow_ipc::reader::StreamReader")
                                  [
                                    Ty.apply
                                      (Ty.path "std::io::buffered::bufreader::BufReader")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "arrow_array::record_batch::RecordBatch";
                                            Ty.path "arrow_schema::error::ArrowError"
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "arrow_array::record_batch::RecordBatch";
                                      Ty.path "picachv_error::PicachvError"
                                    ])
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "arrow_array::record_batch::RecordBatch";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "picachv_error::PicachvError"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "arrow_ipc::reader::StreamReader")
                                  [
                                    Ty.apply
                                      (Ty.path "std::io::buffered::bufreader::BufReader")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                      ]
                                  ],
                                [],
                                "map",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "arrow_array::record_batch::RecordBatch";
                                      Ty.path "picachv_error::PicachvError"
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "arrow_array::record_batch::RecordBatch";
                                              Ty.path "arrow_schema::error::ArrowError"
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "arrow_array::record_batch::RecordBatch";
                                        Ty.path "picachv_error::PicachvError"
                                      ])
                                ]
                              |),
                              [
                                M.read (| ipc_reader |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path
                                                          "arrow_array::record_batch::RecordBatch";
                                                        Ty.path "arrow_schema::error::ArrowError"
                                                      ],
                                                    "map_err",
                                                    [
                                                      Ty.path "picachv_error::PicachvError";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path
                                                                "arrow_schema::error::ArrowError"
                                                            ]
                                                        ]
                                                        (Ty.path "picachv_error::PicachvError")
                                                    ]
                                                  |),
                                                  [
                                                    M.read (| e |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let e := M.copy (| γ |) in
                                                                    Value.StructTuple
                                                                      "picachv_error::PicachvError::ComputeError"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::Into",
                                                                            Ty.path
                                                                              "alloc::string::String",
                                                                            [
                                                                              Ty.path
                                                                                "picachv_error::ErrString"
                                                                            ],
                                                                            "into",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "alloc::string::ToString",
                                                                                Ty.path
                                                                                  "arrow_schema::error::ArrowError",
                                                                                [],
                                                                                "to_string",
                                                                                []
                                                                              |),
                                                                              [ e ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "arrow_array::record_batch::RecordBatch";
                                        Ty.path "picachv_error::PicachvError"
                                      ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "picachv_error::PicachvError"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [
                      Ty.path "arrow_array::record_batch::RecordBatch";
                      Ty.path "arrow_schema::error::ArrowError"
                    ],
                  "map_err",
                  [
                    Ty.path "picachv_error::PicachvError";
                    Ty.function
                      [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                      (Ty.path "picachv_error::PicachvError")
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_function (|
                      "arrow_select::concat::concat_batches",
                      [
                        Ty.apply
                          (Ty.path "&")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "arrow_array::record_batch::RecordBatch";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ]
                    |),
                    [ schema; rb ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let e := M.copy (| γ |) in
                                  Value.StructTuple
                                    "picachv_error::PicachvError::ComputeError"
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "alloc::string::String",
                                          [ Ty.path "picachv_error::ErrString" ],
                                          "into",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            let~ res :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (| "alloc::fmt::format", [] |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_v1",
                                                        []
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "Failed to concat batches. "
                                                                |)
                                                              ]
                                                          |));
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.path
                                                                        "arrow_schema::error::ArrowError"
                                                                    ]
                                                                  |),
                                                                  [ e ]
                                                                |)
                                                              ]
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            res
                                          |)
                                        ]
                                      |)
                                    ]))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)
            |)
          |)))
      |)))
  | _, _ => M.impossible
  end.

Axiom Function_record_batch_from_bytes :
  M.IsFunction "picachv_core::record_batch_from_bytes" record_batch_from_bytes.
