(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plan.
  Module builder.
    Module Impl_picachv_core_plan_Plan.
      Definition Self : Ty.t := Ty.path "picachv_core::plan::Plan".
      
      (*
          pub fn from_args(arenas: &Arenas, arg: plan_argument::Argument) -> PicachvResult<Self> {
              use plan_argument::Argument;
      
              tracing::debug!("Building logical plan from the arguments {arg:?}");
              let df_arena = arenas.df_arena.write();
              match arg {
                  Argument::GetData(data_source) => match data_source.data_source {
                      Some(data_source) => match data_source {
                          DataSource::FromFile(_) => {
                              Err(PicachvError::ComputeError("Not implemented!".into()))
                          },
                          DataSource::InMemory(memory) => {
                              let df_uuid =
                                  Uuid::from_slice_le(memory.df_uuid.as_slice()).map_err(|_| {
                                      PicachvError::InvalidOperation(
                                          "The UUID for the dataframe is invalid.".into(),
                                      )
                                  })?;
      
                              // A sanity check to ensure that the UUID exists in the arena.
                              df_arena.get(&df_uuid)?;
                              let selection = memory
                                  .pred
                                  .as_ref()
                                  .cloned()
                                  .map(|pred| {
                                      Uuid::from_slice_le(pred.as_slice()).map_err(|_| {
                                          PicachvError::InvalidOperation("The UUID is invalid.".into())
                                      })
                                  })
                                  .transpose()?;
      
                              Ok(Plan::DataFrameScan {
                                  projection: memory
                                      .project_list
                                      .map(|e| e.project_list.into_iter().map(|e| e as usize).collect()),
                                  selection,
                              })
                          },
                      },
                      None => Err(PicachvError::InvalidOperation(
                          "The data source is empty; It must not be empty".into(),
                      )),
                  },
                  Argument::Projection(proj_arg) => {
                      // For each expression in the list, we can get the expression from the arena
                      // by using the UUID since we have already stored the expression in the arena
                      // when the caller is constructing the physical expression and physical plan,
                      // and then we can construct the logical plan.
                      let proj_list = proj_arg
                          .expressions
                          .into_iter()
                          .map(|expr| {
                              Uuid::from_slice_le(expr.as_slice()).map_err(|_| {
                                  PicachvError::InvalidOperation("The UUID is invalid.".into())
                              })
                          })
                          .collect::<PicachvResult<Vec<_>>>()?;
      
                      Ok(Plan::Projection {
                          expressions: proj_list,
                      })
                  },
      
                  Argument::Select(select_arg) => {
                      let expr_uuid = Uuid::from_slice_le(select_arg.pred_uuid.as_slice())
                          .map_err(|_| PicachvError::InvalidOperation("The UUID is invalid.".into()))?;
                      Ok(Plan::Select {
                          predicate: expr_uuid,
                      })
                  },
      
                  Argument::Aggregate(AggregateArgument {
                      keys,
                      aggs_uuid,
                      maintain_order,
                      group_by_proxy,
                      output_schema,
                  }) => {
                      let keys = keys
                          .into_iter()
                          .map(|e| {
                              Uuid::from_slice_le(e.as_slice()).map_err(|_| {
                                  PicachvError::InvalidOperation("The UUID is invalid.".into())
                              })
                          })
                          .collect::<PicachvResult<Vec<_>>>()?;
                      let aggs = aggs_uuid
                          .into_iter()
                          .map(|e| {
                              Uuid::from_slice_le(e.as_slice()).map_err(|_| {
                                  PicachvError::InvalidOperation("The UUID is invalid.".into())
                              })
                          })
                          .collect::<PicachvResult<Vec<_>>>()?;
      
                      Ok(Plan::Aggregation {
                          keys,
                          aggs,
                          maintain_order,
                          gb_proxy: group_by_proxy.ok_or(PicachvError::InvalidOperation(
                              "The group by proxy is empty.".into(),
                          ))?,
                          output_schema,
                      })
                  },
                  Argument::Hstack(HstackArgument { cse, expressions }) => {
                      let cse_expressions = cse
                          .into_iter()
                          .map(|expr| {
                              Uuid::from_slice_le(expr.as_slice()).map_err(|_| {
                                  PicachvError::InvalidOperation("The UUID is invalid.".into())
                              })
                          })
                          .collect::<PicachvResult<Vec<_>>>()?;
                      let expressions = expressions
                          .into_iter()
                          .map(|expr| {
                              Uuid::from_slice_le(expr.as_slice()).map_err(|_| {
                                  PicachvError::InvalidOperation("The UUID is invalid.".into())
                              })
                          })
                          .collect::<PicachvResult<Vec<_>>>()?;
                      Ok(Plan::Hstack {
                          cse_expressions,
                          expressions,
                      })
                  },
                  _ => Err(PicachvError::ComputeError("Not implemented!".into())),
              }
          }
      *)
      Definition from_args (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ arenas; arg ] =>
          ltac:(M.monadic
            (let arenas := M.alloc (| arenas |) in
            let arg := M.alloc (| arg |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ :=
                    let~ enabled :=
                      M.alloc (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                []
                              |),
                              [
                                M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                M.get_constant (| "tracing::level_filters::STATIC_MAX_LEVEL" |)
                              ]
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialOrd",
                                  Ty.path "tracing_core::metadata::Level",
                                  [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                  "le",
                                  []
                                |),
                                [
                                  M.get_constant (| "tracing_core::metadata::DEBUG" |);
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::metadata::LevelFilter",
                                        "current",
                                        []
                                      |),
                                      []
                                    |)
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.read (|
                              let~ interest :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::callsite::DefaultCallsite",
                                      "interest",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.get_constant (|
                                          "picachv_core::plan::builder::from_args::__CALLSITE"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "is_never",
                                        []
                                      |),
                                      [ interest ]
                                    |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_function (|
                                        "tracing::__macro_support::__is_enabled",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "tracing_core::callsite::Callsite",
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            [],
                                            "metadata",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.get_constant (|
                                                "picachv_core::plan::builder::from_args::__CALLSITE"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (| interest |)
                                      ]
                                    |)))
                                |)
                              |)
                            |)))
                        |)
                      |) in
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use enabled in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ]
                                      (Ty.tuple []),
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                    "call",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let value_set := M.copy (| γ |) in
                                                      M.read (|
                                                        let~ meta :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                "metadata",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.get_constant (|
                                                                    "picachv_core::plan::builder::from_args::__CALLSITE"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                []
                                                              |),
                                                              [ M.read (| meta |); value_set ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    |);
                                    Value.Tuple
                                      [
                                        M.read (|
                                          let~ iter :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::field::FieldSet",
                                                  "iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          "metadata",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "picachv_core::plan::builder::from_args::__CALLSITE"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "value_set",
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [ Ty.path "tracing_core::field::Field"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("tracing_core::field::Value::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::metadata::Metadata",
                                                    "fields",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        "metadata",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.get_constant (|
                                                            "picachv_core::plan::builder::from_args::__CALLSITE"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::Field"
                                                                  ],
                                                                "expect",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.path
                                                                      "tracing_core::field::Iter",
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "FieldSet corrupted (this is a bug)"
                                                                |)
                                                              ]
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              M.read (|
                                                                M.use
                                                                  (M.alloc (|
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "Building logical plan from the arguments "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_debug",
                                                                                        [
                                                                                          Ty.path
                                                                                            "picachv_message::plan_argument::Argument"
                                                                                        ]
                                                                                      |),
                                                                                      [ arg ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |))
                                                              |)
                                                            ]
                                                        ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ df_arena :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "spin::rwlock::RwLock")
                            [
                              Ty.apply
                                (Ty.path "picachv_core::arena::Arena")
                                [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame" ];
                              Ty.path "spin::relax::Spin"
                            ],
                          "write",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "spin::rwlock::RwLock")
                                    [
                                      Ty.apply
                                        (Ty.path "picachv_core::arena::Arena")
                                        [ Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame"
                                        ];
                                      Ty.path "spin::relax::Spin"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| arenas |),
                                "picachv_core::Arenas",
                                "df_arena"
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.match_operator (|
                    arg,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_message::plan_argument::Argument::GetData",
                              0
                            |) in
                          let data_source := M.copy (| γ0_0 |) in
                          M.match_operator (|
                            M.SubPointer.get_struct_record_field (|
                              data_source,
                              "picachv_message::GetDataArgument",
                              "data_source"
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let data_source := M.copy (| γ0_0 |) in
                                  M.match_operator (|
                                    data_source,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "picachv_message::get_data_argument::DataSource::FromFile",
                                              0
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::ComputeError"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [ M.read (| Value.String "Not implemented!" |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "picachv_message::get_data_argument::DataSource::InMemory",
                                              0
                                            |) in
                                          let memory := M.copy (| γ0_0 |) in
                                          let~ df_uuid :=
                                            M.copy (|
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "uuid::Uuid";
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "uuid::Uuid";
                                                              Ty.path "uuid::error::Error"
                                                            ],
                                                          "map_err",
                                                          [
                                                            Ty.path "picachv_error::PicachvError";
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [ Ty.path "uuid::error::Error" ]
                                                              ]
                                                              (Ty.path
                                                                "picachv_error::PicachvError")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "uuid::Uuid",
                                                              "from_slice_le",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u8";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "as_slice",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    memory,
                                                                    "picachv_message::GetDataInMemory",
                                                                    "df_uuid"
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (Value.StructTuple
                                                                            "picachv_error::PicachvError::InvalidOperation"
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [ Ty.path "str"
                                                                                    ],
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_error::ErrString"
                                                                                  ],
                                                                                  "into",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    Value.String
                                                                                      "The UUID for the dataframe is invalid."
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::plan::Plan";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "picachv_error::PicachvError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              [
                                                                Ty.path
                                                                  "picachv_core::dataframe::PolicyGuardedDataFrame";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "picachv_error::PicachvError"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "picachv_core::arena::Arena")
                                                          [
                                                            Ty.path
                                                              "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                          ],
                                                        "get",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "spin::rwlock::RwLockWriteGuard")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "picachv_core::arena::Arena")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::dataframe::PolicyGuardedDataFrame"
                                                                  ];
                                                                Ty.path "spin::relax::Spin"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ df_arena ]
                                                        |);
                                                        df_uuid
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "picachv_core::plan::Plan";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let~ selection :=
                                            M.copy (|
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "uuid::Uuid" ];
                                                          Ty.path "picachv_error::PicachvError"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path "uuid::Uuid";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]
                                                            ],
                                                          "transpose",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u8";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              "map",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path "uuid::Uuid";
                                                                    Ty.path
                                                                      "picachv_error::PicachvError"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path "u8";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  "cloned",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ],
                                                                      "as_ref",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        memory,
                                                                        "picachv_message::GetDataInMemory",
                                                                        "pred"
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let pred :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.path
                                                                                        "uuid::Uuid";
                                                                                      Ty.path
                                                                                        "uuid::error::Error"
                                                                                    ],
                                                                                  "map_err",
                                                                                  [
                                                                                    Ty.path
                                                                                      "picachv_error::PicachvError";
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "uuid::error::Error"
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.path
                                                                                        "picachv_error::PicachvError")
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "uuid::Uuid",
                                                                                      "from_slice_le",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "as_slice",
                                                                                          []
                                                                                        |),
                                                                                        [ pred ]
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.closure
                                                                                    (fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        match γ with
                                                                                        | [ α0 ] =>
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              α0
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (Value.StructTuple
                                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::convert::Into",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "str"
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_error::ErrString"
                                                                                                          ],
                                                                                                          "into",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            Value.String
                                                                                                              "The UUID is invalid."
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]))
                                                                                            ]
                                                                                          |)
                                                                                        | _ =>
                                                                                          M.impossible (||)
                                                                                        end))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::plan::Plan";
                                                                      Ty.path
                                                                        "picachv_error::PicachvError"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "picachv_error::PicachvError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [
                                                Value.StructRecord
                                                  "picachv_core::plan::Plan::DataFrameScan"
                                                  [
                                                    ("projection",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "picachv_message::get_data_in_memory::ProjectList"
                                                            ],
                                                          "map",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path
                                                                      "picachv_message::get_data_in_memory::ProjectList"
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ])
                                                          ]
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              memory,
                                                              "picachv_message::GetDataInMemory",
                                                              "project_list"
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let e :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::map::Map")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::into_iter::IntoIter")
                                                                                    [
                                                                                      Ty.path "u64";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.path
                                                                                      "usize")
                                                                                ],
                                                                              [],
                                                                              "collect",
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::into_iter::IntoIter")
                                                                                    [
                                                                                      Ty.path "u64";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "map",
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "u64"
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.path
                                                                                        "usize")
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          e,
                                                                                          "picachv_message::get_data_in_memory::ProjectList",
                                                                                          "project_list"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.closure
                                                                                    (fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        match γ with
                                                                                        | [ α0 ] =>
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              α0
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        e :=
                                                                                                    M.copy (|
                                                                                                      γ
                                                                                                    |) in
                                                                                                  M.rust_cast
                                                                                                    (M.read (|
                                                                                                      e
                                                                                                    |))))
                                                                                            ]
                                                                                          |)
                                                                                        | _ =>
                                                                                          M.impossible (||)
                                                                                        end))
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |));
                                                    ("selection", M.read (| selection |))
                                                  ]
                                              ]
                                          |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        Value.StructTuple
                                          "picachv_error::PicachvError::InvalidOperation"
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                                [ Ty.path "picachv_error::ErrString" ],
                                                "into",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  Value.String
                                                    "The data source is empty; It must not be empty"
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                  |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_message::plan_argument::Argument::Projection",
                              0
                            |) in
                          let proj_arg := M.copy (| γ0_0 |) in
                          let~ proj_list :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "uuid::Uuid"; Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      proj_arg,
                                                      "picachv_message::ProjectionArgument",
                                                      "expressions"
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let expr := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path "uuid::error::Error"
                                                                    ],
                                                                  "map_err",
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::PicachvError";
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "uuid::error::Error"
                                                                          ]
                                                                      ]
                                                                      (Ty.path
                                                                        "picachv_error::PicachvError")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "uuid::Uuid",
                                                                      "from_slice_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "as_slice",
                                                                          []
                                                                        |),
                                                                        [ expr ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (Value.StructTuple
                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_error::ErrString"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            Value.String
                                                                                              "The UUID is invalid."
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::plan::Plan::Projection"
                                  [ ("expressions", M.read (| proj_list |)) ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_message::plan_argument::Argument::Select",
                              0
                            |) in
                          let select_arg := M.copy (| γ0_0 |) in
                          let~ expr_uuid :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "uuid::Uuid";
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.path "uuid::Uuid"; Ty.path "uuid::error::Error" ],
                                          "map_err",
                                          [
                                            Ty.path "picachv_error::PicachvError";
                                            Ty.function
                                              [ Ty.tuple [ Ty.path "uuid::error::Error" ] ]
                                              (Ty.path "picachv_error::PicachvError")
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "uuid::Uuid",
                                              "from_slice_le",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "as_slice",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    select_arg,
                                                    "picachv_message::SelectArgument",
                                                    "pred_uuid"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (Value.StructTuple
                                                            "picachv_error::PicachvError::InvalidOperation"
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "str" ],
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::ErrString"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    Value.String
                                                                      "The UUID is invalid."
                                                                  |)
                                                                ]
                                                              |)
                                                            ]))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::plan::Plan::Select"
                                  [ ("predicate", M.read (| expr_uuid |)) ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_message::plan_argument::Argument::Aggregate",
                              0
                            |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::AggregateArgument",
                              "keys"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::AggregateArgument",
                              "aggs_uuid"
                            |) in
                          let γ1_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::AggregateArgument",
                              "maintain_order"
                            |) in
                          let γ1_3 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::AggregateArgument",
                              "group_by_proxy"
                            |) in
                          let γ1_4 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::AggregateArgument",
                              "output_schema"
                            |) in
                          let keys := M.copy (| γ1_0 |) in
                          let aggs_uuid := M.copy (| γ1_1 |) in
                          let maintain_order := M.copy (| γ1_2 |) in
                          let group_by_proxy := M.copy (| γ1_3 |) in
                          let output_schema := M.copy (| γ1_4 |) in
                          let~ keys :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "uuid::Uuid"; Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| keys |) ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let e := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path "uuid::error::Error"
                                                                    ],
                                                                  "map_err",
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::PicachvError";
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "uuid::error::Error"
                                                                          ]
                                                                      ]
                                                                      (Ty.path
                                                                        "picachv_error::PicachvError")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "uuid::Uuid",
                                                                      "from_slice_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "as_slice",
                                                                          []
                                                                        |),
                                                                        [ e ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (Value.StructTuple
                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_error::ErrString"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            Value.String
                                                                                              "The UUID is invalid."
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ aggs :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "uuid::Uuid"; Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| aggs_uuid |) ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let e := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path "uuid::error::Error"
                                                                    ],
                                                                  "map_err",
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::PicachvError";
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "uuid::error::Error"
                                                                          ]
                                                                      ]
                                                                      (Ty.path
                                                                        "picachv_error::PicachvError")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "uuid::Uuid",
                                                                      "from_slice_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "as_slice",
                                                                          []
                                                                        |),
                                                                        [ e ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (Value.StructTuple
                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_error::ErrString"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            Value.String
                                                                                              "The UUID is invalid."
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::plan::Plan::Aggregation"
                                  [
                                    ("keys", M.read (| keys |));
                                    ("aggs", M.read (| aggs |));
                                    ("maintain_order", M.read (| maintain_order |));
                                    ("gb_proxy",
                                      M.read (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "picachv_message::GroupByProxy";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "picachv_message::GroupByProxy" ],
                                                    "ok_or",
                                                    [ Ty.path "picachv_error::PicachvError" ]
                                                  |),
                                                  [
                                                    M.read (| group_by_proxy |);
                                                    Value.StructTuple
                                                      "picachv_error::PicachvError::InvalidOperation"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::Into",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "str" ],
                                                            [ Ty.path "picachv_error::ErrString" ],
                                                            "into",
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              Value.String
                                                                "The group by proxy is empty."
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "picachv_core::plan::Plan";
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |));
                                    ("output_schema", M.read (| output_schema |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "picachv_message::plan_argument::Argument::Hstack",
                              0
                            |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::HstackArgument",
                              "cse"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ0_0,
                              "picachv_message::HstackArgument",
                              "expressions"
                            |) in
                          let cse := M.copy (| γ1_0 |) in
                          let expressions := M.copy (| γ1_1 |) in
                          let~ cse_expressions :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "uuid::Uuid"; Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| cse |) ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let expr := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path "uuid::error::Error"
                                                                    ],
                                                                  "map_err",
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::PicachvError";
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "uuid::error::Error"
                                                                          ]
                                                                      ]
                                                                      (Ty.path
                                                                        "picachv_error::PicachvError")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "uuid::Uuid",
                                                                      "from_slice_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "as_slice",
                                                                          []
                                                                        |),
                                                                        [ expr ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (Value.StructTuple
                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_error::ErrString"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            Value.String
                                                                                              "The UUID is invalid."
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ expressions :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "uuid::Uuid"; Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "uuid::Uuid";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "uuid::Uuid";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u8";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| expressions |) ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let expr := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path "uuid::Uuid";
                                                                      Ty.path "uuid::error::Error"
                                                                    ],
                                                                  "map_err",
                                                                  [
                                                                    Ty.path
                                                                      "picachv_error::PicachvError";
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "uuid::error::Error"
                                                                          ]
                                                                      ]
                                                                      (Ty.path
                                                                        "picachv_error::PicachvError")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "uuid::Uuid",
                                                                      "from_slice_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path "u8";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "as_slice",
                                                                          []
                                                                        |),
                                                                        [ expr ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (Value.StructTuple
                                                                                    "picachv_error::PicachvError::InvalidOperation"
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "picachv_error::ErrString"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            Value.String
                                                                                              "The UUID is invalid."
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "picachv_core::plan::Plan";
                                                      Ty.path "picachv_error::PicachvError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "picachv_error::PicachvError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [
                                Value.StructRecord
                                  "picachv_core::plan::Plan::Hstack"
                                  [
                                    ("cse_expressions", M.read (| cse_expressions |));
                                    ("expressions", M.read (| expressions |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Err"
                              [
                                Value.StructTuple
                                  "picachv_error::PicachvError::ComputeError"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                        [ Ty.path "picachv_error::ErrString" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| Value.String "Not implemented!" |) ]
                                    |)
                                  ]
                              ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_args : M.IsAssociatedFunction Self "from_args" from_args.
    End Impl_picachv_core_plan_Plan.
  End builder.
End plan.
