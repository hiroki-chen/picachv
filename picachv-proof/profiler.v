(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module profiler.
  Axiom Tick :
    (Ty.path "picachv_core::profiler::Tick") = (Ty.tuple [ Ty.path "u128"; Ty.path "u128" ]).
  
  (* StructRecord
    {
      name := "Stat";
      ty_params := [];
      fields :=
        [
          ("name", Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ]);
          ("tick",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ]; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_picachv_core_profiler_Stat.
    Definition Self : Ty.t := Ty.path "picachv_core::profiler::Stat".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "Stat" |);
              M.read (| Value.String "name" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::profiler::Stat",
                  "name"
                |));
              M.read (| Value.String "tick" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::profiler::Stat",
                    "tick"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_picachv_core_profiler_Stat.
  
  Module Impl_core_clone_Clone_for_picachv_core_profiler_Stat.
    Definition Self : Ty.t := Ty.path "picachv_core::profiler::Stat".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "picachv_core::profiler::Stat"
            [
              ("name",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::profiler::Stat",
                      "name"
                    |)
                  ]
                |));
              ("tick",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ]; Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::profiler::Stat",
                      "tick"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_picachv_core_profiler_Stat.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_for_picachv_core_profiler_Stat.
      Definition Self : Ty.t := Ty.path "picachv_core::profiler::Stat".
      
      (* Serialize *)
      Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let __serializer := M.alloc (| __serializer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.associated ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  "serialize_struct",
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  M.read (| Value.String "Stat" |);
                                  BinOp.Wrap.add
                                    Integer.Usize
                                    (BinOp.Wrap.add
                                      Integer.Usize
                                      (M.rust_cast (Value.Bool false))
                                      (Value.Integer 1))
                                    (Value.Integer 1)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.associated ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.associated ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated,
                                [],
                                "serialize_field",
                                [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ]
                              |),
                              [
                                __serde_state;
                                M.read (| Value.String "name" |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "picachv_core::profiler::Stat",
                                  "name"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.associated ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated,
                                [],
                                "serialize_field",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple [ Ty.path "u128"; Ty.path "u128" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                __serde_state;
                                M.read (| Value.String "tick" |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "picachv_core::profiler::Stat",
                                  "tick"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.associated ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated,
                        [],
                        "end",
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_picachv_core_profiler_Stat.
    Module Impl_serde_de_Deserialize_for_picachv_core_profiler_Stat.
      Definition Self : Ty.t := Ty.path "picachv_core::profiler::Stat".
      
      (* Deserialize *)
      Definition deserialize (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __deserializer |) in
            M.call_closure (|
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                "deserialize_struct",
                [ Ty.path "picachv_core::profiler::_'1::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                M.read (| Value.String "Stat" |);
                M.read (|
                  M.get_constant (| "picachv_core::profiler::_'1::deserialize::FIELDS" |)
                |);
                Value.StructRecord
                  "picachv_core::profiler::_'1::deserialize::__Visitor"
                  [
                    ("marker", Value.StructTuple "core::marker::PhantomData" []);
                    ("lifetime", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_picachv_core_profiler_Stat.
  End underscore.
  
  
  (* StructRecord
    {
      name := "PicachvProfiler";
      ty_params := [];
      fields :=
        [
          ("stats",
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              [
                Ty.apply
                  (Ty.path "std::sync::rwlock::RwLock")
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                        Ty.path "picachv_core::profiler::Stat";
                        Ty.path "std::hash::random::RandomState"
                      ]
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_core_default_Default_for_picachv_core_profiler_PicachvProfiler.
    Definition Self : Ty.t := Ty.path "picachv_core::profiler::PicachvProfiler".
    
    (*
        fn default() -> Self {
            Self::new()
        }
    *)
    Definition default (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            M.get_associated_function (|
              Ty.path "picachv_core::profiler::PicachvProfiler",
              "new",
              []
            |),
            []
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_picachv_core_profiler_PicachvProfiler.
  
  Module Impl_picachv_core_profiler_PicachvProfiler.
    Definition Self : Ty.t := Ty.path "picachv_core::profiler::PicachvProfiler".
    
    (*
        pub fn new() -> Self {
            PicachvProfiler {
                stats: Arc::new(RwLock::new(HashMap::new())),
            }
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "picachv_core::profiler::PicachvProfiler"
            [
              ("stats",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLock")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLock")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ],
                        "new",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ],
                            "new",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    
    (*
        pub fn dump(&self) -> Vec<(Cow<'a, str>, Duration)> {
            let lock: std::sync::RwLockReadGuard<HashMap<Cow<'a, str>, Stat<'a>>> =
                self.stats.read().unwrap();
            lock.iter()
                .map(|(name, stat)| {
                    let mut duration = Duration::from_micros(0);
                    for &(start, end) in &stat.tick {
                        duration += Duration::from_micros((end - start) as _);
                    }
                    (name.clone(), duration)
                })
                .collect()
        }
    *)
    Definition dump (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ lock :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLockReadGuard")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "std::sync::rwlock::RwLockReadGuard")
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                    Ty.path "picachv_core::profiler::Stat";
                                    Ty.path "std::hash::random::RandomState"
                                  ]
                              ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLock")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ],
                        "read",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::rwlock::RwLock")
                                  [
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::HashMap")
                                      [
                                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                        Ty.path "picachv_core::profiler::Stat";
                                        Ty.path "std::hash::random::RandomState"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "picachv_core::profiler::PicachvProfiler",
                              "stats"
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::map::Iter")
                        [
                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                          Ty.path "picachv_core::profiler::Stat"
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ];
                                  Ty.apply (Ty.path "&") [ Ty.path "picachv_core::profiler::Stat" ]
                                ]
                            ]
                        ]
                        (Ty.tuple
                          [
                            Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                            Ty.path "core::time::Duration"
                          ])
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                            Ty.path "core::time::Duration"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "std::collections::hash::map::Iter")
                        [
                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                          Ty.path "picachv_core::profiler::Stat"
                        ],
                      [],
                      "map",
                      [
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                            Ty.path "core::time::Duration"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ];
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.path "picachv_core::profiler::Stat" ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                              Ty.path "core::time::Duration"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::collections::hash::map::HashMap")
                            [
                              Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                              Ty.path "picachv_core::profiler::Stat";
                              Ty.path "std::hash::random::RandomState"
                            ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "std::sync::rwlock::RwLockReadGuard")
                                [
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                      Ty.path "picachv_core::profiler::Stat";
                                      Ty.path "std::hash::random::RandomState"
                                    ]
                                ],
                              [],
                              "deref",
                              []
                            |),
                            [ lock ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let name := M.copy (| γ0_0 |) in
                                      let stat := M.copy (| γ0_1 |) in
                                      M.read (|
                                        let~ duration :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::time::Duration",
                                                "from_micros",
                                                []
                                              |),
                                              [ Value.Integer 0 ]
                                            |)
                                          |) in
                                        let~ _ :=
                                          M.use
                                            (M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u128"; Ty.path "u128" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| stat |),
                                                      "picachv_core::profiler::Stat",
                                                      "tick"
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      ltac:(M.monadic
                                                        (let~ _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u128";
                                                                          Ty.path "u128"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ0_0 := M.read (| γ0_0 |) in
                                                                  let γ2_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ2_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let start := M.copy (| γ2_0 |) in
                                                                  let end_ := M.copy (| γ2_1 |) in
                                                                  let~ _ :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::AddAssign",
                                                                          Ty.path
                                                                            "core::time::Duration",
                                                                          [
                                                                            Ty.path
                                                                              "core::time::Duration"
                                                                          ],
                                                                          "add_assign",
                                                                          []
                                                                        |),
                                                                        [
                                                                          duration;
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::time::Duration",
                                                                              "from_micros",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.rust_cast
                                                                                (BinOp.Wrap.sub
                                                                                  Integer.U128
                                                                                  (M.read (|
                                                                                    end_
                                                                                  |))
                                                                                  (M.read (|
                                                                                    start
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        M.alloc (|
                                          Value.Tuple
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "alloc::borrow::Cow")
                                                    [ Ty.path "str" ],
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ M.read (| name |) ]
                                              |);
                                              M.read (| duration |)
                                            ]
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_dump : M.IsAssociatedFunction Self "dump" dump.
    
    (*
        pub fn dump_raw(&self) -> Vec<(Cow<'a, str>, Vec<Duration>)> {
            self.stats
                .read()
                .unwrap()
                .iter()
                .map(|(k, v)| {
                    (
                        k.clone(),
                        v.tick
                            .iter()
                            .map(|(start, end)| Duration::from_micros( *end as u64 - *start as u64))
                            .collect::<Vec<Duration>>(),
                    )
                })
                .collect()
        }
    *)
    Definition dump_raw (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [
                  Ty.apply
                    (Ty.path "std::collections::hash::map::Iter")
                    [
                      Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                      Ty.path "picachv_core::profiler::Stat"
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ];
                              Ty.apply (Ty.path "&") [ Ty.path "picachv_core::profiler::Stat" ]
                            ]
                        ]
                    ]
                    (Ty.tuple
                      [
                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "core::time::Duration"; Ty.path "alloc::alloc::Global" ]
                      ])
                ],
              [],
              "collect",
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "core::time::Duration"; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ]
            |),
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "std::collections::hash::map::Iter")
                    [
                      Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                      Ty.path "picachv_core::profiler::Stat"
                    ],
                  [],
                  "map",
                  [
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "core::time::Duration"; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ];
                                Ty.apply (Ty.path "&") [ Ty.path "picachv_core::profiler::Stat" ]
                              ]
                          ]
                      ]
                      (Ty.tuple
                        [
                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "core::time::Duration"; Ty.path "alloc::alloc::Global" ]
                        ])
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        [
                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                          Ty.path "picachv_core::profiler::Stat";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      "iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "std::sync::rwlock::RwLockReadGuard")
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                [
                                  Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                  Ty.path "picachv_core::profiler::Stat";
                                  Ty.path "std::hash::random::RandomState"
                                ]
                            ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::rwlock::RwLockReadGuard")
                                      [
                                        Ty.apply
                                          (Ty.path "std::collections::hash::map::HashMap")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::borrow::Cow")
                                              [ Ty.path "str" ];
                                            Ty.path "picachv_core::profiler::Stat";
                                            Ty.path "std::hash::random::RandomState"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::rwlock::RwLockReadGuard")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::HashMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::borrow::Cow")
                                                  [ Ty.path "str" ];
                                                Ty.path "picachv_core::profiler::Stat";
                                                Ty.path "std::hash::random::RandomState"
                                              ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::sync::rwlock::RwLock")
                                      [
                                        Ty.apply
                                          (Ty.path "std::collections::hash::map::HashMap")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::borrow::Cow")
                                              [ Ty.path "str" ];
                                            Ty.path "picachv_core::profiler::Stat";
                                            Ty.path "std::hash::random::RandomState"
                                          ]
                                      ],
                                    "read",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.apply
                                              (Ty.path "std::sync::rwlock::RwLock")
                                              [
                                                Ty.apply
                                                  (Ty.path "std::collections::hash::map::HashMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::borrow::Cow")
                                                      [ Ty.path "str" ];
                                                    Ty.path "picachv_core::profiler::Stat";
                                                    Ty.path "std::hash::random::RandomState"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "picachv_core::profiler::PicachvProfiler",
                                          "stats"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let k := M.copy (| γ0_0 |) in
                                  let v := M.copy (| γ0_1 |) in
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ],
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [ M.read (| k |) ]
                                      |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ] ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "u128"; Ty.path "u128" ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "core::time::Duration")
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "core::time::Duration";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ] ],
                                              [],
                                              "map",
                                              [
                                                Ty.path "core::time::Duration";
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u128"; Ty.path "u128" ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.path "core::time::Duration")
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ] ],
                                                  "iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "u128"; Ty.path "u128" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| v |),
                                                        "picachv_core::profiler::Stat",
                                                        "tick"
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ := M.read (| γ |) in
                                                              let γ1_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ1_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let start := M.alloc (| γ1_0 |) in
                                                              let end_ := M.alloc (| γ1_1 |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::time::Duration",
                                                                  "from_micros",
                                                                  []
                                                                |),
                                                                [
                                                                  BinOp.Wrap.sub
                                                                    Integer.U64
                                                                    (M.rust_cast
                                                                      (M.read (|
                                                                        M.read (| end_ |)
                                                                      |)))
                                                                    (M.rust_cast
                                                                      (M.read (|
                                                                        M.read (| start |)
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_dump_raw : M.IsAssociatedFunction Self "dump_raw" dump_raw.
    
    (*
        pub fn profile<T, F: FnOnce() -> T>(&self, func: F, name: Cow<'static, str>) -> T {
            let start = SystemTime::now()
                .duration_since(SystemTime::UNIX_EPOCH)
                .unwrap()
                .as_micros();
            let result = func();
            let end = SystemTime::now()
                .duration_since(SystemTime::UNIX_EPOCH)
                .unwrap()
                .as_micros();
    
            let mut lock = self.stats.write().unwrap();
            match lock.get_mut(&name) {
                Some(stat) => {
                    stat.tick.push((start, end));
                },
                None => {
                    lock.insert(
                        name.clone(),
                        Stat {
                            name,
                            tick: vec![(start, end)],
                        },
                    );
                },
            }
    
            result
        }
    *)
    Definition profile (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ T; F ], [ self; func; name ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let func := M.alloc (| func |) in
          let name := M.alloc (| name |) in
          M.read (|
            let~ start :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::time::Duration", "as_micros", [] |),
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "core::time::Duration"; Ty.path "std::time::SystemTimeError"
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "std::time::SystemTime",
                              "duration_since",
                              []
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "std::time::SystemTime",
                                    "now",
                                    []
                                  |),
                                  []
                                |)
                              |);
                              M.read (| M.get_constant (| "std::time::UNIX_EPOCH" |) |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              |) in
            let~ result :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::function::FnOnce",
                    F,
                    [ Ty.tuple [] ],
                    "call_once",
                    []
                  |),
                  [ M.read (| func |); Value.Tuple [] ]
                |)
              |) in
            let~ end_ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::time::Duration", "as_micros", [] |),
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "core::time::Duration"; Ty.path "std::time::SystemTimeError"
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "std::time::SystemTime",
                              "duration_since",
                              []
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "std::time::SystemTime",
                                    "now",
                                    []
                                  |),
                                  []
                                |)
                              |);
                              M.read (| M.get_constant (| "std::time::UNIX_EPOCH" |) |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              |) in
            let~ lock :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLockWriteGuard")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "std::sync::rwlock::RwLockWriteGuard")
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                    Ty.path "picachv_core::profiler::Stat";
                                    Ty.path "std::hash::random::RandomState"
                                  ]
                              ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::rwlock::RwLock")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                Ty.path "picachv_core::profiler::Stat";
                                Ty.path "std::hash::random::RandomState"
                              ]
                          ],
                        "write",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::rwlock::RwLock")
                                  [
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::HashMap")
                                      [
                                        Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                        Ty.path "picachv_core::profiler::Stat";
                                        Ty.path "std::hash::random::RandomState"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "picachv_core::profiler::PicachvProfiler",
                              "stats"
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        [
                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                          Ty.path "picachv_core::profiler::Stat";
                          Ty.path "std::hash::random::RandomState"
                        ],
                      "get_mut",
                      [ Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ] ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "std::sync::rwlock::RwLockWriteGuard")
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                [
                                  Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                  Ty.path "picachv_core::profiler::Stat";
                                  Ty.path "std::hash::random::RandomState"
                                ]
                            ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [ lock ]
                      |);
                      name
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let stat := M.copy (| γ0_0 |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u128"; Ty.path "u128" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| stat |),
                                "picachv_core::profiler::Stat",
                                "tick"
                              |);
                              Value.Tuple [ M.read (| start |); M.read (| end_ |) ]
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                      let~ _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                [
                                  Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                  Ty.path "picachv_core::profiler::Stat";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "insert",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "std::sync::rwlock::RwLockWriteGuard")
                                    [
                                      Ty.apply
                                        (Ty.path "std::collections::hash::map::HashMap")
                                        [
                                          Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ];
                                          Ty.path "picachv_core::profiler::Stat";
                                          Ty.path "std::hash::random::RandomState"
                                        ]
                                    ],
                                  [],
                                  "deref_mut",
                                  []
                                |),
                                [ lock ]
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply (Ty.path "alloc::borrow::Cow") [ Ty.path "str" ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [ name ]
                              |);
                              Value.StructRecord
                                "picachv_core::profiler::Stat"
                                [
                                  ("name", M.read (| name |));
                                  ("tick",
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ] ],
                                        "into_vec",
                                        [ Ty.path "alloc::alloc::Global" ]
                                      |),
                                      [
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [ M.read (| start |); M.read (| end_ |) ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |))
                                      ]
                                    |))
                                ]
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            result
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_profile : M.IsAssociatedFunction Self "profile" profile.
  End Impl_picachv_core_profiler_PicachvProfiler.
  
  Definition value_PROFILER : Value.t :=
    M.run
      ltac:(M.monadic
        (M.alloc (|
          M.alloc (|
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::sync::lazy_lock::LazyLock")
                  [
                    Ty.path "picachv_core::profiler::PicachvProfiler";
                    Ty.function [] (Ty.path "picachv_core::profiler::PicachvProfiler")
                  ],
                "new",
                []
              |),
              [
                (* ReifyFnPointer *)
                M.pointer_coercion
                  (M.get_associated_function (|
                    Ty.path "picachv_core::profiler::PicachvProfiler",
                    "new",
                    []
                  |))
              ]
            |)
          |)
        |))).
End profiler.
