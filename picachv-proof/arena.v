(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arena.
  Axiom ArenaType :
    forall (T : Ty.t),
    (Ty.apply (Ty.path "picachv_core::arena::ArenaType") [ T ]) =
      (Ty.apply
        (Ty.path "std::collections::hash::map::HashMap")
        [
          Ty.path "uuid::Uuid";
          Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
          Ty.path "std::hash::random::RandomState"
        ]).
  
  (* StructRecord
    {
      name := "Arena";
      ty_params := [ "T" ];
      fields :=
        [
          ("inner",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.path "uuid::Uuid";
                Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                Ty.path "std::hash::random::RandomState"
              ]);
          ("name", Ty.path "alloc::string::String")
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_T_where_core_clone_Clone_T_where_core_fmt_Debug_T_for_picachv_core_arena_Arena_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "picachv_core::arena::Arena") [ T ].
    
    (* Clone *)
    Definition clone (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "picachv_core::arena::Arena"
            [
              ("inner",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "inner"
                    |)
                  ]
                |));
              ("name",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloc::string::String",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "name"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self T)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_T_where_core_clone_Clone_T_where_core_fmt_Debug_T_for_picachv_core_arena_Arena_T.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_clone_Clone_T_where_core_fmt_Debug_T_for_picachv_core_arena_Arena_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "picachv_core::arena::Arena") [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "Arena" |);
              M.read (| Value.String "inner" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "picachv_core::arena::Arena",
                  "inner"
                |));
              M.read (| Value.String "name" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "picachv_core::arena::Arena",
                    "name"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self T)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_where_core_clone_Clone_T_where_core_fmt_Debug_T_for_picachv_core_arena_Arena_T.
  
  Module Impl_picachv_core_arena_Arena_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "picachv_core::arena::Arena") [ T ].
    
    (*
        pub fn insert(&mut self, object: T) -> PicachvResult<Uuid> {
            let uuid = Uuid::new_v4();
    
            self.inner.insert(uuid, Arc::new(object));
            Ok(uuid)
        }
    *)
    Definition insert (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; object ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let object := M.alloc (| object |) in
          M.read (|
            let~ uuid :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "uuid::Uuid", "new_v4", [] |),
                  []
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "insert",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "inner"
                    |);
                    M.read (| uuid |);
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      [ M.read (| object |) ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| uuid |) ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_insert :
      forall (T : Ty.t),
      M.IsAssociatedFunction (Self T) "insert" (insert T).
    
    (*
        pub fn insert_arc(&mut self, plan: Arc<T>) -> PicachvResult<Uuid> {
            let uuid = Uuid::new_v4();
    
            self.inner.insert(uuid, plan);
            Ok(uuid)
        }
    *)
    Definition insert_arc (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; plan ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let plan := M.alloc (| plan |) in
          M.read (|
            let~ uuid :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (| Ty.path "uuid::Uuid", "new_v4", [] |),
                  []
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "insert",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "inner"
                    |);
                    M.read (| uuid |);
                    M.read (| plan |)
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| uuid |) ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_insert_arc :
      forall (T : Ty.t),
      M.IsAssociatedFunction (Self T) "insert_arc" (insert_arc T).
    
    (*
        pub fn contains_key(&self, uuid: &Uuid) -> bool {
            self.inner.contains_key(uuid)
        }
    *)
    Definition contains_key (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; uuid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let uuid := M.alloc (| uuid |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                [
                  Ty.path "uuid::Uuid";
                  Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                  Ty.path "std::hash::random::RandomState"
                ],
              "contains_key",
              [ Ty.path "uuid::Uuid" ]
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "picachv_core::arena::Arena",
                "inner"
              |);
              M.read (| uuid |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_contains_key :
      forall (T : Ty.t),
      M.IsAssociatedFunction (Self T) "contains_key" (contains_key T).
    
    (*
        pub fn get(&self, uuid: &Uuid) -> PicachvResult<&Arc<T>> {
            match self.inner.get(uuid) {
                Some(plan) => Ok(plan),
                None => Err(PicachvError::InvalidOperation(
                    format!(
                        "get: the object {uuid} does not exist in the arena {}.",
                        self.name
                    )
                    .into(),
                )),
            }
        }
    *)
    Definition get (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; uuid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let uuid := M.alloc (| uuid |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "get",
                    [ Ty.path "uuid::Uuid" ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "inner"
                    |);
                    M.read (| uuid |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let plan := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple "core::result::Result::Ok" [ M.read (| plan |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          Value.StructTuple
                            "picachv_error::PicachvError::InvalidOperation"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.path "alloc::string::String",
                                  [ Ty.path "picachv_error::ErrString" ],
                                  "into",
                                  []
                                |),
                                [
                                  M.read (|
                                    let~ res :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "alloc::fmt::format", [] |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.read (|
                                                          Value.String "get: the object "
                                                        |);
                                                        M.read (|
                                                          Value.String
                                                            " does not exist in the arena "
                                                        |);
                                                        M.read (| Value.String "." |)
                                                      ]
                                                  |));
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "picachv_core::arena::Arena",
                                                            "name"
                                                          |);
                                                          uuid
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let args := M.copy (| γ |) in
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "uuid::Uuid" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_tuple_field (|
                                                                        args,
                                                                        1
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_tuple_field (|
                                                                        args,
                                                                        0
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)))
                                                    ]
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                              |)
                            ]
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get : forall (T : Ty.t), M.IsAssociatedFunction (Self T) "get" (get T).
    
    (*
        pub fn get_mut(&mut self, uuid: &Uuid) -> PicachvResult<&mut Arc<T>> {
            match self.inner.get_mut(uuid) {
                Some(plan) => Ok(plan),
                None => Err(PicachvError::InvalidOperation(
                    format!(
                        "get_mut: the object {uuid} does not exist in the arena {}.",
                        self.name
                    )
                    .into(),
                )),
            }
        }
    *)
    Definition get_mut (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ self; uuid ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let uuid := M.alloc (| uuid |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "get_mut",
                    [ Ty.path "uuid::Uuid" ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "picachv_core::arena::Arena",
                      "inner"
                    |);
                    M.read (| uuid |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let plan := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple "core::result::Result::Ok" [ M.read (| plan |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          Value.StructTuple
                            "picachv_error::PicachvError::InvalidOperation"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.path "alloc::string::String",
                                  [ Ty.path "picachv_error::ErrString" ],
                                  "into",
                                  []
                                |),
                                [
                                  M.read (|
                                    let~ res :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "alloc::fmt::format", [] |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.read (|
                                                          Value.String "get_mut: the object "
                                                        |);
                                                        M.read (|
                                                          Value.String
                                                            " does not exist in the arena "
                                                        |);
                                                        M.read (| Value.String "." |)
                                                      ]
                                                  |));
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "picachv_core::arena::Arena",
                                                            "name"
                                                          |);
                                                          uuid
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let args := M.copy (| γ |) in
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "uuid::Uuid" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_tuple_field (|
                                                                        args,
                                                                        1
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_tuple_field (|
                                                                        args,
                                                                        0
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)))
                                                    ]
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                              |)
                            ]
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get_mut :
      forall (T : Ty.t),
      M.IsAssociatedFunction (Self T) "get_mut" (get_mut T).
    
    (*
        pub fn new(name: String) -> Self {
            Self {
                inner: HashMap::new(),
                name,
            }
        }
    *)
    Definition new (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [], [ name ] =>
        ltac:(M.monadic
          (let name := M.alloc (| name |) in
          Value.StructRecord
            "picachv_core::arena::Arena"
            [
              ("inner",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "uuid::Uuid";
                        Ty.apply (Ty.path "alloc::sync::Arc") [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "new",
                    []
                  |),
                  []
                |));
              ("name", M.read (| name |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : forall (T : Ty.t), M.IsAssociatedFunction (Self T) "new" (new T).
  End Impl_picachv_core_arena_Arena_T.
End arena.
