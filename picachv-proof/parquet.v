(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module io.
  Module parquet.
    Definition value_DEFAULT_ROW_GROUP_SIZE : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 2048 |))).
    
    Module Impl_picachv_core_dataframe_PolicyGuardedDataFrame.
      Definition Self : Ty.t := Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame".
      
      (*
          pub fn from_parquet<P: AsRef<Path>>(
              path: P,
              projection: &[usize],
              selection: Option<&[bool]>,
          ) -> PicachvResult<Self> {
              let mut builder = get_initial_builder(path, projection)?;
              let file_metadata = builder.metadata().file_metadata();
      
              // Do a predicate pushdown.
              if let Some(selection) = selection {
                  picachv_ensure!(selection.len() == file_metadata.num_rows() as usize,
                      InvalidOperation: "The selection array is not equal to the number of rows in the file"
                  );
      
                  // Make selection array as an array of boolean arrays.
                  let row_groups = builder.metadata().row_groups();
                  let row_groups = THREAD_POOL.install(|| {
                      row_groups
                          .par_iter()
                          .map(|rg| rg.num_rows() as usize)
                          .collect::<Vec<_>>()
                  });
      
                  // Split the selection array into arrays whose size is the number of rows in each row group.
                  // TODO: Parallelize this step.
                  // We can first construct a "range" vector and then use it to split the selection array.
                  let mut selections = vec![];
                  let mut start = 0usize;
                  for num_rows in row_groups.iter() {
                      let end = start + num_rows;
                      let cur = BooleanArray::from(selection[start..end].to_vec());
                      selections.push(cur);
                      start = end;
                  }
      
                  builder = builder.with_row_selection(RowSelection::from_filters(&selections));
              }
      
              collect_reader(builder)
          }
      *)
      Definition from_parquet (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ P ], [ path; projection; selection ] =>
          ltac:(M.monadic
            (let path := M.alloc (| path |) in
            let projection := M.alloc (| projection |) in
            let selection := M.alloc (| selection |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ builder :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                    [
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                        [ Ty.path "std::fs::File" ]
                                    ];
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (|
                                  "picachv_core::io::parquet::get_initial_builder",
                                  [ P ]
                                |),
                                [ M.read (| path |); M.read (| projection |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ file_metadata :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "parquet::file::metadata::ParquetMetaData",
                          "file_metadata",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.path "parquet::file::metadata::ParquetMetaData";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                    [
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                        [ Ty.path "std::fs::File" ]
                                    ],
                                  "metadata",
                                  []
                                |),
                                [ builder ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := selection in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let selection := M.copy (| γ0_0 |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.Pure.not
                                              (BinOp.Pure.eq
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "bool" ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ M.read (| selection |) ]
                                                |))
                                                (M.rust_cast
                                                  (M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "parquet::file::metadata::FileMetaData",
                                                      "num_rows",
                                                      []
                                                    |),
                                                    [ M.read (| file_metadata |) ]
                                                  |))))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "picachv_error::__private::must_use",
                                                      []
                                                    |),
                                                    [
                                                      Value.StructTuple
                                                        "picachv_error::PicachvError::InvalidOperation"
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "alloc::string::String",
                                                              [ Ty.path "picachv_error::ErrString"
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                let~ res :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "alloc::fmt::format",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_const",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "The selection array is not equal to the number of rows in the file"
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                res
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    ]
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            let~ row_groups :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "parquet::file::metadata::ParquetMetaData",
                                    "row_groups",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "parquet::file::metadata::ParquetMetaData";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "parquet::arrow::arrow_reader::SyncReader")
                                                  [ Ty.path "std::fs::File" ]
                                              ],
                                            "metadata",
                                            []
                                          |),
                                          [ builder ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let~ row_groups :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "rayon_core::thread_pool::ThreadPool",
                                    "install",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]);
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "std::sync::lazy_lock::LazyLock")
                                          [
                                            Ty.path "rayon_core::thread_pool::ThreadPool";
                                            Ty.function
                                              []
                                              (Ty.path "rayon_core::thread_pool::ThreadPool")
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.get_constant (|
                                            "picachv_core::thread_pool::THREAD_POOL"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_trait_method (|
                                                        "rayon::iter::ParallelIterator",
                                                        Ty.apply
                                                          (Ty.path "rayon::iter::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "rayon::slice::Iter")
                                                              [
                                                                Ty.path
                                                                  "parquet::file::metadata::RowGroupMetaData"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "parquet::file::metadata::RowGroupMetaData"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "usize";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "rayon::iter::ParallelIterator",
                                                            Ty.apply
                                                              (Ty.path "rayon::slice::Iter")
                                                              [
                                                                Ty.path
                                                                  "parquet::file::metadata::RowGroupMetaData"
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "parquet::file::metadata::RowGroupMetaData"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.path "usize");
                                                              Ty.path "usize"
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "rayon::iter::IntoParallelRefIterator",
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.path
                                                                      "parquet::file::metadata::RowGroupMetaData"
                                                                  ],
                                                                [],
                                                                "par_iter",
                                                                []
                                                              |),
                                                              [ M.read (| row_groups |) ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let rg :=
                                                                              M.copy (| γ |) in
                                                                            M.rust_cast
                                                                              (M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "parquet::file::metadata::RowGroupMetaData",
                                                                                  "num_rows",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| rg |) ]
                                                                              |))))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              |) in
                            let~ selections :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "arrow_array::array::boolean_array::BooleanArray";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  []
                                |)
                              |) in
                            let~ start := M.alloc (| Value.Integer 0 |) in
                            let~ _ :=
                              M.use
                                (M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "usize" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ row_groups ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          ltac:(M.monadic
                                            (let~ _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      "next",
                                                      []
                                                    |),
                                                    [ iter ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let num_rows := M.copy (| γ0_0 |) in
                                                      let~ end_ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Add",
                                                              Ty.path "usize",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                              "add",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| start |);
                                                              M.read (| num_rows |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ cur :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              Ty.path
                                                                "arrow_array::array::boolean_array::BooleanArray",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path "bool";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                              "from",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.path "bool" ],
                                                                  "to_vec",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ Ty.path "bool" ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| selection |);
                                                                      Value.StructRecord
                                                                        "core::ops::range::Range"
                                                                        [
                                                                          ("start",
                                                                            M.read (| start |));
                                                                          ("end_",
                                                                            M.read (| end_ |))
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "arrow_array::array::boolean_array::BooleanArray";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "push",
                                                              []
                                                            |),
                                                            [ selections; M.read (| cur |) ]
                                                          |)
                                                        |) in
                                                      let~ _ :=
                                                        M.write (| start, M.read (| end_ |) |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |)) in
                            let~ _ :=
                              M.write (|
                                builder,
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                      [
                                        Ty.apply
                                          (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                          [ Ty.path "std::fs::File" ]
                                      ],
                                    "with_row_selection",
                                    []
                                  |),
                                  [
                                    M.read (| builder |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path
                                          "parquet::arrow::arrow_reader::selection::RowSelection",
                                        "from_filters",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "arrow_array::array::boolean_array::BooleanArray";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ selections ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "picachv_core::io::parquet::collect_reader", [] |),
                      [ M.read (| builder |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_parquet :
        M.IsAssociatedFunction Self "from_parquet" from_parquet.
      
      (*
          pub fn from_parquet_row_group<P: AsRef<Path>>(
              path: P,
              projection: &[usize],
              selection: Option<&[bool]>,
              row_group_index: usize,
          ) -> PicachvResult<Self> {
              let mut builder = get_initial_builder(path, projection)?;
              let metadata = builder.metadata().clone();
      
              picachv_ensure!(
                  row_group_index < builder.metadata().num_row_groups(),
                  InvalidOperation: "The row group index {} is out of bound {}",
                  row_group_index,
                  metadata.num_row_groups(),
              );
      
              let row_group_meta = metadata.row_group(row_group_index);
              picachv_ensure!(
                  row_group_meta.num_rows() as usize <= DEFAULT_ROW_GROUP_SIZE,
                  InvalidOperation: "The number of rows in the row group is greater than the default row group size"
              );
      
              builder = builder.with_row_groups(vec![row_group_index]);
              if let Some(selection) = selection {
                  picachv_ensure!(
                      selection.len() == row_group_meta.num_rows() as usize,
                      InvalidOperation: "The selection array length {} is not equal to `num_rows` {}",
                      selection.len(),
                      row_group_meta.num_rows()
                  );
      
                  builder =
                      builder.with_row_selection(RowSelection::from_filters(&[BooleanArray::from(
                          selection.to_vec(),
                      )]));
              }
      
              collect_reader(builder)
          }
      *)
      Definition from_parquet_row_group (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ P ], [ path; projection; selection; row_group_index ] =>
          ltac:(M.monadic
            (let path := M.alloc (| path |) in
            let projection := M.alloc (| projection |) in
            let selection := M.alloc (| selection |) in
            let row_group_index := M.alloc (| row_group_index |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ builder :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                    [
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                        [ Ty.path "std::fs::File" ]
                                    ];
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (|
                                  "picachv_core::io::parquet::get_initial_builder",
                                  [ P ]
                                |),
                                [ M.read (| path |); M.read (| projection |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "picachv_core::dataframe::PolicyGuardedDataFrame";
                                              Ty.path "picachv_error::PicachvError"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ metadata :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "parquet::file::metadata::ParquetMetaData";
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                [
                                  Ty.apply
                                    (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                    [ Ty.path "std::fs::File" ]
                                ],
                              "metadata",
                              []
                            |),
                            [ builder ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.lt
                                      (M.read (| row_group_index |))
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "parquet::file::metadata::ParquetMetaData",
                                          "num_row_groups",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "parquet::file::metadata::ParquetMetaData";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "parquet::arrow::arrow_reader::SyncReader")
                                                        [ Ty.path "std::fs::File" ]
                                                    ],
                                                  "metadata",
                                                  []
                                                |),
                                                [ builder ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "picachv_error::__private::must_use",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "picachv_error::PicachvError::InvalidOperation"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_v1",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "The row group index "
                                                                          |);
                                                                          M.read (|
                                                                            Value.String
                                                                              " is out of bound "
                                                                          |)
                                                                        ]
                                                                    |));
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [ Ty.path "usize" ]
                                                                            |),
                                                                            [ row_group_index ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [ Ty.path "usize" ]
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "parquet::file::metadata::ParquetMetaData",
                                                                                    "num_row_groups",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::sync::Arc")
                                                                                          [
                                                                                            Ty.path
                                                                                              "parquet::file::metadata::ParquetMetaData";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ metadata ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ row_group_meta :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "parquet::file::metadata::ParquetMetaData",
                          "row_group",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.path "parquet::file::metadata::ParquetMetaData";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "deref",
                              []
                            |),
                            [ metadata ]
                          |);
                          M.read (| row_group_index |)
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.le
                                      (M.rust_cast
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "parquet::file::metadata::RowGroupMetaData",
                                            "num_rows",
                                            []
                                          |),
                                          [ M.read (| row_group_meta |) ]
                                        |)))
                                      (M.read (|
                                        M.get_constant (|
                                          "picachv_core::io::parquet::DEFAULT_ROW_GROUP_SIZE"
                                        |)
                                      |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "picachv_error::__private::must_use",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "picachv_error::PicachvError::InvalidOperation"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "The number of rows in the row group is greater than the default row group size"
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ :=
                    M.write (|
                      builder,
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                            [
                              Ty.apply
                                (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                [ Ty.path "std::fs::File" ]
                            ],
                          "with_row_groups",
                          []
                        |),
                        [
                          M.read (| builder |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                              "into_vec",
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.read (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply (Ty.path "array") [ Ty.path "usize" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.alloc (| Value.Array [ M.read (| row_group_index |) ] |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := selection in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let selection := M.copy (| γ0_0 |) in
                            let~ _ :=
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.Pure.not
                                              (BinOp.Pure.eq
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "bool" ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ M.read (| selection |) ]
                                                |))
                                                (M.rust_cast
                                                  (M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "parquet::file::metadata::RowGroupMetaData",
                                                      "num_rows",
                                                      []
                                                    |),
                                                    [ M.read (| row_group_meta |) ]
                                                  |))))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "picachv_error::__private::must_use",
                                                      []
                                                    |),
                                                    [
                                                      Value.StructTuple
                                                        "picachv_error::PicachvError::InvalidOperation"
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "alloc::string::String",
                                                              [ Ty.path "picachv_error::ErrString"
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                let~ res :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "alloc::fmt::format",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "The selection array length "
                                                                                    |);
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        " is not equal to `num_rows` "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "bool"
                                                                                                ],
                                                                                              "len",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                selection
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [
                                                                                          Ty.path
                                                                                            "i64"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.path
                                                                                                "parquet::file::metadata::RowGroupMetaData",
                                                                                              "num_rows",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                row_group_meta
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                res
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    ]
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            let~ _ :=
                              M.write (|
                                builder,
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                      [
                                        Ty.apply
                                          (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                          [ Ty.path "std::fs::File" ]
                                      ],
                                    "with_row_selection",
                                    []
                                  |),
                                  [
                                    M.read (| builder |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path
                                          "parquet::arrow::arrow_reader::selection::RowSelection",
                                        "from_filters",
                                        []
                                      |),
                                      [
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.alloc (|
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path
                                                      "arrow_array::array::boolean_array::BooleanArray",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "bool";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.path "bool" ],
                                                        "to_vec",
                                                        []
                                                      |),
                                                      [ M.read (| selection |) ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "picachv_core::io::parquet::collect_reader", [] |),
                      [ M.read (| builder |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_parquet_row_group :
        M.IsAssociatedFunction Self "from_parquet_row_group" from_parquet_row_group.
      
      (*
          pub fn to_parquet<P: AsRef<Path>>(&self, path: P) -> PicachvResult<()> {
              let bin = THREAD_POOL.install(|| {
                  self.columns
                      .par_iter()
                      .enumerate()
                      .map(|(idx, col)| {
                          let policies = col
                              .policies
                              .par_iter()
                              .map(|p| {
                                  p.to_byte_array()
                                      .map_err(|e| PicachvError::InvalidOperation(e.to_string().into()))
                              })
                              .collect::<PicachvResult<Vec<_>>>()?;
                          let policies = Arc::new(BinaryArray::from_vec(
                              policies.iter().map(|e| e.as_ref()).collect(),
                          )) as _;
                          Ok((format!("col_{idx}"), policies))
                      })
                      .collect::<PicachvResult<Vec<_>>>()
              })?;
      
              picachv_ensure!(
                  bin.len() == self.columns.len(),
                  ComputeError: "The number of columns and the number of binary data are not equal"
              );
      
              let rb = RecordBatch::try_from_iter(bin).map_err(|e| {
                  PicachvError::InvalidOperation(format!("Failed to create record batch. {e}").into())
              })?;
              let file = File::create(path)?;
      
              let writer_prop = WriterProperties::builder()
                  .set_max_row_group_size(DEFAULT_ROW_GROUP_SIZE)
                  // .set_compression(Compression::ZSTD(ZstdLevel::try_new(1).unwrap()))
                  .build();
              let mut writer =
                  ArrowWriter::try_new(file, rb.schema(), Some(writer_prop)).map_err(|e| {
                      PicachvError::InvalidOperation(format!("Failed to create Arrow writer. {e}").into())
                  })?;
      
              writer.write(&rb).map_err(|e| {
                  PicachvError::InvalidOperation(format!("Failed to write record batch. {e}").into())
              })?;
              writer.close().map_err(|e| {
                  PicachvError::InvalidOperation(format!("Failed to close Arrow writer. {e}").into())
              })?;
      
              Ok(())
          }
      *)
      Definition to_parquet (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ P ], [ self; path ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let path := M.alloc (| path |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ bin :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.dyn [ ("arrow_array::array::Array::Trait", []) ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "rayon_core::thread_pool::ThreadPool",
                                  "install",
                                  [
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.dyn
                                                        [ ("arrow_array::array::Array::Trait", [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "picachv_error::PicachvError"
                                        ]);
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "alloc::string::String";
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.dyn
                                                      [ ("arrow_array::array::Array::Trait", []) ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "picachv_error::PicachvError"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "std::sync::lazy_lock::LazyLock")
                                        [
                                          Ty.path "rayon_core::thread_pool::ThreadPool";
                                          Ty.function
                                            []
                                            (Ty.path "rayon_core::thread_pool::ThreadPool")
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.get_constant (|
                                          "picachv_core::thread_pool::THREAD_POOL"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    M.get_trait_method (|
                                                      "rayon::iter::ParallelIterator",
                                                      Ty.apply
                                                        (Ty.path "rayon::iter::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "rayon::iter::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "rayon::slice::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::sync::Arc")
                                                                            [
                                                                              Ty.path
                                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "alloc::string::String";
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("arrow_array::array::Array::Trait",
                                                                              [])
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ])
                                                        ],
                                                      [],
                                                      "collect",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "alloc::string::String";
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("arrow_array::array::Array::Trait",
                                                                              [])
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "picachv_error::PicachvError"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "rayon::iter::ParallelIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "rayon::iter::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "rayon::slice::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ],
                                                          [],
                                                          "map",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              [
                                                                                Ty.path
                                                                                  "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String";
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("arrow_array::array::Array::Trait",
                                                                                [])
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path
                                                                    "picachv_error::PicachvError"
                                                                ]);
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "alloc::string::String";
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("arrow_array::array::Array::Trait",
                                                                              [])
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path
                                                                  "picachv_error::PicachvError"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "rayon::iter::IndexedParallelIterator",
                                                              Ty.apply
                                                                (Ty.path "rayon::slice::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.path
                                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "rayon::iter::IntoParallelRefIterator",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        [
                                                                          Ty.path
                                                                            "picachv_core::dataframe::PolicyGuardedColumn";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "par_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "picachv_core::dataframe::PolicyGuardedDataFrame",
                                                                    "columns"
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ0_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let idx :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let col :=
                                                                            M.copy (| γ0_1 |) in
                                                                          M.read (|
                                                                            let~ policies :=
                                                                              M.copy (|
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u8";
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "picachv_error::PicachvError"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "rayon::iter::ParallelIterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "rayon::iter::map::Map")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "rayon::slice::Iter")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::sync::Arc")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "picachv_core::policy::policy::Policy";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u8";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "picachv_error::PicachvError"
                                                                                                    ])
                                                                                              ],
                                                                                            [],
                                                                                            "collect",
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u8";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "picachv_error::PicachvError"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "rayon::iter::ParallelIterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "rayon::slice::Iter")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::sync::Arc")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "picachv_core::policy::policy::Policy";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ],
                                                                                                [],
                                                                                                "map",
                                                                                                [
                                                                                                  Ty.function
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::sync::Arc")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "picachv_core::policy::policy::Policy";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                    (Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "u8";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "picachv_error::PicachvError"
                                                                                                      ]);
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u8";
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "picachv_error::PicachvError"
                                                                                                    ]
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "rayon::iter::IntoParallelRefIterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::sync::Arc")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "picachv_core::policy::policy::Policy";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "par_iter",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::deref::Deref",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::sync::Arc")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "picachv_core::dataframe::PolicyGuardedColumn";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          "deref",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            col
                                                                                                          |)
                                                                                                        ]
                                                                                                      |),
                                                                                                      "picachv_core::dataframe::PolicyGuardedColumn",
                                                                                                      "policies"
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      p :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::result::Result")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u8";
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ];
                                                                                                                        Ty.path
                                                                                                                          "picachv_error::PicachvError"
                                                                                                                      ],
                                                                                                                    "map_err",
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "picachv_error::PicachvError";
                                                                                                                      Ty.function
                                                                                                                        [
                                                                                                                          Ty.tuple
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "picachv_error::PicachvError"
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                        (Ty.path
                                                                                                                          "picachv_error::PicachvError")
                                                                                                                    ]
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "picachv_core::io::BinIo",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::sync::Arc")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "picachv_core::policy::policy::Policy";
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "to_byte_array",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          p
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.closure
                                                                                                                      (fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          match
                                                                                                                            γ
                                                                                                                          with
                                                                                                                          | [
                                                                                                                                α0
                                                                                                                              ] =>
                                                                                                                            M.match_operator (|
                                                                                                                              M.alloc (|
                                                                                                                                α0
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          e :=
                                                                                                                                      M.copy (|
                                                                                                                                        γ
                                                                                                                                      |) in
                                                                                                                                    Value.StructTuple
                                                                                                                                      "picachv_error::PicachvError::InvalidOperation"
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::convert::Into",
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::string::String",
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "picachv_error::ErrString"
                                                                                                                                            ],
                                                                                                                                            "into",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "alloc::string::ToString",
                                                                                                                                                Ty.path
                                                                                                                                                  "picachv_error::PicachvError",
                                                                                                                                                [],
                                                                                                                                                "to_string",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                e
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]))
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          | _ =>
                                                                                                                            M.impossible (||)
                                                                                                                          end))
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "alloc::string::String";
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::sync::Arc")
                                                                                                              [
                                                                                                                Ty.dyn
                                                                                                                  [
                                                                                                                    ("arrow_array::array::Array::Trait",
                                                                                                                      [])
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "picachv_error::PicachvError"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "picachv_error::PicachvError"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            let~ policies :=
                                                                              M.copy (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    (* Unsize *)
                                                                                    M.pointer_coercion
                                                                                      (M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::sync::Arc")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "arrow_array::array::byte_array::GenericByteArray")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "arrow_array::types::GenericBinaryType")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "i32"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "new",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "arrow_array::array::byte_array::GenericByteArray")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "arrow_array::types::GenericBinaryType")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "i32"
                                                                                                    ]
                                                                                                ],
                                                                                              "from_vec",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::map::Map")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u8";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.function
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u8";
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                        (Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u8"
                                                                                                              ]
                                                                                                          ])
                                                                                                    ],
                                                                                                  [],
                                                                                                  "collect",
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u8"
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u8";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ],
                                                                                                      [],
                                                                                                      "map",
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u8"
                                                                                                              ]
                                                                                                          ];
                                                                                                        Ty.function
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u8";
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                          (Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "slice")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "u8"
                                                                                                                ]
                                                                                                            ])
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "slice")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "u8";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ]
                                                                                                            ],
                                                                                                          "iter",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::deref::Deref",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u8";
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              "deref",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              policies
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |);
                                                                                                      M.closure
                                                                                                        (fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            match
                                                                                                              γ
                                                                                                            with
                                                                                                            | [
                                                                                                                  α0
                                                                                                                ] =>
                                                                                                              M.match_operator (|
                                                                                                                M.alloc (|
                                                                                                                  α0
                                                                                                                |),
                                                                                                                [
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            e :=
                                                                                                                        M.copy (|
                                                                                                                          γ
                                                                                                                        |) in
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::convert::AsRef",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "u8";
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "slice")
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "u8"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                          "as_ref",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            e
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)))
                                                                                                                ]
                                                                                                              |)
                                                                                                            | _ =>
                                                                                                              M.impossible (||)
                                                                                                            end))
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |))
                                                                                  |))
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.StructTuple
                                                                                "core::result::Result::Ok"
                                                                                [
                                                                                  Value.Tuple
                                                                                    [
                                                                                      M.read (|
                                                                                        let~ res :=
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_function (|
                                                                                                "alloc::fmt::format",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::Arguments",
                                                                                                    "new_v1",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    (* Unsize *)
                                                                                                    M.pointer_coercion
                                                                                                      (M.alloc (|
                                                                                                        Value.Array
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              Value.String
                                                                                                                "col_"
                                                                                                            |)
                                                                                                          ]
                                                                                                      |));
                                                                                                    (* Unsize *)
                                                                                                    M.pointer_coercion
                                                                                                      (M.alloc (|
                                                                                                        Value.Array
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.path
                                                                                                                  "core::fmt::rt::Argument",
                                                                                                                "new_display",
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                idx
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                      |))
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |) in
                                                                                        res
                                                                                      |);
                                                                                      M.read (|
                                                                                        policies
                                                                                      |)
                                                                                    ]
                                                                                ]
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.eq
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.dyn
                                                        [ ("arrow_array::array::Array::Trait", [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ bin ]
                                      |))
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                [
                                                  Ty.path
                                                    "picachv_core::dataframe::PolicyGuardedColumn";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "picachv_core::dataframe::PolicyGuardedDataFrame",
                                            "columns"
                                          |)
                                        ]
                                      |)))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "picachv_error::__private::must_use",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "picachv_error::PicachvError::ComputeError"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "alloc::string::String",
                                                    [ Ty.path "picachv_error::ErrString" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      let~ res :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::fmt::format",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  []
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.read (|
                                                                            Value.String
                                                                              "The number of columns and the number of binary data are not equal"
                                                                          |)
                                                                        ]
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      res
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ rb :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.path "arrow_array::record_batch::RecordBatch";
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "arrow_array::record_batch::RecordBatch";
                                      Ty.path "arrow_schema::error::ArrowError"
                                    ],
                                  "map_err",
                                  [
                                    Ty.path "picachv_error::PicachvError";
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                      (Ty.path "picachv_error::PicachvError")
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "arrow_array::record_batch::RecordBatch",
                                      "try_from_iter",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "alloc::string::String";
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  [
                                                    Ty.dyn
                                                      [ ("arrow_array::array::Array::Trait", []) ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::string::String"
                                      ]
                                    |),
                                    [ M.read (| bin |) ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let e := M.copy (| γ |) in
                                                  Value.StructTuple
                                                    "picachv_error::PicachvError::InvalidOperation"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "alloc::string::String",
                                                          [ Ty.path "picachv_error::ErrString" ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            let~ res :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "alloc::fmt::format",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::Arguments",
                                                                        "new_v1",
                                                                        []
                                                                      |),
                                                                      [
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.read (|
                                                                                  Value.String
                                                                                    "Failed to create record batch. "
                                                                                |)
                                                                              ]
                                                                          |));
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [
                                                                                      Ty.path
                                                                                        "arrow_schema::error::ArrowError"
                                                                                    ]
                                                                                  |),
                                                                                  [ e ]
                                                                                |)
                                                                              ]
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            res
                                                          |)
                                                        ]
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ file :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "std::fs::File",
                                  "create",
                                  [ P ]
                                |),
                                [ M.read (| path |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ writer_prop :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "parquet::file::properties::WriterPropertiesBuilder",
                          "build",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "parquet::file::properties::WriterPropertiesBuilder",
                              "set_max_row_group_size",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "parquet::file::properties::WriterProperties",
                                  "builder",
                                  []
                                |),
                                []
                              |);
                              M.read (|
                                M.get_constant (|
                                  "picachv_core::io::parquet::DEFAULT_ROW_GROUP_SIZE"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ writer :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "parquet::arrow::arrow_writer::ArrowWriter")
                                    [ Ty.path "std::fs::File" ];
                                  Ty.path "picachv_error::PicachvError"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_writer::ArrowWriter")
                                        [ Ty.path "std::fs::File" ];
                                      Ty.path "parquet::errors::ParquetError"
                                    ],
                                  "map_err",
                                  [
                                    Ty.path "picachv_error::PicachvError";
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "parquet::errors::ParquetError" ] ]
                                      (Ty.path "picachv_error::PicachvError")
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_writer::ArrowWriter")
                                        [ Ty.path "std::fs::File" ],
                                      "try_new",
                                      []
                                    |),
                                    [
                                      M.read (| file |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "arrow_array::record_batch::RecordBatch",
                                          "schema",
                                          []
                                        |),
                                        [ rb ]
                                      |);
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [ M.read (| writer_prop |) ]
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let e := M.copy (| γ |) in
                                                  Value.StructTuple
                                                    "picachv_error::PicachvError::InvalidOperation"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "alloc::string::String",
                                                          [ Ty.path "picachv_error::ErrString" ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            let~ res :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "alloc::fmt::format",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::Arguments",
                                                                        "new_v1",
                                                                        []
                                                                      |),
                                                                      [
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.read (|
                                                                                  Value.String
                                                                                    "Failed to create Arrow writer. "
                                                                                |)
                                                                              ]
                                                                          |));
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [
                                                                                      Ty.path
                                                                                        "parquet::errors::ParquetError"
                                                                                    ]
                                                                                  |),
                                                                                  [ e ]
                                                                                |)
                                                                              ]
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            res
                                                          |)
                                                        ]
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "picachv_error::PicachvError"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.path "parquet::errors::ParquetError" ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "parquet::errors::ParquetError" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_writer::ArrowWriter")
                                      [ Ty.path "std::fs::File" ],
                                    "write",
                                    []
                                  |),
                                  [ writer; rb ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to write record batch. "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "parquet::errors::ParquetError"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let~ _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.path "parquet::format::FileMetaData";
                                Ty.path "picachv_error::PicachvError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.path "parquet::format::FileMetaData";
                                    Ty.path "parquet::errors::ParquetError"
                                  ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "parquet::errors::ParquetError" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_writer::ArrowWriter")
                                      [ Ty.path "std::fs::File" ],
                                    "close",
                                    []
                                  |),
                                  [ M.read (| writer |) ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to close Arrow writer. "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "parquet::errors::ParquetError"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "picachv_error::PicachvError" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_to_parquet : M.IsAssociatedFunction Self "to_parquet" to_parquet.
    End Impl_picachv_core_dataframe_PolicyGuardedDataFrame.
    
    (*
    fn collect_reader(
        builder: ArrowReaderBuilder<SyncReader<File>>,
    ) -> Result<PolicyGuardedDataFrame, PicachvError> {
        let mut reader = builder.build().map_err(|e| {
            PicachvError::InvalidOperation(format!("Failed to build Parquet reader: {}", e).into())
        })?;
    
        let rb = reader.try_collect::<Vec<_>>().map_err(|e| {
            PicachvError::InvalidOperation(format!("Failed to read Parquet file: {}", e).into())
        })?;
    
        if rb.is_empty() {
            return Ok(PolicyGuardedDataFrame::new(vec![]));
        }
    
        let rb = arrow_select::concat::concat_batches(&rb[0].schema(), &rb).map_err(|e| {
            PicachvError::InvalidOperation(format!("Failed to concat batches: {}", e).into())
        })?;
    
        PolicyGuardedDataFrame::new_from_record_batch(rb)
    }
    *)
    Definition collect_reader (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ builder ] =>
        ltac:(M.monadic
          (let builder := M.alloc (| builder |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ reader :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.path "parquet::arrow::arrow_reader::ParquetRecordBatchReader";
                                Ty.path "picachv_error::PicachvError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.path
                                      "parquet::arrow::arrow_reader::ParquetRecordBatchReader";
                                    Ty.path "parquet::errors::ParquetError"
                                  ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "parquet::errors::ParquetError" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                      [
                                        Ty.apply
                                          (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                          [ Ty.path "std::fs::File" ]
                                      ],
                                    "build",
                                    []
                                  |),
                                  [ M.read (| builder |) ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to build Parquet reader: "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "parquet::errors::ParquetError"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ rb :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "arrow_array::record_batch::RecordBatch";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "picachv_error::PicachvError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "arrow_array::record_batch::RecordBatch";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "arrow_schema::error::ArrowError"
                                  ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.path
                                      "parquet::arrow::arrow_reader::ParquetRecordBatchReader",
                                    [],
                                    "try_collect",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "arrow_array::record_batch::RecordBatch";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [ reader ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to read Parquet file: "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "arrow_schema::error::ArrowError"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "arrow_array::record_batch::RecordBatch";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "is_empty",
                                    []
                                  |),
                                  [ rb ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame",
                                          "new",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    [
                                                      Ty.path
                                                        "picachv_core::dataframe::PolicyGuardedColumn";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              []
                                            |),
                                            []
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ rb :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.path "arrow_array::record_batch::RecordBatch";
                                Ty.path "picachv_error::PicachvError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.path "arrow_array::record_batch::RecordBatch";
                                    Ty.path "arrow_schema::error::ArrowError"
                                  ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "arrow_schema::error::ArrowError" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_function (|
                                    "arrow_select::concat::concat_batches",
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "arrow_array::record_batch::RecordBatch";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "arrow_array::record_batch::RecordBatch",
                                          "schema",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::index::Index",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "arrow_array::record_batch::RecordBatch";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [ Ty.path "usize" ],
                                              "index",
                                              []
                                            |),
                                            [ rb; Value.Integer 0 ]
                                          |)
                                        ]
                                      |)
                                    |);
                                    rb
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to concat batches: "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "arrow_schema::error::ArrowError"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path
                                              "picachv_core::dataframe::PolicyGuardedDataFrame";
                                            Ty.path "picachv_error::PicachvError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "picachv_core::dataframe::PolicyGuardedDataFrame",
                      "new_from_record_batch",
                      []
                    |),
                    [ M.read (| rb |) ]
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_collect_reader :
      M.IsFunction "picachv_core::io::parquet::collect_reader" collect_reader.
    
    (*
    fn get_initial_builder<P: AsRef<Path>>(
        path: P,
        projection: &[usize],
    ) -> PicachvResult<ArrowReaderBuilder<SyncReader<File>>> {
        let file = File::open(path).map_err(|e| {
            PicachvError::InvalidOperation(format!("Failed to open file: {}", e).into())
        })?;
    
        let mut builder = ArrowReaderBuilder::try_new(file)
            .map_err(|e| {
                PicachvError::InvalidOperation(format!("Failed to create Parquet reader: {}", e).into())
            })?
            .with_batch_size(DEFAULT_ROW_GROUP_SIZE);
        let file_metadata = builder.metadata().file_metadata().clone();
        let proj_mask = ProjectionMask::roots(file_metadata.schema_descr(), projection.to_vec());
    
        builder = builder.with_projection(proj_mask);
    
        Ok(builder)
    }
    *)
    Definition get_initial_builder (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ P ], [ path; projection ] =>
        ltac:(M.monadic
          (let path := M.alloc (| path |) in
          let projection := M.alloc (| projection |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ file :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "std::fs::File"; Ty.path "picachv_error::PicachvError" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.path "std::fs::File"; Ty.path "std::io::error::Error" ],
                                "map_err",
                                [
                                  Ty.path "picachv_error::PicachvError";
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "std::io::error::Error" ] ]
                                    (Ty.path "picachv_error::PicachvError")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "std::fs::File",
                                    "open",
                                    [ P ]
                                  |),
                                  [ M.read (| path |) ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let e := M.copy (| γ |) in
                                                Value.StructTuple
                                                  "picachv_error::PicachvError::InvalidOperation"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "alloc::string::String",
                                                        [ Ty.path "picachv_error::ErrString" ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          let~ res :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "alloc::fmt::format",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      []
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "Failed to open file: "
                                                                              |)
                                                                            ]
                                                                        |));
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.alloc (|
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  "new_display",
                                                                                  [
                                                                                    Ty.path
                                                                                      "std::io::error::Error"
                                                                                  ]
                                                                                |),
                                                                                [ e ]
                                                                              |)
                                                                            ]
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          res
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "parquet::arrow::arrow_reader::SyncReader")
                                                  [ Ty.path "std::fs::File" ]
                                              ];
                                            Ty.path "picachv_error::PicachvError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "picachv_error::PicachvError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ builder :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                          [
                            Ty.apply
                              (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                              [ Ty.path "std::fs::File" ]
                          ],
                        "with_batch_size",
                        []
                      |),
                      [
                        M.read (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                        [
                                          Ty.apply
                                            (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                            [ Ty.path "std::fs::File" ]
                                        ];
                                      Ty.path "picachv_error::PicachvError"
                                    ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                            [
                                              Ty.apply
                                                (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                                [ Ty.path "std::fs::File" ]
                                            ];
                                          Ty.path "parquet::errors::ParquetError"
                                        ],
                                      "map_err",
                                      [
                                        Ty.path "picachv_error::PicachvError";
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "parquet::errors::ParquetError" ] ]
                                          (Ty.path "picachv_error::PicachvError")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                            [
                                              Ty.apply
                                                (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                                [ Ty.path "std::fs::File" ]
                                            ],
                                          "try_new",
                                          []
                                        |),
                                        [ M.read (| file |) ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let e := M.copy (| γ |) in
                                                      Value.StructTuple
                                                        "picachv_error::PicachvError::InvalidOperation"
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "alloc::string::String",
                                                              [ Ty.path "picachv_error::ErrString"
                                                              ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                let~ res :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "alloc::fmt::format",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_v1",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "Failed to create Parquet reader: "
                                                                                    |)
                                                                                  ]
                                                                              |));
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [
                                                                                          Ty.path
                                                                                            "parquet::errors::ParquetError"
                                                                                        ]
                                                                                      |),
                                                                                      [ e ]
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                res
                                                              |)
                                                            ]
                                                          |)
                                                        ]))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "parquet::arrow::arrow_reader::SyncReader")
                                                        [ Ty.path "std::fs::File" ]
                                                    ];
                                                  Ty.path "picachv_error::PicachvError"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "picachv_error::PicachvError"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |);
                        M.read (|
                          M.get_constant (| "picachv_core::io::parquet::DEFAULT_ROW_GROUP_SIZE" |)
                        |)
                      ]
                    |)
                  |) in
                let~ file_metadata :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "parquet::file::metadata::FileMetaData",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "parquet::file::metadata::ParquetMetaData",
                            "file_metadata",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "parquet::file::metadata::ParquetMetaData";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                                      [
                                        Ty.apply
                                          (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                                          [ Ty.path "std::fs::File" ]
                                      ],
                                    "metadata",
                                    []
                                  |),
                                  [ builder ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ proj_mask :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "parquet::arrow::ProjectionMask",
                        "roots",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "parquet::file::metadata::FileMetaData",
                            "schema_descr",
                            []
                          |),
                          [ file_metadata ]
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                            "to_vec",
                            []
                          |),
                          [ M.read (| projection |) ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.write (|
                    builder,
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "parquet::arrow::arrow_reader::ArrowReaderBuilder")
                          [
                            Ty.apply
                              (Ty.path "parquet::arrow::arrow_reader::SyncReader")
                              [ Ty.path "std::fs::File" ]
                          ],
                        "with_projection",
                        []
                      |),
                      [ M.read (| builder |); M.read (| proj_mask |) ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| builder |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Function_get_initial_builder :
      M.IsFunction "picachv_core::io::parquet::get_initial_builder" get_initial_builder.
  End parquet.
End io.
